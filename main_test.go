/**
 * (C) Copyright IBM Corp. 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package main_test

import (
	"fmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	. "github.com/onsi/gomega/gexec"
	"ibmcloud-backup-recovery-cli/testing_utilities"
	"io"
	"net/http"
	"net/http/httptest"
	"os"
	"os/exec"
)

const credentialErrMsg = "Could not authenticate the plug-in.\nYou must either log in with 'ibmcloud login', export credentials as environment variables, or store them in a credentials file.\nFor more information, see https://github.com/IBM/ibm-cloud-sdk-common/blob/main/README.md#define-configuration-properties.\nError"

var testExecutable string

var _ = BeforeSuite(func() {
	defer GinkgoRecover()
	var err error
	testExecutable, err = Build("./main.go")
	Expect(err).To(BeNil())

	err = os.Mkdir("cleandir", 0755)
	Expect(err).To(BeNil())

	err = os.Mkdir("cleandir/tempdir", 0755)
	Expect(err).To(BeNil())

	message := []byte(testing_utilities.MockFileContents)
	err = os.WriteFile("cleandir/tempdir/test-file.txt", message, 0644)
	Expect(err).To(BeNil())

	err = os.WriteFile("cleandir/tempdir/test-file-2.txt", message, 0644)
	Expect(err).To(BeNil())
})

var _ = AfterSuite(func() {
	defer GinkgoRecover()
	CleanupBuildArtifacts()

	err := os.RemoveAll("cleandir")
	Expect(err).To(BeNil())
})

var _ = Describe("backup-recovery CLI plug-in", func() {
	var testServer *httptest.Server
	var testEnvironment []string

	runCmd := func(arguments, inputs []string) (*Session, error) {
		cmd := exec.Command(testExecutable, arguments...)
		cmd.Env = append(cmd.Env, testEnvironment...)
		// Prevent the service to create the authenticator from credentials file.
		cmd.Env = append(cmd.Env, "IBM_CREDENTIALS_FILE=''", "HOME=''", "USERPROFILE=''", "HOMEPATH=''")
		cmd.Dir = "cleandir"

		// Handle interactive mode.
		if inputs != nil {
			// Use the stdin of the subprocess to pass inputs to the command (interactively).
			stdin, err := cmd.StdinPipe()
			if err != nil {
				return nil, err
			}


			// Launch a separate thread which will send each input
			// into the subprocess. It's important to close the
			// `stdin` inside at the end of this block and not outside.
			go func() {
				defer stdin.Close()
				for _, input := range inputs {
					_, _ = io.WriteString(stdin, input+"\n")
				}
			}()
		}

		session, err := Start(cmd, GinkgoWriter, GinkgoWriter)
		// Timeout after 10 seconds.
		session.Wait(10)

		return session, err
	}

	Describe("Run the `protection-source list` command", func() {
		var (
			operationPath = "/irisservices/api/v1/public/protectionSources"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"entityPaginationParameters": {"afterCursorEntityId": 26, "beforeCursorEntityId": 26, "nodeId": 26, "pageSize": 26}, "entityPermissionInfo": {"entityId": 26, "groups": [{"domain": "testString", "groupName": "testString", "sid": "testString", "tenantIds": ["testString"]}], "isInferred": true, "isRegisteredBySp": true, "registeringTenantId": "testString", "tenant": {"bifrostEnabled": true, "isManagedOnHelios": true, "name": true, "tenantId": true}, "users": [{"domain": "testString", "sid": "testString", "tenantId": "testString", "userName": "testString"}]}, "logicalSize": 26, "objectProtectionInfo": {"autoProtectParentId": 26, "entityId": 26, "hasActiveObjectProtectionSpec": 26}, "protectedSourcesSummary": [{"environment": "kVMware", "leavesCount": 26, "totalLogicalSize": 26}], "protectionSource": {"connectionId": 26, "connectorGroupId": 26, "customName": "testString", "environment": "kPhysical", "id": 26, "name": "testString", "parentId": 26, "physicalProtectionSource": {"agents": [{"cbmrVersion": "testString", "fileCbtInfo": {"fileVersion": {"buildVer": 72.5, "majorVer": 72.5, "minorVer": 72.5, "revisionNum": 72.5}, "isInstalled": true, "rebootStatus": "kRebooted", "serviceState": {"name": "testString", "state": "testString"}}, "hostType": "kLinux", "id": 26, "name": "testString", "oracleMultiNodeChannelSupported": true, "registrationInfo": {"accessInfo": {"connectionId": 26, "connectorGroupId": 26, "endpoint": "testString", "environment": "kPhysical", "id": 26, "version": 26}, "allowedIpAddresses": ["testString"], "authenticationErrorMessage": "testString", "authenticationStatus": "kPending", "blacklistedIpAddresses": ["testString"], "deniedIpAddresses": ["testString"], "environments": ["kPhysical"], "isDbAuthenticated": true, "isStorageArraySnapshotEnabled": true, "linkVmsAcrossVcenter": true, "minimumFreeSpaceGB": 26, "minimumFreeSpacePercent": 26, "password": "testString", "physicalParams": {"applications": ["kSQL"], "password": "testString", "throttlingConfig": {"cpuThrottlingConfig": {"fixedThreshold": 26, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}, "startTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}}, "threshold": 26}]}, "networkThrottlingConfig": {"fixedThreshold": 26, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}, "startTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}}, "threshold": 26}]}}, "username": "testString"}, "progressMonitorPath": "testString", "refreshErrorMessage": "testString", "refreshTimeUsecs": 26, "registeredAppsInfo": [{"authenticationErrorMessage": "testString", "authenticationStatus": "kPending", "environment": "kPhysical", "hostSettingsCheckResults": [{"checkType": "kIsAgentPortAccessible", "resultType": "kPass", "userMessage": "testString"}], "refreshErrorMessage": "testString"}], "registrationTimeUsecs": 26, "subnets": [{"component": "testString", "description": "testString", "id": 72.5, "ip": "testString", "netmaskBits": 72.5, "netmaskIp4": "testString", "nfsAccess": "kDisabled", "nfsAllSquash": true, "nfsRootSquash": true, "s3Access": "kDisabled", "smbAccess": "kDisabled", "tenantId": "testString"}], "throttlingPolicy": {"enforceMaxStreams": true, "enforceRegisteredSourceMaxBackups": true, "isEnabled": true, "latencyThresholds": {"activeTaskMsecs": 26, "newTaskMsecs": 26}, "maxConcurrentStreams": 72.5, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 72.5, "maxParallelMetadataFetchIncrementalPercentage": 72.5, "maxParallelReadWriteFullPercentage": 72.5, "maxParallelReadWriteIncrementalPercentage": 72.5}, "registeredSourceMaxConcurrentBackups": 72.5, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}, "storageArraySnapshotThrottlingPolicies": [{"id": 26, "isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "maxSnapshotConfig": {"maxSnapshots": 72.5}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}}]}}, "throttlingPolicyOverrides": [{"datastoreId": 26, "datastoreName": "testString", "throttlingPolicy": {"enforceMaxStreams": true, "enforceRegisteredSourceMaxBackups": true, "isEnabled": true, "latencyThresholds": {"activeTaskMsecs": 26, "newTaskMsecs": 26}, "maxConcurrentStreams": 72.5, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 72.5, "maxParallelMetadataFetchIncrementalPercentage": 72.5, "maxParallelReadWriteFullPercentage": 72.5, "maxParallelReadWriteIncrementalPercentage": 72.5}, "registeredSourceMaxConcurrentBackups": 72.5, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}, "storageArraySnapshotThrottlingPolicies": [{"id": 26, "isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "maxSnapshotConfig": {"maxSnapshots": 72.5}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}}]}}}], "useOAuthForExchangeOnline": true, "useVmBiosUuid": true, "userMessages": ["testString"], "username": "testString", "vlanParams": {"vlan": 72.5, "disableVlan": true, "interfaceName": "testString"}, "warningMessages": ["testString"]}, "sourceSideDedupEnabled": true, "status": "kUnknown", "statusMessage": "testString", "upgradability": "kUpgradable", "upgradeStatus": "kIdle", "upgradeStatusMessage": "testString", "version": "testString", "volCbtInfo": {"fileVersion": {"buildVer": 72.5, "majorVer": 72.5, "minorVer": 72.5, "revisionNum": 72.5}, "isInstalled": true, "rebootStatus": "kRebooted", "serviceState": {"name": "testString", "state": "testString"}}}], "clusterSourceType": "testString", "hostName": "testString", "hostType": "kLinux", "id": {"clusterId": 26, "clusterIncarnationId": 26, "id": 26}, "isProxyHost": true, "memorySizeBytes": 26, "name": "testString", "networkingInfo": {"resourceVec": [{"endpoints": [{"fqdn": "testString", "ipv4Addr": "testString", "ipv6Addr": "testString"}], "type": "testString"}]}, "numProcessors": 26, "osName": "testString", "type": "kGroup", "vcsVersion": "testString", "volumes": [{"devicePath": "testString", "guid": "testString", "isBootVolume": true, "isExtendedAttributesSupported": true, "isProtected": true, "isSharedVolume": true, "label": "testString", "logicalSizeBytes": 72.5, "mountPoints": ["testString"], "mountType": "testString", "networkPath": "testString", "usedSizeBytes": 72.5}], "vsswriters": [{"isWriterExcluded": true, "writerName": true}]}, "sqlProtectionSource": {"IsAvailableForVssBackup": true, "createdTimestamp": "testString", "databaseName": "testString", "dbAagEntityId": 26, "dbAagName": "testString", "dbCompatibilityLevel": 26, "dbFileGroups": ["testString"], "dbFiles": [{"fileType": "kRows", "fullPath": "testString", "sizeBytes": 26}], "dbOwnerUsername": "testString", "defaultDatabaseLocation": "testString", "defaultLogLocation": "testString", "id": {"createdDateMsecs": 26, "databaseId": 26, "instanceId": "testString"}, "isEncrypted": true, "name": "testString", "ownerId": 26, "recoveryModel": "kSimpleRecoveryModel", "sqlServerDbState": "kOnline", "sqlServerInstanceVersion": {"build": 72.5, "majorVersion": 72.5, "minorVersion": 72.5, "revision": 72.5, "versionString": 72.5}, "type": "kInstance"}}, "registrationInfo": {"accessInfo": {"connectionId": 26, "connectorGroupId": 26, "endpoint": "testString", "environment": "kPhysical", "id": 26, "version": 26}, "allowedIpAddresses": ["testString"], "authenticationErrorMessage": "testString", "authenticationStatus": "kPending", "blacklistedIpAddresses": ["testString"], "deniedIpAddresses": ["testString"], "environments": ["kPhysical"], "isDbAuthenticated": true, "isStorageArraySnapshotEnabled": true, "linkVmsAcrossVcenter": true, "minimumFreeSpaceGB": 26, "minimumFreeSpacePercent": 26, "password": "testString", "physicalParams": {"applications": ["kSQL"], "password": "testString", "throttlingConfig": {"cpuThrottlingConfig": {"fixedThreshold": 26, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}, "startTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}}, "threshold": 26}]}, "networkThrottlingConfig": {"fixedThreshold": 26, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}, "startTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}}, "threshold": 26}]}}, "username": "testString"}, "progressMonitorPath": "testString", "refreshErrorMessage": "testString", "refreshTimeUsecs": 26, "registeredAppsInfo": [{"authenticationErrorMessage": "testString", "authenticationStatus": "kPending", "environment": "kPhysical", "hostSettingsCheckResults": [{"checkType": "kIsAgentPortAccessible", "resultType": "kPass", "userMessage": "testString"}], "refreshErrorMessage": "testString"}], "registrationTimeUsecs": 26, "subnets": [{"component": "testString", "description": "testString", "id": 72.5, "ip": "testString", "netmaskBits": 72.5, "netmaskIp4": "testString", "nfsAccess": "kDisabled", "nfsAllSquash": true, "nfsRootSquash": true, "s3Access": "kDisabled", "smbAccess": "kDisabled", "tenantId": "testString"}], "throttlingPolicy": {"enforceMaxStreams": true, "enforceRegisteredSourceMaxBackups": true, "isEnabled": true, "latencyThresholds": {"activeTaskMsecs": 26, "newTaskMsecs": 26}, "maxConcurrentStreams": 72.5, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 72.5, "maxParallelMetadataFetchIncrementalPercentage": 72.5, "maxParallelReadWriteFullPercentage": 72.5, "maxParallelReadWriteIncrementalPercentage": 72.5}, "registeredSourceMaxConcurrentBackups": 72.5, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}, "storageArraySnapshotThrottlingPolicies": [{"id": 26, "isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "maxSnapshotConfig": {"maxSnapshots": 72.5}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}}]}}, "throttlingPolicyOverrides": [{"datastoreId": 26, "datastoreName": "testString", "throttlingPolicy": {"enforceMaxStreams": true, "enforceRegisteredSourceMaxBackups": true, "isEnabled": true, "latencyThresholds": {"activeTaskMsecs": 26, "newTaskMsecs": 26}, "maxConcurrentStreams": 72.5, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 72.5, "maxParallelMetadataFetchIncrementalPercentage": 72.5, "maxParallelReadWriteFullPercentage": 72.5, "maxParallelReadWriteIncrementalPercentage": 72.5}, "registeredSourceMaxConcurrentBackups": 72.5, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}, "storageArraySnapshotThrottlingPolicies": [{"id": 26, "isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "maxSnapshotConfig": {"maxSnapshots": 72.5}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}}]}}}], "useOAuthForExchangeOnline": true, "useVmBiosUuid": true, "userMessages": ["testString"], "username": "testString", "vlanParams": {"vlan": 72.5, "disableVlan": true, "interfaceName": "testString"}, "warningMessages": ["testString"]}, "totalDowntieredSizeInBytes": 26, "totalUptieredSizeInBytes": 26, "unprotectedSourcesSummary": [{"environment": "kVMware", "leavesCount": 26, "totalLogicalSize": 26}]}]`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--exclude-office365-types=kDomain,kOutlook,kMailbox,kUsers,kUser,kGroups,kGroup,kSites,kSite`,
					`--get-teams-channels=true`,
					`--after-cursor-entity-id=26`,
					`--before-cursor-entity-id=26`,
					`--node-id=26`,
					`--page-size=26`,
					`--has-valid-mailbox=true`,
					`--has-valid-onedrive=true`,
					`--is-security-group=true`,
					`--id=26`,
					`--num-levels=72.5`,
					`--exclude-types=kVCenter,kFolder,kDatacenter,kComputeResource,kClusterComputeResource,kResourcePool,kDatastore,kHostSystem,kVirtualMachine,kVirtualApp,kStandaloneHost,kStoragePod,kNetwork,kDistributedVirtualPortgroup,kTagCategory,kTag`,
					`--exclude-aws-types=kEC2Instance,kRDSInstance,kAuroraCluster,kS3Bucket,kTag,kRDSTag,kAuroraTag,kS3Tag`,
					`--exclude-kubernetes-types=kService`,
					`--include-datastores=true`,
					`--include-networks=true`,
					`--include-vm-folders=true`,
					`--include-sfdc-fields=true`,
					`--include-system-v-apps=true`,
					`--environments=kVMware,kHyperV,kSQL,kView,kPuppeteer,kPhysical,kPure,kNimble,kAzure,kNetapp,kAgent,kGenericNas,kAcropolis,kPhysicalFiles,kIsilon,kGPFS,kKVM,kAWS,kExchange,kHyperVVSS,kOracle,kGCP,kFlashBlade,kAWSNative,kO365,kO365Outlook,kHyperFlex,kGCPNative,kAzureNative,kKubernetes,kElastifile,kAD,kRDSSnapshotManager,kCassandra,kMongoDB,kCouchbase,kHdfs,kHBase,kUDA,KSfdc,kAwsS3`,
					`--environment=kPhysical`,
					`--include-entity-permission-info=true`,
					`--sids=sid1`,
					`--include-source-credentials=true`,
					`--encryption-key=encryptionKey`,
					`--include-object-protection-info=true`,
					`--prune-non-critical-info=true`,
					`--prune-aggregation-info=true`,
					`--request-initiator-type=requestInitiatorType`,
					`--use-cached-data=true`,
					`--all-under-hierarchy=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--exclude-office365-types=kDomain,kOutlook,kMailbox,kUsers,kUser,kGroups,kGroup,kSites,kSite`,
					`--get-teams-channels=true`,
					`--after-cursor-entity-id=26`,
					`--before-cursor-entity-id=26`,
					`--node-id=26`,
					`--page-size=26`,
					`--has-valid-mailbox=true`,
					`--has-valid-onedrive=true`,
					`--is-security-group=true`,
					`--id=26`,
					`--num-levels=72.5`,
					`--exclude-types=kVCenter,kFolder,kDatacenter,kComputeResource,kClusterComputeResource,kResourcePool,kDatastore,kHostSystem,kVirtualMachine,kVirtualApp,kStandaloneHost,kStoragePod,kNetwork,kDistributedVirtualPortgroup,kTagCategory,kTag`,
					`--exclude-aws-types=kEC2Instance,kRDSInstance,kAuroraCluster,kS3Bucket,kTag,kRDSTag,kAuroraTag,kS3Tag`,
					`--exclude-kubernetes-types=kService`,
					`--include-datastores=true`,
					`--include-networks=true`,
					`--include-vm-folders=true`,
					`--include-sfdc-fields=true`,
					`--include-system-v-apps=true`,
					`--environments=kVMware,kHyperV,kSQL,kView,kPuppeteer,kPhysical,kPure,kNimble,kAzure,kNetapp,kAgent,kGenericNas,kAcropolis,kPhysicalFiles,kIsilon,kGPFS,kKVM,kAWS,kExchange,kHyperVVSS,kOracle,kGCP,kFlashBlade,kAWSNative,kO365,kO365Outlook,kHyperFlex,kGCPNative,kAzureNative,kKubernetes,kElastifile,kAD,kRDSSnapshotManager,kCassandra,kMongoDB,kCouchbase,kHdfs,kHBase,kUDA,KSfdc,kAwsS3`,
					`--environment=kPhysical`,
					`--include-entity-permission-info=true`,
					`--sids=sid1`,
					`--include-source-credentials=true`,
					`--encryption-key=encryptionKey`,
					`--include-object-protection-info=true`,
					`--prune-non-critical-info=true`,
					`--prune-aggregation-info=true`,
					`--request-initiator-type=requestInitiatorType`,
					`--use-cached-data=true`,
					`--all-under-hierarchy=true`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `[{"entityPaginationParameters": {"afterCursorEntityId": 26, "beforeCursorEntityId": 26, "nodeId": 26, "pageSize": 26}, "entityPermissionInfo": {"entityId": 26, "groups": [{"domain": "testString", "groupName": "testString", "sid": "testString", "tenantIds": ["testString"]}], "isInferred": true, "isRegisteredBySp": true, "registeringTenantId": "testString", "tenant": {"bifrostEnabled": true, "isManagedOnHelios": true, "name": true, "tenantId": true}, "users": [{"domain": "testString", "sid": "testString", "tenantId": "testString", "userName": "testString"}]}, "logicalSize": 26, "objectProtectionInfo": {"autoProtectParentId": 26, "entityId": 26, "hasActiveObjectProtectionSpec": 26}, "protectedSourcesSummary": [{"environment": "kVMware", "leavesCount": 26, "totalLogicalSize": 26}], "protectionSource": {"connectionId": 26, "connectorGroupId": 26, "customName": "testString", "environment": "kPhysical", "id": 26, "name": "testString", "parentId": 26, "physicalProtectionSource": {"agents": [{"cbmrVersion": "testString", "fileCbtInfo": {"fileVersion": {"buildVer": 72.5, "majorVer": 72.5, "minorVer": 72.5, "revisionNum": 72.5}, "isInstalled": true, "rebootStatus": "kRebooted", "serviceState": {"name": "testString", "state": "testString"}}, "hostType": "kLinux", "id": 26, "name": "testString", "oracleMultiNodeChannelSupported": true, "registrationInfo": {"accessInfo": {"connectionId": 26, "connectorGroupId": 26, "endpoint": "testString", "environment": "kPhysical", "id": 26, "version": 26}, "allowedIpAddresses": ["testString"], "authenticationErrorMessage": "testString", "authenticationStatus": "kPending", "blacklistedIpAddresses": ["testString"], "deniedIpAddresses": ["testString"], "environments": ["kPhysical"], "isDbAuthenticated": true, "isStorageArraySnapshotEnabled": true, "linkVmsAcrossVcenter": true, "minimumFreeSpaceGB": 26, "minimumFreeSpacePercent": 26, "password": "testString", "physicalParams": {"applications": ["kSQL"], "password": "testString", "throttlingConfig": {"cpuThrottlingConfig": {"fixedThreshold": 26, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}, "startTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}}, "threshold": 26}]}, "networkThrottlingConfig": {"fixedThreshold": 26, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}, "startTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}}, "threshold": 26}]}}, "username": "testString"}, "progressMonitorPath": "testString", "refreshErrorMessage": "testString", "refreshTimeUsecs": 26, "registeredAppsInfo": [{"authenticationErrorMessage": "testString", "authenticationStatus": "kPending", "environment": "kPhysical", "hostSettingsCheckResults": [{"checkType": "kIsAgentPortAccessible", "resultType": "kPass", "userMessage": "testString"}], "refreshErrorMessage": "testString"}], "registrationTimeUsecs": 26, "subnets": [{"component": "testString", "description": "testString", "id": 72.5, "ip": "testString", "netmaskBits": 72.5, "netmaskIp4": "testString", "nfsAccess": "kDisabled", "nfsAllSquash": true, "nfsRootSquash": true, "s3Access": "kDisabled", "smbAccess": "kDisabled", "tenantId": "testString"}], "throttlingPolicy": {"enforceMaxStreams": true, "enforceRegisteredSourceMaxBackups": true, "isEnabled": true, "latencyThresholds": {"activeTaskMsecs": 26, "newTaskMsecs": 26}, "maxConcurrentStreams": 72.5, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 72.5, "maxParallelMetadataFetchIncrementalPercentage": 72.5, "maxParallelReadWriteFullPercentage": 72.5, "maxParallelReadWriteIncrementalPercentage": 72.5}, "registeredSourceMaxConcurrentBackups": 72.5, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}, "storageArraySnapshotThrottlingPolicies": [{"id": 26, "isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "maxSnapshotConfig": {"maxSnapshots": 72.5}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}}]}}, "throttlingPolicyOverrides": [{"datastoreId": 26, "datastoreName": "testString", "throttlingPolicy": {"enforceMaxStreams": true, "enforceRegisteredSourceMaxBackups": true, "isEnabled": true, "latencyThresholds": {"activeTaskMsecs": 26, "newTaskMsecs": 26}, "maxConcurrentStreams": 72.5, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 72.5, "maxParallelMetadataFetchIncrementalPercentage": 72.5, "maxParallelReadWriteFullPercentage": 72.5, "maxParallelReadWriteIncrementalPercentage": 72.5}, "registeredSourceMaxConcurrentBackups": 72.5, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}, "storageArraySnapshotThrottlingPolicies": [{"id": 26, "isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "maxSnapshotConfig": {"maxSnapshots": 72.5}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}}]}}}], "useOAuthForExchangeOnline": true, "useVmBiosUuid": true, "userMessages": ["testString"], "username": "testString", "vlanParams": {"vlan": 72.5, "disableVlan": true, "interfaceName": "testString"}, "warningMessages": ["testString"]}, "sourceSideDedupEnabled": true, "status": "kUnknown", "statusMessage": "testString", "upgradability": "kUpgradable", "upgradeStatus": "kIdle", "upgradeStatusMessage": "testString", "version": "testString", "volCbtInfo": {"fileVersion": {"buildVer": 72.5, "majorVer": 72.5, "minorVer": 72.5, "revisionNum": 72.5}, "isInstalled": true, "rebootStatus": "kRebooted", "serviceState": {"name": "testString", "state": "testString"}}}], "clusterSourceType": "testString", "hostName": "testString", "hostType": "kLinux", "id": {"clusterId": 26, "clusterIncarnationId": 26, "id": 26}, "isProxyHost": true, "memorySizeBytes": 26, "name": "testString", "networkingInfo": {"resourceVec": [{"endpoints": [{"fqdn": "testString", "ipv4Addr": "testString", "ipv6Addr": "testString"}], "type": "testString"}]}, "numProcessors": 26, "osName": "testString", "type": "kGroup", "vcsVersion": "testString", "volumes": [{"devicePath": "testString", "guid": "testString", "isBootVolume": true, "isExtendedAttributesSupported": true, "isProtected": true, "isSharedVolume": true, "label": "testString", "logicalSizeBytes": 72.5, "mountPoints": ["testString"], "mountType": "testString", "networkPath": "testString", "usedSizeBytes": 72.5}], "vsswriters": [{"isWriterExcluded": true, "writerName": true}]}, "sqlProtectionSource": {"IsAvailableForVssBackup": true, "createdTimestamp": "testString", "databaseName": "testString", "dbAagEntityId": 26, "dbAagName": "testString", "dbCompatibilityLevel": 26, "dbFileGroups": ["testString"], "dbFiles": [{"fileType": "kRows", "fullPath": "testString", "sizeBytes": 26}], "dbOwnerUsername": "testString", "defaultDatabaseLocation": "testString", "defaultLogLocation": "testString", "id": {"createdDateMsecs": 26, "databaseId": 26, "instanceId": "testString"}, "isEncrypted": true, "name": "testString", "ownerId": 26, "recoveryModel": "kSimpleRecoveryModel", "sqlServerDbState": "kOnline", "sqlServerInstanceVersion": {"build": 72.5, "majorVersion": 72.5, "minorVersion": 72.5, "revision": 72.5, "versionString": 72.5}, "type": "kInstance"}}, "registrationInfo": {"accessInfo": {"connectionId": 26, "connectorGroupId": 26, "endpoint": "testString", "environment": "kPhysical", "id": 26, "version": 26}, "allowedIpAddresses": ["testString"], "authenticationErrorMessage": "testString", "authenticationStatus": "kPending", "blacklistedIpAddresses": ["testString"], "deniedIpAddresses": ["testString"], "environments": ["kPhysical"], "isDbAuthenticated": true, "isStorageArraySnapshotEnabled": true, "linkVmsAcrossVcenter": true, "minimumFreeSpaceGB": 26, "minimumFreeSpacePercent": 26, "password": "testString", "physicalParams": {"applications": ["kSQL"], "password": "testString", "throttlingConfig": {"cpuThrottlingConfig": {"fixedThreshold": 26, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}, "startTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}}, "threshold": 26}]}, "networkThrottlingConfig": {"fixedThreshold": 26, "patternType": "kNoThrottling", "throttlingWindows": [{"dayTimeWindow": {"endTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}, "startTime": {"day": "kSunday", "time": {"hour": 38, "minute": 38}}}, "threshold": 26}]}}, "username": "testString"}, "progressMonitorPath": "testString", "refreshErrorMessage": "testString", "refreshTimeUsecs": 26, "registeredAppsInfo": [{"authenticationErrorMessage": "testString", "authenticationStatus": "kPending", "environment": "kPhysical", "hostSettingsCheckResults": [{"checkType": "kIsAgentPortAccessible", "resultType": "kPass", "userMessage": "testString"}], "refreshErrorMessage": "testString"}], "registrationTimeUsecs": 26, "subnets": [{"component": "testString", "description": "testString", "id": 72.5, "ip": "testString", "netmaskBits": 72.5, "netmaskIp4": "testString", "nfsAccess": "kDisabled", "nfsAllSquash": true, "nfsRootSquash": true, "s3Access": "kDisabled", "smbAccess": "kDisabled", "tenantId": "testString"}], "throttlingPolicy": {"enforceMaxStreams": true, "enforceRegisteredSourceMaxBackups": true, "isEnabled": true, "latencyThresholds": {"activeTaskMsecs": 26, "newTaskMsecs": 26}, "maxConcurrentStreams": 72.5, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 72.5, "maxParallelMetadataFetchIncrementalPercentage": 72.5, "maxParallelReadWriteFullPercentage": 72.5, "maxParallelReadWriteIncrementalPercentage": 72.5}, "registeredSourceMaxConcurrentBackups": 72.5, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}, "storageArraySnapshotThrottlingPolicies": [{"id": 26, "isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "maxSnapshotConfig": {"maxSnapshots": 72.5}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}}]}}, "throttlingPolicyOverrides": [{"datastoreId": 26, "datastoreName": "testString", "throttlingPolicy": {"enforceMaxStreams": true, "enforceRegisteredSourceMaxBackups": true, "isEnabled": true, "latencyThresholds": {"activeTaskMsecs": 26, "newTaskMsecs": 26}, "maxConcurrentStreams": 72.5, "nasSourceParams": {"maxParallelMetadataFetchFullPercentage": 72.5, "maxParallelMetadataFetchIncrementalPercentage": 72.5, "maxParallelReadWriteFullPercentage": 72.5, "maxParallelReadWriteIncrementalPercentage": 72.5}, "registeredSourceMaxConcurrentBackups": 72.5, "storageArraySnapshotConfig": {"isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "storageArraySnapshotMaxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}, "storageArraySnapshotThrottlingPolicies": [{"id": 26, "isMaxSnapshotsConfigEnabled": true, "isMaxSpaceConfigEnabled": true, "maxSnapshotConfig": {"maxSnapshots": 72.5}, "maxSpaceConfig": {"maxSnapshotSpacePercentage": 72.5}}]}}}], "useOAuthForExchangeOnline": true, "useVmBiosUuid": true, "userMessages": ["testString"], "username": "testString", "vlanParams": {"vlan": 72.5, "disableVlan": true, "interfaceName": "testString"}, "warningMessages": ["testString"]}, "totalDowntieredSizeInBytes": 26, "totalUptieredSizeInBytes": 26, "unprotectedSourcesSummary": [{"environment": "kVMware", "leavesCount": 26, "totalLogicalSize": 26}]}]`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--exclude-office365-types=kDomain,kOutlook,kMailbox,kUsers,kUser,kGroups,kGroup,kSites,kSite`,
					`--get-teams-channels=true`,
					`--after-cursor-entity-id=26`,
					`--before-cursor-entity-id=26`,
					`--node-id=26`,
					`--page-size=26`,
					`--has-valid-mailbox=true`,
					`--has-valid-onedrive=true`,
					`--is-security-group=true`,
					`--id=26`,
					`--num-levels=72.5`,
					`--exclude-types=kVCenter,kFolder,kDatacenter,kComputeResource,kClusterComputeResource,kResourcePool,kDatastore,kHostSystem,kVirtualMachine,kVirtualApp,kStandaloneHost,kStoragePod,kNetwork,kDistributedVirtualPortgroup,kTagCategory,kTag`,
					`--exclude-aws-types=kEC2Instance,kRDSInstance,kAuroraCluster,kS3Bucket,kTag,kRDSTag,kAuroraTag,kS3Tag`,
					`--exclude-kubernetes-types=kService`,
					`--include-datastores=true`,
					`--include-networks=true`,
					`--include-vm-folders=true`,
					`--include-sfdc-fields=true`,
					`--include-system-v-apps=true`,
					`--environments=kVMware,kHyperV,kSQL,kView,kPuppeteer,kPhysical,kPure,kNimble,kAzure,kNetapp,kAgent,kGenericNas,kAcropolis,kPhysicalFiles,kIsilon,kGPFS,kKVM,kAWS,kExchange,kHyperVVSS,kOracle,kGCP,kFlashBlade,kAWSNative,kO365,kO365Outlook,kHyperFlex,kGCPNative,kAzureNative,kKubernetes,kElastifile,kAD,kRDSSnapshotManager,kCassandra,kMongoDB,kCouchbase,kHdfs,kHBase,kUDA,KSfdc,kAwsS3`,
					`--environment=kPhysical`,
					`--include-entity-permission-info=true`,
					`--sids=sid1`,
					`--include-source-credentials=true`,
					`--encryption-key=encryptionKey`,
					`--include-object-protection-info=true`,
					`--prune-non-critical-info=true`,
					`--prune-aggregation-info=true`,
					`--request-initiator-type=requestInitiatorType`,
					`--use-cached-data=true`,
					`--all-under-hierarchy=true`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-source",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--exclude-office365-types=kDomain,kOutlook,kMailbox,kUsers,kUser,kGroups,kGroup,kSites,kSite`,
					`--get-teams-channels=true`,
					`--after-cursor-entity-id=26`,
					`--before-cursor-entity-id=26`,
					`--node-id=26`,
					`--page-size=26`,
					`--has-valid-mailbox=true`,
					`--has-valid-onedrive=true`,
					`--is-security-group=true`,
					`--id=26`,
					`--num-levels=72.5`,
					`--exclude-types=kVCenter,kFolder,kDatacenter,kComputeResource,kClusterComputeResource,kResourcePool,kDatastore,kHostSystem,kVirtualMachine,kVirtualApp,kStandaloneHost,kStoragePod,kNetwork,kDistributedVirtualPortgroup,kTagCategory,kTag`,
					`--exclude-aws-types=kEC2Instance,kRDSInstance,kAuroraCluster,kS3Bucket,kTag,kRDSTag,kAuroraTag,kS3Tag`,
					`--exclude-kubernetes-types=kService`,
					`--include-datastores=true`,
					`--include-networks=true`,
					`--include-vm-folders=true`,
					`--include-sfdc-fields=true`,
					`--include-system-v-apps=true`,
					`--environments=kVMware,kHyperV,kSQL,kView,kPuppeteer,kPhysical,kPure,kNimble,kAzure,kNetapp,kAgent,kGenericNas,kAcropolis,kPhysicalFiles,kIsilon,kGPFS,kKVM,kAWS,kExchange,kHyperVVSS,kOracle,kGCP,kFlashBlade,kAWSNative,kO365,kO365Outlook,kHyperFlex,kGCPNative,kAzureNative,kKubernetes,kElastifile,kAD,kRDSSnapshotManager,kCassandra,kMongoDB,kCouchbase,kHdfs,kHBase,kUDA,KSfdc,kAwsS3`,
					`--environment=kPhysical`,
					`--include-entity-permission-info=true`,
					`--sids=sid1`,
					`--include-source-credentials=true`,
					`--encryption-key=encryptionKey`,
					`--include-object-protection-info=true`,
					`--prune-non-critical-info=true`,
					`--prune-aggregation-info=true`,
					`--request-initiator-type=requestInitiatorType`,
					`--use-cached-data=true`,
					`--all-under-hierarchy=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-source",
					"list",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-source registrations-list` command", func() {
		var (
			operationPath = "/data-protect/sources/registrations"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"registrations": [{"id": 26, "sourceId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "testString", "connectionId": 26, "connections": [{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "testString"}], "connectorGroupId": 26, "dataSourceConnectionId": "testString", "advancedConfigs": [{"key": "testString", "value": "testString"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 26, "lastRefreshedTimeMsecs": 26, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 38, "minute": 38}, "startTime": {"hour": 38, "minute": 38}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "timezone": "testString"}, "userMessage": "testString", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "testString", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}]}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registrations-list",
					`--xibm-tenant-id=tenantId`,
					`--ids=38,39`,
					`--include-source-credentials=true`,
					`--encryption-key=encryptionKey`,
					`--use-cached-data=true`,
					`--include-external-metadata=true`,
					`--ignore-tenant-migration-in-progress-check=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registrations-list",
					`--xibm-tenant-id=tenantId`,
					`--ids=38,39`,
					`--include-source-credentials=true`,
					`--encryption-key=encryptionKey`,
					`--use-cached-data=true`,
					`--include-external-metadata=true`,
					`--ignore-tenant-migration-in-progress-check=true`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"registrations": [{"id": 26, "sourceId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "testString", "connectionId": 26, "connections": [{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "testString"}], "connectorGroupId": 26, "dataSourceConnectionId": "testString", "advancedConfigs": [{"key": "testString", "value": "testString"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 26, "lastRefreshedTimeMsecs": 26, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 38, "minute": 38}, "startTime": {"hour": 38, "minute": 38}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "timezone": "testString"}, "userMessage": "testString", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "testString", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}]}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registrations-list",
					`--xibm-tenant-id=tenantId`,
					`--ids=38,39`,
					`--include-source-credentials=true`,
					`--encryption-key=encryptionKey`,
					`--use-cached-data=true`,
					`--include-external-metadata=true`,
					`--ignore-tenant-migration-in-progress-check=true`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-source",
					"registrations-list",
					`--xibm-tenant-id=tenantId`,
					`--ids=38,39`,
					`--include-source-credentials=true`,
					`--encryption-key=encryptionKey`,
					`--use-cached-data=true`,
					`--include-external-metadata=true`,
					`--ignore-tenant-migration-in-progress-check=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-source",
					"registrations-list",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-source register` command", func() {
		var (
			operationPath = "/data-protect/sources/registrations"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": 26, "sourceId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "testString", "connectionId": 26, "connections": [{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "testString"}], "connectorGroupId": 26, "dataSourceConnectionId": "testString", "advancedConfigs": [{"key": "testString", "value": "testString"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 26, "lastRefreshedTimeMsecs": 26, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 38, "minute": 38}, "startTime": {"hour": 38, "minute": 38}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "timezone": "testString"}, "userMessage": "testString", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "testString", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"register",
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
					`--name=register-protection-source`,
					`--is-internal-encrypted=true`,
					`--encryption-key=encryptionKey`,
					`--connection-id=26`,
					`--connections=[{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "DatasourceConnectionId"}]`,
					`--connector-group-id=26`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--data-source-connection-id=DatasourceConnectionId`,
					`--physical-params={"endpoint": "xxx.xx.xx.xx", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL","kOracle"]}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"register",
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
					`--name=register-protection-source`,
					`--is-internal-encrypted=true`,
					`--encryption-key=encryptionKey`,
					`--connection-id=26`,
					`--connections=[{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "DatasourceConnectionId"}]`,
					`--connector-group-id=26`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--data-source-connection-id=DatasourceConnectionId`,
					`--physical-params={"endpoint": "xxx.xx.xx.xx", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL","kOracle"]}`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"id": 26, "sourceId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "testString", "connectionId": 26, "connections": [{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "testString"}], "connectorGroupId": 26, "dataSourceConnectionId": "testString", "advancedConfigs": [{"key": "testString", "value": "testString"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 26, "lastRefreshedTimeMsecs": 26, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 38, "minute": 38}, "startTime": {"hour": 38, "minute": 38}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "timezone": "testString"}, "userMessage": "testString", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "testString", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
			It("but there is a single extranous field", func() {
				args := []string{
					"protection-source",
					"register",
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
					`--name=register-protection-source`,
					`--is-internal-encrypted=true`,
					`--encryption-key=encryptionKey`,
					`--connection-id=26`,
					`--connections=[{"connectionId":26,"entityId":26,"connectorGroupId":26,"dataSourceConnectionId":"DatasourceConnectionId","absolutelyExtraneousField1":null}]`,
					`--connector-group-id=26`,
					`--advanced-configs=[{"key":"configKey","value":"configValue","absolutelyExtraneousField1":null}]`,
					`--data-source-connection-id=DatasourceConnectionId`,
					`--physical-params={"endpoint":"xxx.xx.xx.xx","forceRegister":true,"hostType":"kLinux","physicalType":"kGroup","applications":["kSQL","kOracle"],"absolutelyExtraneousField1":null}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There is an unsupported field in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField1'\n`))
			})

			It("but there are multiple extranous fields", func() {
				args := []string{
					"protection-source",
					"register",
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
					`--name=register-protection-source`,
					`--is-internal-encrypted=true`,
					`--encryption-key=encryptionKey`,
					`--connection-id=26`,
					`--connections=[{"connectionId":26,"entityId":26,"connectorGroupId":26,"dataSourceConnectionId":"DatasourceConnectionId","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--connector-group-id=26`,
					`--advanced-configs=[{"key":"configKey","value":"configValue","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--data-source-connection-id=DatasourceConnectionId`,
					`--physical-params={"endpoint":"xxx.xx.xx.xx","forceRegister":true,"hostType":"kLinux","physicalType":"kGroup","applications":["kSQL","kOracle"],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There are multiple unsupported fields in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField[12], #\.(\[0\]\.)?absolutelyExtraneousField[12]'\n`))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"register",
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
					`--name=register-protection-source`,
					`--is-internal-encrypted=true`,
					`--encryption-key=encryptionKey`,
					`--connection-id=26`,
					`--connections=[{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "DatasourceConnectionId"}]`,
					`--connector-group-id=26`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--data-source-connection-id=DatasourceConnectionId`,
					`--physical-params={"endpoint": "xxx.xx.xx.xx", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL","kOracle"]}`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-source",
					"register",
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
					`--name=register-protection-source`,
					`--is-internal-encrypted=true`,
					`--encryption-key=encryptionKey`,
					`--connection-id=26`,
					`--connections=[{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "DatasourceConnectionId"}]`,
					`--connector-group-id=26`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--data-source-connection-id=DatasourceConnectionId`,
					`--physical-params={"endpoint": "xxx.xx.xx.xx", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL","kOracle"]}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-source",
					"register",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-source registration-get` command", func() {
		var (
			operationPath = "/data-protect/sources/registrations/26"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": 26, "sourceId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "testString", "connectionId": 26, "connections": [{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "testString"}], "connectorGroupId": 26, "dataSourceConnectionId": "testString", "advancedConfigs": [{"key": "testString", "value": "testString"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 26, "lastRefreshedTimeMsecs": 26, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 38, "minute": 38}, "startTime": {"hour": 38, "minute": 38}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "timezone": "testString"}, "userMessage": "testString", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "testString", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registration-get",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registration-get",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"id": 26, "sourceId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "testString", "connectionId": 26, "connections": [{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "testString"}], "connectorGroupId": 26, "dataSourceConnectionId": "testString", "advancedConfigs": [{"key": "testString", "value": "testString"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 26, "lastRefreshedTimeMsecs": 26, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 38, "minute": 38}, "startTime": {"hour": 38, "minute": 38}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "timezone": "testString"}, "userMessage": "testString", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "testString", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registration-get",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-source",
					"registration-get",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-source",
					"registration-get",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-source registration-update` command", func() {
		var (
			operationPath = "/data-protect/sources/registrations/26"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PUT"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": 26, "sourceId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "testString", "connectionId": 26, "connections": [{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "testString"}], "connectorGroupId": 26, "dataSourceConnectionId": "testString", "advancedConfigs": [{"key": "testString", "value": "testString"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 26, "lastRefreshedTimeMsecs": 26, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 38, "minute": 38}, "startTime": {"hour": 38, "minute": 38}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "timezone": "testString"}, "userMessage": "testString", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "testString", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registration-update",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
					`--name=update-protection-source`,
					`--is-internal-encrypted=true`,
					`--encryption-key=encryptionKey`,
					`--connection-id=26`,
					`--connections=[{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "DatasourceConnectionId"}]`,
					`--connector-group-id=26`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--data-source-connection-id=DatasourceConnectionId`,
					`--last-modified-timestamp-usecs=26`,
					`--physical-params={"endpoint": "xxx.xx.xx.xx", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL","kOracle"]}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registration-update",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
					`--name=update-protection-source`,
					`--is-internal-encrypted=true`,
					`--encryption-key=encryptionKey`,
					`--connection-id=26`,
					`--connections=[{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "DatasourceConnectionId"}]`,
					`--connector-group-id=26`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--data-source-connection-id=DatasourceConnectionId`,
					`--last-modified-timestamp-usecs=26`,
					`--physical-params={"endpoint": "xxx.xx.xx.xx", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL","kOracle"]}`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"id": 26, "sourceId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "testString", "connectionId": 26, "connections": [{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "testString"}], "connectorGroupId": 26, "dataSourceConnectionId": "testString", "advancedConfigs": [{"key": "testString", "value": "testString"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 26, "lastRefreshedTimeMsecs": 26, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 38, "minute": 38}, "startTime": {"hour": 38, "minute": 38}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "timezone": "testString"}, "userMessage": "testString", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "testString", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
			It("but there is a single extranous field", func() {
				args := []string{
					"protection-source",
					"registration-update",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
					`--name=update-protection-source`,
					`--is-internal-encrypted=true`,
					`--encryption-key=encryptionKey`,
					`--connection-id=26`,
					`--connections=[{"connectionId":26,"entityId":26,"connectorGroupId":26,"dataSourceConnectionId":"DatasourceConnectionId","absolutelyExtraneousField1":null}]`,
					`--connector-group-id=26`,
					`--advanced-configs=[{"key":"configKey","value":"configValue","absolutelyExtraneousField1":null}]`,
					`--data-source-connection-id=DatasourceConnectionId`,
					`--last-modified-timestamp-usecs=26`,
					`--physical-params={"endpoint":"xxx.xx.xx.xx","forceRegister":true,"hostType":"kLinux","physicalType":"kGroup","applications":["kSQL","kOracle"],"absolutelyExtraneousField1":null}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There is an unsupported field in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField1'\n`))
			})

			It("but there are multiple extranous fields", func() {
				args := []string{
					"protection-source",
					"registration-update",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
					`--name=update-protection-source`,
					`--is-internal-encrypted=true`,
					`--encryption-key=encryptionKey`,
					`--connection-id=26`,
					`--connections=[{"connectionId":26,"entityId":26,"connectorGroupId":26,"dataSourceConnectionId":"DatasourceConnectionId","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--connector-group-id=26`,
					`--advanced-configs=[{"key":"configKey","value":"configValue","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--data-source-connection-id=DatasourceConnectionId`,
					`--last-modified-timestamp-usecs=26`,
					`--physical-params={"endpoint":"xxx.xx.xx.xx","forceRegister":true,"hostType":"kLinux","physicalType":"kGroup","applications":["kSQL","kOracle"],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There are multiple unsupported fields in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField[12], #\.(\[0\]\.)?absolutelyExtraneousField[12]'\n`))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PUT"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registration-update",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
					`--name=update-protection-source`,
					`--is-internal-encrypted=true`,
					`--encryption-key=encryptionKey`,
					`--connection-id=26`,
					`--connections=[{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "DatasourceConnectionId"}]`,
					`--connector-group-id=26`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--data-source-connection-id=DatasourceConnectionId`,
					`--last-modified-timestamp-usecs=26`,
					`--physical-params={"endpoint": "xxx.xx.xx.xx", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL","kOracle"]}`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-source",
					"registration-update",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
					`--name=update-protection-source`,
					`--is-internal-encrypted=true`,
					`--encryption-key=encryptionKey`,
					`--connection-id=26`,
					`--connections=[{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "DatasourceConnectionId"}]`,
					`--connector-group-id=26`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--data-source-connection-id=DatasourceConnectionId`,
					`--last-modified-timestamp-usecs=26`,
					`--physical-params={"endpoint": "xxx.xx.xx.xx", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL","kOracle"]}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-source",
					"registration-update",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-source registration-patch` command", func() {
		var (
			operationPath = "/data-protect/sources/registrations/26"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PATCH"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": 26, "sourceId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "testString", "connectionId": 26, "connections": [{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "testString"}], "connectorGroupId": 26, "dataSourceConnectionId": "testString", "advancedConfigs": [{"key": "testString", "value": "testString"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 26, "lastRefreshedTimeMsecs": 26, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 38, "minute": 38}, "startTime": {"hour": 38, "minute": 38}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "timezone": "testString"}, "userMessage": "testString", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "testString", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registration-patch",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registration-patch",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"id": 26, "sourceId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "environment": "kPhysical", "name": "testString", "connectionId": 26, "connections": [{"connectionId": 26, "entityId": 26, "connectorGroupId": 26, "dataSourceConnectionId": "testString"}], "connectorGroupId": 26, "dataSourceConnectionId": "testString", "advancedConfigs": [{"key": "testString", "value": "testString"}], "authenticationStatus": "Pending", "registrationTimeMsecs": 26, "lastRefreshedTimeMsecs": 26, "externalMetadata": {"maintenanceModeConfig": {"activationTimeIntervals": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "maintenanceSchedule": {"periodicTimeWindows": [{"dayOfTheWeek": "Sunday", "endTime": {"hour": 38, "minute": 38}, "startTime": {"hour": 38, "minute": 38}}], "scheduleType": "PeriodicTimeWindows", "timeRanges": [{"endTimeUsecs": 26, "startTimeUsecs": 26}], "timezone": "testString"}, "userMessage": "testString", "workflowInterventionSpecList": [{"intervention": "NoIntervention", "workflowType": "BackupRun"}]}}, "physicalParams": {"endpoint": "testString", "forceRegister": true, "hostType": "kLinux", "physicalType": "kGroup", "applications": ["kSQL"]}}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PATCH"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registration-patch",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-source",
					"registration-patch",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--environment=kPhysical`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-source",
					"registration-patch",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-source registration-delete` command", func() {
		var (
			operationPath = "/data-protect/sources/registrations/26"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("DELETE"))
					requestCallback(req)
					res.WriteHeader(204)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registration-delete",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registration-delete",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--output=json`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				Expect(out).ToNot(BeNil())
				Expect(string(out)).To(Equal("\"\"\n"))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("DELETE"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"registration-delete",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--force`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-source",
					"registration-delete",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-source",
					"registration-delete",
					`--force`,
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-source refresh` command", func() {
		var (
			operationPath = "/data-protect/sources/26/refresh"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					res.WriteHeader(204)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"refresh",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"refresh",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				Expect(out).ToNot(BeNil())
				Expect(string(out)).To(Equal("\"\"\n"))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-source",
					"refresh",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-source",
					"refresh",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-source",
					"refresh",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `agent-upgrade-task list` command", func() {
		var (
			operationPath = "/data-protect/agents/upgrade-tasks"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"tasks": [{"agentIDs": [26], "agents": [{"id": 26, "info": {"endTimeUsecs": 26, "error": {"errorCode": "testString", "message": "testString", "taskLogId": "testString"}, "name": "testString", "previousSoftwareVersion": "testString", "startTimeUsecs": 26, "status": "Scheduled"}}], "clusterVersion": "testString", "description": "testString", "endTimeUsecs": 26, "error": {"errorCode": "testString", "message": "testString", "taskLogId": "testString"}, "id": 26, "isRetryable": true, "name": "testString", "retriedTaskID": 26, "scheduleEndTimeUsecs": 26, "scheduleTimeUsecs": 26, "startTimeUsecs": 26, "status": "Scheduled", "type": "Auto"}]}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"agent-upgrade-task",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--ids=26,27`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"agent-upgrade-task",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--ids=26,27`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"tasks": [{"agentIDs": [26], "agents": [{"id": 26, "info": {"endTimeUsecs": 26, "error": {"errorCode": "testString", "message": "testString", "taskLogId": "testString"}, "name": "testString", "previousSoftwareVersion": "testString", "startTimeUsecs": 26, "status": "Scheduled"}}], "clusterVersion": "testString", "description": "testString", "endTimeUsecs": 26, "error": {"errorCode": "testString", "message": "testString", "taskLogId": "testString"}, "id": 26, "isRetryable": true, "name": "testString", "retriedTaskID": 26, "scheduleEndTimeUsecs": 26, "scheduleTimeUsecs": 26, "startTimeUsecs": 26, "status": "Scheduled", "type": "Auto"}]}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"agent-upgrade-task",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--ids=26,27`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"agent-upgrade-task",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--ids=26,27`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"agent-upgrade-task",
					"list",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `agent-upgrade-task create` command", func() {
		var (
			operationPath = "/data-protect/agents/upgrade-tasks"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"agentIDs": [26], "agents": [{"id": 26, "info": {"endTimeUsecs": 26, "error": {"errorCode": "testString", "message": "testString", "taskLogId": "testString"}, "name": "testString", "previousSoftwareVersion": "testString", "startTimeUsecs": 26, "status": "Scheduled"}}], "clusterVersion": "testString", "description": "testString", "endTimeUsecs": 26, "error": {"errorCode": "testString", "message": "testString", "taskLogId": "testString"}, "id": 26, "isRetryable": true, "name": "testString", "retriedTaskID": 26, "scheduleEndTimeUsecs": 26, "scheduleTimeUsecs": 26, "startTimeUsecs": 26, "status": "Scheduled", "type": "Auto"}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"agent-upgrade-task",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--agent-ids=26,27`,
					`--description=Upgrade task`,
					`--name=create-upgrade-task`,
					`--retry-task-id=26`,
					`--schedule-end-time-usecs=26`,
					`--schedule-time-usecs=26`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"agent-upgrade-task",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--agent-ids=26,27`,
					`--description=Upgrade task`,
					`--name=create-upgrade-task`,
					`--retry-task-id=26`,
					`--schedule-end-time-usecs=26`,
					`--schedule-time-usecs=26`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"agentIDs": [26], "agents": [{"id": 26, "info": {"endTimeUsecs": 26, "error": {"errorCode": "testString", "message": "testString", "taskLogId": "testString"}, "name": "testString", "previousSoftwareVersion": "testString", "startTimeUsecs": 26, "status": "Scheduled"}}], "clusterVersion": "testString", "description": "testString", "endTimeUsecs": 26, "error": {"errorCode": "testString", "message": "testString", "taskLogId": "testString"}, "id": 26, "isRetryable": true, "name": "testString", "retriedTaskID": 26, "scheduleEndTimeUsecs": 26, "scheduleTimeUsecs": 26, "startTimeUsecs": 26, "status": "Scheduled", "type": "Auto"}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"agent-upgrade-task",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--agent-ids=26,27`,
					`--description=Upgrade task`,
					`--name=create-upgrade-task`,
					`--retry-task-id=26`,
					`--schedule-end-time-usecs=26`,
					`--schedule-time-usecs=26`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"agent-upgrade-task",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--agent-ids=26,27`,
					`--description=Upgrade task`,
					`--name=create-upgrade-task`,
					`--retry-task-id=26`,
					`--schedule-end-time-usecs=26`,
					`--schedule-time-usecs=26`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"agent-upgrade-task",
					"create",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-policy list` command", func() {
		var (
			operationPath = "/data-protect/policies"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"policies": [{"name": "testString", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "targetName": "testString", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}, "description": "testString", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "testString"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 38, "isCBSEnabled": true, "lastModificationTimeUsecs": 26, "id": "testString", "templateId": "testString", "isUsable": true, "isReplicated": true, "numProtectionGroups": 26, "numProtectedObjects": 26}]}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--ids=policyId1`,
					`--policy-names=policyName1`,
					`--types=Regular,Internal`,
					`--exclude-linked-policies=true`,
					`--include-replicated-policies=true`,
					`--include-stats=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--ids=policyId1`,
					`--policy-names=policyName1`,
					`--types=Regular,Internal`,
					`--exclude-linked-policies=true`,
					`--include-replicated-policies=true`,
					`--include-stats=true`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"policies": [{"name": "testString", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "targetName": "testString", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}, "description": "testString", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "testString"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 38, "isCBSEnabled": true, "lastModificationTimeUsecs": 26, "id": "testString", "templateId": "testString", "isUsable": true, "isReplicated": true, "numProtectionGroups": 26, "numProtectedObjects": 26}]}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--ids=policyId1`,
					`--policy-names=policyName1`,
					`--types=Regular,Internal`,
					`--exclude-linked-policies=true`,
					`--include-replicated-policies=true`,
					`--include-stats=true`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-policy",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--ids=policyId1`,
					`--policy-names=policyName1`,
					`--types=Regular,Internal`,
					`--exclude-linked-policies=true`,
					`--include-replicated-policies=true`,
					`--include-stats=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-policy",
					"list",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-policy create` command", func() {
		var (
			operationPath = "/data-protect/policies"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "testString", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "targetName": "testString", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}, "description": "testString", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "testString"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 38, "isCBSEnabled": true, "lastModificationTimeUsecs": 26, "id": "testString", "templateId": "testString", "isUsable": true, "isReplicated": true, "numProtectionGroups": 26, "numProtectedObjects": 26}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-protection-policy`,
					`--backup-policy={"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}`,
					`--description=Protection Policy`,
					`--blackout-window=[{"day": "Sunday", "startTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "configId": "Config-Id"}]`,
					`--extended-retention=[{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]`,
					`--remote-target-policy={"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}`,
					`--cascaded-targets-config=[{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}}]`,
					`--retry-options={"retries": 0, "retryIntervalMins": 1}`,
					`--data-lock=Compliance`,
					`--version=38`,
					`--is-cbs-enabled=true`,
					`--last-modification-time-usecs=26`,
					`--template-id=protection-policy-template`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-protection-policy`,
					`--backup-policy={"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}`,
					`--description=Protection Policy`,
					`--blackout-window=[{"day": "Sunday", "startTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "configId": "Config-Id"}]`,
					`--extended-retention=[{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]`,
					`--remote-target-policy={"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}`,
					`--cascaded-targets-config=[{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}}]`,
					`--retry-options={"retries": 0, "retryIntervalMins": 1}`,
					`--data-lock=Compliance`,
					`--version=38`,
					`--is-cbs-enabled=true`,
					`--last-modification-time-usecs=26`,
					`--template-id=protection-policy-template`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"name": "testString", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "targetName": "testString", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}, "description": "testString", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "testString"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 38, "isCBSEnabled": true, "lastModificationTimeUsecs": 26, "id": "testString", "templateId": "testString", "isUsable": true, "isReplicated": true, "numProtectionGroups": 26, "numProtectedObjects": 26}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
			It("but there is a single extranous field", func() {
				args := []string{
					"protection-policy",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-protection-policy`,
					`--backup-policy={"regular":{"incremental":{"schedule":{"unit":"Minutes","minuteSchedule":{"frequency":1},"hourSchedule":{"frequency":1},"daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}}},"full":{"schedule":{"unit":"Days","daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}}},"fullBackups":[{"schedule":{"unit":"Days","daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}}],"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"primaryBackupTarget":{"targetType":"Local","archivalTargetSettings":{"targetId":26,"tierSettings":{"awsTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAmazonS3Standard"}]},"azureTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAzureTierHot"}]},"cloudPlatform":"AWS","googleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kGoogleStandard"}]},"oracleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kOracleTierStandard"}]}}},"useDefaultBackupTarget":true}},"log":{"schedule":{"unit":"Minutes","minuteSchedule":{"frequency":1},"hourSchedule":{"frequency":1}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"bmr":{"schedule":{"unit":"Days","daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"cdp":{"retention":{"unit":"Minutes","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"storageArraySnapshot":{"schedule":{"unit":"Minutes","minuteSchedule":{"frequency":1},"hourSchedule":{"frequency":1},"daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"absolutelyExtraneousField1":null}`,
					`--description=Protection Policy`,
					`--blackout-window=[{"day":"Sunday","startTime":{"hour":1,"minute":15,"timeZone":"America/Los_Angeles"},"endTime":{"hour":1,"minute":15,"timeZone":"America/Los_Angeles"},"configId":"Config-Id","absolutelyExtraneousField1":null}]`,
					`--extended-retention=[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"runType":"Regular","configId":"Config-Id","absolutelyExtraneousField1":null}]`,
					`--remote-target-policy={"replicationTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"awsTargetConfig":{"region":26,"sourceId":26},"azureTargetConfig":{"resourceGroup":26,"sourceId":26},"targetType":"RemoteCluster","remoteTargetConfig":{"clusterId":26}}],"archivalTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"tierSettings":{"awsTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAmazonS3Standard"}]},"azureTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAzureTierHot"}]},"cloudPlatform":"AWS","googleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kGoogleStandard"}]},"oracleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kOracleTierStandard"}]}},"extendedRetention":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"runType":"Regular","configId":"Config-Id"}]}],"cloudSpinTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"target":{"awsParams":{"customTagList":[{"key":"custom-tag-key","value":"custom-tag-value"}],"region":3,"subnetId":26,"vpcId":26},"azureParams":{"availabilitySetId":26,"networkResourceGroupId":26,"resourceGroupId":26,"storageAccountId":26,"storageContainerId":26,"storageResourceGroupId":26,"tempVmResourceGroupId":26,"tempVmStorageAccountId":26,"tempVmStorageContainerId":26,"tempVmSubnetId":26,"tempVmVirtualNetworkId":26},"id":2}}],"onpremDeployTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"params":{"id":4}}],"rpaasTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"targetType":"Tape"}],"absolutelyExtraneousField1":null}`,
					`--cascaded-targets-config=[{"sourceClusterId":26,"remoteTargets":{"replicationTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"awsTargetConfig":{"region":26,"sourceId":26},"azureTargetConfig":{"resourceGroup":26,"sourceId":26},"targetType":"RemoteCluster","remoteTargetConfig":{"clusterId":26}}],"archivalTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"tierSettings":{"awsTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAmazonS3Standard"}]},"azureTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAzureTierHot"}]},"cloudPlatform":"AWS","googleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kGoogleStandard"}]},"oracleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kOracleTierStandard"}]}},"extendedRetention":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"runType":"Regular","configId":"Config-Id"}]}],"cloudSpinTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"target":{"awsParams":{"customTagList":[{"key":"custom-tag-key","value":"custom-tag-value"}],"region":3,"subnetId":26,"vpcId":26},"azureParams":{"availabilitySetId":26,"networkResourceGroupId":26,"resourceGroupId":26,"storageAccountId":26,"storageContainerId":26,"storageResourceGroupId":26,"tempVmResourceGroupId":26,"tempVmStorageAccountId":26,"tempVmStorageContainerId":26,"tempVmSubnetId":26,"tempVmVirtualNetworkId":26},"id":2}}],"onpremDeployTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"params":{"id":4}}],"rpaasTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"targetType":"Tape"}]},"absolutelyExtraneousField1":null}]`,
					`--retry-options={"retries":0,"retryIntervalMins":1,"absolutelyExtraneousField1":null}`,
					`--data-lock=Compliance`,
					`--version=38`,
					`--is-cbs-enabled=true`,
					`--last-modification-time-usecs=26`,
					`--template-id=protection-policy-template`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There is an unsupported field in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField1'\n`))
			})

			It("but there are multiple extranous fields", func() {
				args := []string{
					"protection-policy",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-protection-policy`,
					`--backup-policy={"regular":{"incremental":{"schedule":{"unit":"Minutes","minuteSchedule":{"frequency":1},"hourSchedule":{"frequency":1},"daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}}},"full":{"schedule":{"unit":"Days","daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}}},"fullBackups":[{"schedule":{"unit":"Days","daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}}],"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"primaryBackupTarget":{"targetType":"Local","archivalTargetSettings":{"targetId":26,"tierSettings":{"awsTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAmazonS3Standard"}]},"azureTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAzureTierHot"}]},"cloudPlatform":"AWS","googleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kGoogleStandard"}]},"oracleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kOracleTierStandard"}]}}},"useDefaultBackupTarget":true}},"log":{"schedule":{"unit":"Minutes","minuteSchedule":{"frequency":1},"hourSchedule":{"frequency":1}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"bmr":{"schedule":{"unit":"Days","daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"cdp":{"retention":{"unit":"Minutes","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"storageArraySnapshot":{"schedule":{"unit":"Minutes","minuteSchedule":{"frequency":1},"hourSchedule":{"frequency":1},"daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--description=Protection Policy`,
					`--blackout-window=[{"day":"Sunday","startTime":{"hour":1,"minute":15,"timeZone":"America/Los_Angeles"},"endTime":{"hour":1,"minute":15,"timeZone":"America/Los_Angeles"},"configId":"Config-Id","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--extended-retention=[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"runType":"Regular","configId":"Config-Id","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--remote-target-policy={"replicationTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"awsTargetConfig":{"region":26,"sourceId":26},"azureTargetConfig":{"resourceGroup":26,"sourceId":26},"targetType":"RemoteCluster","remoteTargetConfig":{"clusterId":26}}],"archivalTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"tierSettings":{"awsTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAmazonS3Standard"}]},"azureTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAzureTierHot"}]},"cloudPlatform":"AWS","googleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kGoogleStandard"}]},"oracleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kOracleTierStandard"}]}},"extendedRetention":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"runType":"Regular","configId":"Config-Id"}]}],"cloudSpinTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"target":{"awsParams":{"customTagList":[{"key":"custom-tag-key","value":"custom-tag-value"}],"region":3,"subnetId":26,"vpcId":26},"azureParams":{"availabilitySetId":26,"networkResourceGroupId":26,"resourceGroupId":26,"storageAccountId":26,"storageContainerId":26,"storageResourceGroupId":26,"tempVmResourceGroupId":26,"tempVmStorageAccountId":26,"tempVmStorageContainerId":26,"tempVmSubnetId":26,"tempVmVirtualNetworkId":26},"id":2}}],"onpremDeployTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"params":{"id":4}}],"rpaasTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"targetType":"Tape"}],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--cascaded-targets-config=[{"sourceClusterId":26,"remoteTargets":{"replicationTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"awsTargetConfig":{"region":26,"sourceId":26},"azureTargetConfig":{"resourceGroup":26,"sourceId":26},"targetType":"RemoteCluster","remoteTargetConfig":{"clusterId":26}}],"archivalTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"tierSettings":{"awsTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAmazonS3Standard"}]},"azureTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAzureTierHot"}]},"cloudPlatform":"AWS","googleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kGoogleStandard"}]},"oracleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kOracleTierStandard"}]}},"extendedRetention":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"runType":"Regular","configId":"Config-Id"}]}],"cloudSpinTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"target":{"awsParams":{"customTagList":[{"key":"custom-tag-key","value":"custom-tag-value"}],"region":3,"subnetId":26,"vpcId":26},"azureParams":{"availabilitySetId":26,"networkResourceGroupId":26,"resourceGroupId":26,"storageAccountId":26,"storageContainerId":26,"storageResourceGroupId":26,"tempVmResourceGroupId":26,"tempVmStorageAccountId":26,"tempVmStorageContainerId":26,"tempVmSubnetId":26,"tempVmVirtualNetworkId":26},"id":2}}],"onpremDeployTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"params":{"id":4}}],"rpaasTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"targetType":"Tape"}]},"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--retry-options={"retries":0,"retryIntervalMins":1,"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--data-lock=Compliance`,
					`--version=38`,
					`--is-cbs-enabled=true`,
					`--last-modification-time-usecs=26`,
					`--template-id=protection-policy-template`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There are multiple unsupported fields in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField[12], #\.(\[0\]\.)?absolutelyExtraneousField[12]'\n`))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-protection-policy`,
					`--backup-policy={"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}`,
					`--description=Protection Policy`,
					`--blackout-window=[{"day": "Sunday", "startTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "configId": "Config-Id"}]`,
					`--extended-retention=[{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]`,
					`--remote-target-policy={"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}`,
					`--cascaded-targets-config=[{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}}]`,
					`--retry-options={"retries": 0, "retryIntervalMins": 1}`,
					`--data-lock=Compliance`,
					`--version=38`,
					`--is-cbs-enabled=true`,
					`--last-modification-time-usecs=26`,
					`--template-id=protection-policy-template`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-policy",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-protection-policy`,
					`--backup-policy={"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}`,
					`--description=Protection Policy`,
					`--blackout-window=[{"day": "Sunday", "startTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "configId": "Config-Id"}]`,
					`--extended-retention=[{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]`,
					`--remote-target-policy={"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}`,
					`--cascaded-targets-config=[{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}}]`,
					`--retry-options={"retries": 0, "retryIntervalMins": 1}`,
					`--data-lock=Compliance`,
					`--version=38`,
					`--is-cbs-enabled=true`,
					`--last-modification-time-usecs=26`,
					`--template-id=protection-policy-template`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-policy",
					"create",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-policy get` command", func() {
		var (
			operationPath = "/data-protect/policies/testString"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "testString", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "targetName": "testString", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}, "description": "testString", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "testString"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 38, "isCBSEnabled": true, "lastModificationTimeUsecs": 26, "id": "testString", "templateId": "testString", "isUsable": true, "isReplicated": true, "numProtectionGroups": 26, "numProtectedObjects": 26}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"get",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"get",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"name": "testString", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "targetName": "testString", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}, "description": "testString", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "testString"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 38, "isCBSEnabled": true, "lastModificationTimeUsecs": 26, "id": "testString", "templateId": "testString", "isUsable": true, "isReplicated": true, "numProtectionGroups": 26, "numProtectedObjects": 26}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"get",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-policy",
					"get",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-policy",
					"get",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-policy update` command", func() {
		var (
			operationPath = "/data-protect/policies/testString"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PUT"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "testString", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "targetName": "testString", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}, "description": "testString", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "testString"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 38, "isCBSEnabled": true, "lastModificationTimeUsecs": 26, "id": "testString", "templateId": "testString", "isUsable": true, "isReplicated": true, "numProtectionGroups": 26, "numProtectedObjects": 26}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--name=update-protection-policy`,
					`--backup-policy={"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}`,
					`--description=Protection Policy`,
					`--blackout-window=[{"day": "Sunday", "startTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "configId": "Config-Id"}]`,
					`--extended-retention=[{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]`,
					`--remote-target-policy={"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}`,
					`--cascaded-targets-config=[{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}}]`,
					`--retry-options={"retries": 0, "retryIntervalMins": 1}`,
					`--data-lock=Compliance`,
					`--version=38`,
					`--is-cbs-enabled=true`,
					`--last-modification-time-usecs=26`,
					`--template-id=protection-policy-template`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--name=update-protection-policy`,
					`--backup-policy={"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}`,
					`--description=Protection Policy`,
					`--blackout-window=[{"day": "Sunday", "startTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "configId": "Config-Id"}]`,
					`--extended-retention=[{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]`,
					`--remote-target-policy={"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}`,
					`--cascaded-targets-config=[{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}}]`,
					`--retry-options={"retries": 0, "retryIntervalMins": 1}`,
					`--data-lock=Compliance`,
					`--version=38`,
					`--is-cbs-enabled=true`,
					`--last-modification-time-usecs=26`,
					`--template-id=protection-policy-template`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"name": "testString", "backupPolicy": {"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "targetName": "testString", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday"]}, "monthSchedule": {"dayOfWeek": ["Sunday"], "weekOfMonth": "First", "dayOfMonth": 38}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}, "description": "testString", "blackoutWindow": [{"day": "Sunday", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "configId": "testString"}], "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}], "remoteTargetPolicy": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}, "cascadedTargetsConfig": [{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}}], "retryOptions": {"retries": 0, "retryIntervalMins": 1}, "dataLock": "Compliance", "version": 38, "isCBSEnabled": true, "lastModificationTimeUsecs": 26, "id": "testString", "templateId": "testString", "isUsable": true, "isReplicated": true, "numProtectionGroups": 26, "numProtectedObjects": 26}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
			It("but there is a single extranous field", func() {
				args := []string{
					"protection-policy",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--name=update-protection-policy`,
					`--backup-policy={"regular":{"incremental":{"schedule":{"unit":"Minutes","minuteSchedule":{"frequency":1},"hourSchedule":{"frequency":1},"daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}}},"full":{"schedule":{"unit":"Days","daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}}},"fullBackups":[{"schedule":{"unit":"Days","daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}}],"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"primaryBackupTarget":{"targetType":"Local","archivalTargetSettings":{"targetId":26,"tierSettings":{"awsTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAmazonS3Standard"}]},"azureTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAzureTierHot"}]},"cloudPlatform":"AWS","googleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kGoogleStandard"}]},"oracleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kOracleTierStandard"}]}}},"useDefaultBackupTarget":true}},"log":{"schedule":{"unit":"Minutes","minuteSchedule":{"frequency":1},"hourSchedule":{"frequency":1}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"bmr":{"schedule":{"unit":"Days","daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"cdp":{"retention":{"unit":"Minutes","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"storageArraySnapshot":{"schedule":{"unit":"Minutes","minuteSchedule":{"frequency":1},"hourSchedule":{"frequency":1},"daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"absolutelyExtraneousField1":null}`,
					`--description=Protection Policy`,
					`--blackout-window=[{"day":"Sunday","startTime":{"hour":1,"minute":15,"timeZone":"America/Los_Angeles"},"endTime":{"hour":1,"minute":15,"timeZone":"America/Los_Angeles"},"configId":"Config-Id","absolutelyExtraneousField1":null}]`,
					`--extended-retention=[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"runType":"Regular","configId":"Config-Id","absolutelyExtraneousField1":null}]`,
					`--remote-target-policy={"replicationTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"awsTargetConfig":{"region":26,"sourceId":26},"azureTargetConfig":{"resourceGroup":26,"sourceId":26},"targetType":"RemoteCluster","remoteTargetConfig":{"clusterId":26}}],"archivalTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"tierSettings":{"awsTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAmazonS3Standard"}]},"azureTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAzureTierHot"}]},"cloudPlatform":"AWS","googleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kGoogleStandard"}]},"oracleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kOracleTierStandard"}]}},"extendedRetention":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"runType":"Regular","configId":"Config-Id"}]}],"cloudSpinTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"target":{"awsParams":{"customTagList":[{"key":"custom-tag-key","value":"custom-tag-value"}],"region":3,"subnetId":26,"vpcId":26},"azureParams":{"availabilitySetId":26,"networkResourceGroupId":26,"resourceGroupId":26,"storageAccountId":26,"storageContainerId":26,"storageResourceGroupId":26,"tempVmResourceGroupId":26,"tempVmStorageAccountId":26,"tempVmStorageContainerId":26,"tempVmSubnetId":26,"tempVmVirtualNetworkId":26},"id":2}}],"onpremDeployTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"params":{"id":4}}],"rpaasTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"targetType":"Tape"}],"absolutelyExtraneousField1":null}`,
					`--cascaded-targets-config=[{"sourceClusterId":26,"remoteTargets":{"replicationTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"awsTargetConfig":{"region":26,"sourceId":26},"azureTargetConfig":{"resourceGroup":26,"sourceId":26},"targetType":"RemoteCluster","remoteTargetConfig":{"clusterId":26}}],"archivalTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"tierSettings":{"awsTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAmazonS3Standard"}]},"azureTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAzureTierHot"}]},"cloudPlatform":"AWS","googleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kGoogleStandard"}]},"oracleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kOracleTierStandard"}]}},"extendedRetention":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"runType":"Regular","configId":"Config-Id"}]}],"cloudSpinTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"target":{"awsParams":{"customTagList":[{"key":"custom-tag-key","value":"custom-tag-value"}],"region":3,"subnetId":26,"vpcId":26},"azureParams":{"availabilitySetId":26,"networkResourceGroupId":26,"resourceGroupId":26,"storageAccountId":26,"storageContainerId":26,"storageResourceGroupId":26,"tempVmResourceGroupId":26,"tempVmStorageAccountId":26,"tempVmStorageContainerId":26,"tempVmSubnetId":26,"tempVmVirtualNetworkId":26},"id":2}}],"onpremDeployTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"params":{"id":4}}],"rpaasTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"targetType":"Tape"}]},"absolutelyExtraneousField1":null}]`,
					`--retry-options={"retries":0,"retryIntervalMins":1,"absolutelyExtraneousField1":null}`,
					`--data-lock=Compliance`,
					`--version=38`,
					`--is-cbs-enabled=true`,
					`--last-modification-time-usecs=26`,
					`--template-id=protection-policy-template`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There is an unsupported field in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField1'\n`))
			})

			It("but there are multiple extranous fields", func() {
				args := []string{
					"protection-policy",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--name=update-protection-policy`,
					`--backup-policy={"regular":{"incremental":{"schedule":{"unit":"Minutes","minuteSchedule":{"frequency":1},"hourSchedule":{"frequency":1},"daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}}},"full":{"schedule":{"unit":"Days","daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}}},"fullBackups":[{"schedule":{"unit":"Days","daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}}],"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"primaryBackupTarget":{"targetType":"Local","archivalTargetSettings":{"targetId":26,"tierSettings":{"awsTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAmazonS3Standard"}]},"azureTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAzureTierHot"}]},"cloudPlatform":"AWS","googleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kGoogleStandard"}]},"oracleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kOracleTierStandard"}]}}},"useDefaultBackupTarget":true}},"log":{"schedule":{"unit":"Minutes","minuteSchedule":{"frequency":1},"hourSchedule":{"frequency":1}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"bmr":{"schedule":{"unit":"Days","daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"cdp":{"retention":{"unit":"Minutes","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"storageArraySnapshot":{"schedule":{"unit":"Minutes","minuteSchedule":{"frequency":1},"hourSchedule":{"frequency":1},"daySchedule":{"frequency":1},"weekSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},"monthSchedule":{"dayOfWeek":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekOfMonth":"First","dayOfMonth":10},"yearSchedule":{"dayOfYear":"First"}},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}},"runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--description=Protection Policy`,
					`--blackout-window=[{"day":"Sunday","startTime":{"hour":1,"minute":15,"timeZone":"America/Los_Angeles"},"endTime":{"hour":1,"minute":15,"timeZone":"America/Los_Angeles"},"configId":"Config-Id","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--extended-retention=[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"runType":"Regular","configId":"Config-Id","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--remote-target-policy={"replicationTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"awsTargetConfig":{"region":26,"sourceId":26},"azureTargetConfig":{"resourceGroup":26,"sourceId":26},"targetType":"RemoteCluster","remoteTargetConfig":{"clusterId":26}}],"archivalTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"tierSettings":{"awsTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAmazonS3Standard"}]},"azureTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAzureTierHot"}]},"cloudPlatform":"AWS","googleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kGoogleStandard"}]},"oracleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kOracleTierStandard"}]}},"extendedRetention":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"runType":"Regular","configId":"Config-Id"}]}],"cloudSpinTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"target":{"awsParams":{"customTagList":[{"key":"custom-tag-key","value":"custom-tag-value"}],"region":3,"subnetId":26,"vpcId":26},"azureParams":{"availabilitySetId":26,"networkResourceGroupId":26,"resourceGroupId":26,"storageAccountId":26,"storageContainerId":26,"storageResourceGroupId":26,"tempVmResourceGroupId":26,"tempVmStorageAccountId":26,"tempVmStorageContainerId":26,"tempVmSubnetId":26,"tempVmVirtualNetworkId":26},"id":2}}],"onpremDeployTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"params":{"id":4}}],"rpaasTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"targetType":"Tape"}],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--cascaded-targets-config=[{"sourceClusterId":26,"remoteTargets":{"replicationTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"awsTargetConfig":{"region":26,"sourceId":26},"azureTargetConfig":{"resourceGroup":26,"sourceId":26},"targetType":"RemoteCluster","remoteTargetConfig":{"clusterId":26}}],"archivalTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"tierSettings":{"awsTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAmazonS3Standard"}]},"azureTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kAzureTierHot"}]},"cloudPlatform":"AWS","googleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kGoogleStandard"}]},"oracleTiering":{"tiers":[{"moveAfterUnit":"Days","moveAfter":26,"tierType":"kOracleTierStandard"}]}},"extendedRetention":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"runType":"Regular","configId":"Config-Id"}]}],"cloudSpinTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"target":{"awsParams":{"customTagList":[{"key":"custom-tag-key","value":"custom-tag-value"}],"region":3,"subnetId":26,"vpcId":26},"azureParams":{"availabilitySetId":26,"networkResourceGroupId":26,"resourceGroupId":26,"storageAccountId":26,"storageContainerId":26,"storageResourceGroupId":26,"tempVmResourceGroupId":26,"tempVmStorageAccountId":26,"tempVmStorageContainerId":26,"tempVmSubnetId":26,"tempVmVirtualNetworkId":26},"id":2}}],"onpremDeployTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"params":{"id":4}}],"rpaasTargets":[{"schedule":{"unit":"Runs","frequency":3},"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnRunSuccess":true,"configId":"Config-Id","backupRunType":"Regular","runTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"logRetention":{"unit":"Days","duration":0,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"targetId":5,"targetType":"Tape"}]},"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--retry-options={"retries":0,"retryIntervalMins":1,"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--data-lock=Compliance`,
					`--version=38`,
					`--is-cbs-enabled=true`,
					`--last-modification-time-usecs=26`,
					`--template-id=protection-policy-template`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There are multiple unsupported fields in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField[12], #\.(\[0\]\.)?absolutelyExtraneousField[12]'\n`))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PUT"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--name=update-protection-policy`,
					`--backup-policy={"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}`,
					`--description=Protection Policy`,
					`--blackout-window=[{"day": "Sunday", "startTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "configId": "Config-Id"}]`,
					`--extended-retention=[{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]`,
					`--remote-target-policy={"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}`,
					`--cascaded-targets-config=[{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}}]`,
					`--retry-options={"retries": 0, "retryIntervalMins": 1}`,
					`--data-lock=Compliance`,
					`--version=38`,
					`--is-cbs-enabled=true`,
					`--last-modification-time-usecs=26`,
					`--template-id=protection-policy-template`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-policy",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--name=update-protection-policy`,
					`--backup-policy={"regular": {"incremental": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "full": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}}, "fullBackups": [{"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "primaryBackupTarget": {"targetType": "Local", "archivalTargetSettings": {"targetId": 26, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}}, "useDefaultBackupTarget": true}}, "log": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "bmr": {"schedule": {"unit": "Days", "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "cdp": {"retention": {"unit": "Minutes", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "storageArraySnapshot": {"schedule": {"unit": "Minutes", "minuteSchedule": {"frequency": 1}, "hourSchedule": {"frequency": 1}, "daySchedule": {"frequency": 1}, "weekSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}, "monthSchedule": {"dayOfWeek": ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], "weekOfMonth": "First", "dayOfMonth": 10}, "yearSchedule": {"dayOfYear": "First"}}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}, "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}]}`,
					`--description=Protection Policy`,
					`--blackout-window=[{"day": "Sunday", "startTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "endTime": {"hour": 1, "minute": 15, "timeZone": "America/Los_Angeles"}, "configId": "Config-Id"}]`,
					`--extended-retention=[{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]`,
					`--remote-target-policy={"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}`,
					`--cascaded-targets-config=[{"sourceClusterId": 26, "remoteTargets": {"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"region": 26, "sourceId": 26}, "azureTargetConfig": {"resourceGroup": 26, "sourceId": 26}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "Config-Id"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "custom-tag-key", "value": "custom-tag-value"}], "region": 3, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 2}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 4}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 3}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "Config-Id", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 5, "targetType": "Tape"}]}}]`,
					`--retry-options={"retries": 0, "retryIntervalMins": 1}`,
					`--data-lock=Compliance`,
					`--version=38`,
					`--is-cbs-enabled=true`,
					`--last-modification-time-usecs=26`,
					`--template-id=protection-policy-template`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-policy",
					"update",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-policy delete` command", func() {
		var (
			operationPath = "/data-protect/policies/testString"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("DELETE"))
					requestCallback(req)
					res.WriteHeader(204)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"delete",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"delete",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--output=json`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				Expect(out).ToNot(BeNil())
				Expect(string(out)).To(Equal("\"\"\n"))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("DELETE"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-policy",
					"delete",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--force`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-policy",
					"delete",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-policy",
					"delete",
					`--force`,
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-group list` command", func() {
		var (
			operationPath = "/data-protect/protection-groups"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"protectionGroups": [{"id": "testString", "name": "testString", "clusterId": "testString", "regionId": "testString", "policyId": "testString", "priority": "kLow", "description": "testString", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 26, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "testString", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": true, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "testString", "protectionGroupInstanceId": 26, "protectionGroupId": "testString", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString"}, "originProtectionGroupId": "testString", "protectionGroupName": "testString", "isLocalSnapshotsDeleted": true, "objects": [{"object": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isCloudArchivalDirect": true, "hasLocalSnapshot": true, "environment": "testString", "externallyTriggeredBackupTag": "testString"}, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isProtectOnce": true, "missingEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "invalidEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "numProtectedObjects": 26, "advancedConfigs": [{"key": "testString", "value": "testString"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 26, "name": "testString", "volumeGuids": ["testString"], "enableSystemBackup": true, "excludedVssWriters": ["testString"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "excludedVssWriters": ["testString"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["testString"], "objects": [{"excludedVssWriters": ["testString"], "id": 26, "name": "testString", "filePaths": [{"includedPath": "testString", "excludedPaths": ["testString"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["testString"], "followNasSymlinkTarget": true, "metadataFilePath": "testString"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "globalExcludePaths": ["testString"], "globalExcludeFS": ["testString"], "ignorableErrors": ["kEOF"], "allowParallelRuns": true}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26, "hostName": "testString"}], "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "withClause": "testString"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 26, "hostName": "testString", "volumeGuids": ["testString"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}]}}}]}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"list",
					`--xibm-tenant-id=tenantID`,
					`--request-initiator-type=UIUser`,
					`--ids=protectionGroupId1`,
					`--names=policyName1`,
					`--policy-ids=policyId1`,
					`--include-groups-with-datalock-only=true`,
					`--environments=kPhysical,kSQL`,
					`--is-active=true`,
					`--is-deleted=true`,
					`--is-paused=true`,
					`--last-run-local-backup-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-replication-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-archival-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-cloud-spin-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-any-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--is-last-run-sla-violated=true`,
					`--include-last-run-info=true`,
					`--prune-excluded-source-ids=true`,
					`--prune-source-ids=true`,
					`--use-cached-data=true`,
					`--source-ids=26,27`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"list",
					`--xibm-tenant-id=tenantID`,
					`--request-initiator-type=UIUser`,
					`--ids=protectionGroupId1`,
					`--names=policyName1`,
					`--policy-ids=policyId1`,
					`--include-groups-with-datalock-only=true`,
					`--environments=kPhysical,kSQL`,
					`--is-active=true`,
					`--is-deleted=true`,
					`--is-paused=true`,
					`--last-run-local-backup-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-replication-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-archival-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-cloud-spin-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-any-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--is-last-run-sla-violated=true`,
					`--include-last-run-info=true`,
					`--prune-excluded-source-ids=true`,
					`--prune-source-ids=true`,
					`--use-cached-data=true`,
					`--source-ids=26,27`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"protectionGroups": [{"id": "testString", "name": "testString", "clusterId": "testString", "regionId": "testString", "policyId": "testString", "priority": "kLow", "description": "testString", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 26, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "testString", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": true, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "testString", "protectionGroupInstanceId": 26, "protectionGroupId": "testString", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString"}, "originProtectionGroupId": "testString", "protectionGroupName": "testString", "isLocalSnapshotsDeleted": true, "objects": [{"object": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isCloudArchivalDirect": true, "hasLocalSnapshot": true, "environment": "testString", "externallyTriggeredBackupTag": "testString"}, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isProtectOnce": true, "missingEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "invalidEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "numProtectedObjects": 26, "advancedConfigs": [{"key": "testString", "value": "testString"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 26, "name": "testString", "volumeGuids": ["testString"], "enableSystemBackup": true, "excludedVssWriters": ["testString"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "excludedVssWriters": ["testString"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["testString"], "objects": [{"excludedVssWriters": ["testString"], "id": 26, "name": "testString", "filePaths": [{"includedPath": "testString", "excludedPaths": ["testString"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["testString"], "followNasSymlinkTarget": true, "metadataFilePath": "testString"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "globalExcludePaths": ["testString"], "globalExcludeFS": ["testString"], "ignorableErrors": ["kEOF"], "allowParallelRuns": true}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26, "hostName": "testString"}], "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "withClause": "testString"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 26, "hostName": "testString", "volumeGuids": ["testString"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}]}}}]}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"list",
					`--xibm-tenant-id=tenantID`,
					`--request-initiator-type=UIUser`,
					`--ids=protectionGroupId1`,
					`--names=policyName1`,
					`--policy-ids=policyId1`,
					`--include-groups-with-datalock-only=true`,
					`--environments=kPhysical,kSQL`,
					`--is-active=true`,
					`--is-deleted=true`,
					`--is-paused=true`,
					`--last-run-local-backup-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-replication-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-archival-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-cloud-spin-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-any-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--is-last-run-sla-violated=true`,
					`--include-last-run-info=true`,
					`--prune-excluded-source-ids=true`,
					`--prune-source-ids=true`,
					`--use-cached-data=true`,
					`--source-ids=26,27`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-group",
					"list",
					`--xibm-tenant-id=tenantID`,
					`--request-initiator-type=UIUser`,
					`--ids=protectionGroupId1`,
					`--names=policyName1`,
					`--policy-ids=policyId1`,
					`--include-groups-with-datalock-only=true`,
					`--environments=kPhysical,kSQL`,
					`--is-active=true`,
					`--is-deleted=true`,
					`--is-paused=true`,
					`--last-run-local-backup-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-replication-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-archival-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-cloud-spin-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--last-run-any-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--is-last-run-sla-violated=true`,
					`--include-last-run-info=true`,
					`--prune-excluded-source-ids=true`,
					`--prune-source-ids=true`,
					`--use-cached-data=true`,
					`--source-ids=26,27`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-group",
					"list",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-group create` command", func() {
		var (
			operationPath = "/data-protect/protection-groups"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "testString", "name": "testString", "clusterId": "testString", "regionId": "testString", "policyId": "testString", "priority": "kLow", "description": "testString", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 26, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "testString", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": true, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "testString", "protectionGroupInstanceId": 26, "protectionGroupId": "testString", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString"}, "originProtectionGroupId": "testString", "protectionGroupName": "testString", "isLocalSnapshotsDeleted": true, "objects": [{"object": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isCloudArchivalDirect": true, "hasLocalSnapshot": true, "environment": "testString", "externallyTriggeredBackupTag": "testString"}, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isProtectOnce": true, "missingEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "invalidEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "numProtectedObjects": 26, "advancedConfigs": [{"key": "testString", "value": "testString"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 26, "name": "testString", "volumeGuids": ["testString"], "enableSystemBackup": true, "excludedVssWriters": ["testString"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "excludedVssWriters": ["testString"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["testString"], "objects": [{"excludedVssWriters": ["testString"], "id": 26, "name": "testString", "filePaths": [{"includedPath": "testString", "excludedPaths": ["testString"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["testString"], "followNasSymlinkTarget": true, "metadataFilePath": "testString"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "globalExcludePaths": ["testString"], "globalExcludeFS": ["testString"], "ignorableErrors": ["kEOF"], "allowParallelRuns": true}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26, "hostName": "testString"}], "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "withClause": "testString"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 26, "hostName": "testString", "volumeGuids": ["testString"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}]}}}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-protection-group`,
					`--policy-id=xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx`,
					`--environment=kPhysical`,
					`--priority=kLow`,
					`--description=Protection Group`,
					`--start-time={"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}`,
					`--end-time-usecs=26`,
					`--last-modified-timestamp-usecs=26`,
					`--alert-policy={"backupRunStatus": ["kSuccess","kFailure","kSlaViolation","kWarning"], "alertTargets": [{"emailAddress": "alert1@domain.com", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}`,
					`--sla=[{"backupRunType": "kIncremental", "slaMinutes": 1}]`,
					`--qos-policy=kBackupHDD`,
					`--abort-in-blackouts=true`,
					`--pause-in-blackouts=true`,
					`--is-paused=true`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--physical-params={"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 3, "volumeGuids": ["volumeGuid1"], "enableSystemBackup": true, "excludedVssWriters": ["writerName1","writerName2"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "excludedVssWriters": ["writerName1","writerName2"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["writerName1","writerName2"], "objects": [{"excludedVssWriters": ["writerName1","writerName2"], "id": 2, "filePaths": [{"includedPath": "~/dir1/", "excludedPaths": ["~/dir2"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["volume1"], "followNasSymlinkTarget": true, "metadataFilePath": "~/dir3"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "globalExcludePaths": ["~/dir1"], "globalExcludeFS": ["~/dir2"], "ignorableErrors": ["kEOF","kNonExistent"], "allowParallelRuns": true}}`,
					`--mssql-params={"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26}], "objects": [{"id": 6}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 6}], "withClause": "withClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 8, "volumeGuids": ["volumeGuid1"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "objects": [{"id": 6}]}}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-protection-group`,
					`--policy-id=xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx`,
					`--environment=kPhysical`,
					`--priority=kLow`,
					`--description=Protection Group`,
					`--start-time={"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}`,
					`--end-time-usecs=26`,
					`--last-modified-timestamp-usecs=26`,
					`--alert-policy={"backupRunStatus": ["kSuccess","kFailure","kSlaViolation","kWarning"], "alertTargets": [{"emailAddress": "alert1@domain.com", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}`,
					`--sla=[{"backupRunType": "kIncremental", "slaMinutes": 1}]`,
					`--qos-policy=kBackupHDD`,
					`--abort-in-blackouts=true`,
					`--pause-in-blackouts=true`,
					`--is-paused=true`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--physical-params={"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 3, "volumeGuids": ["volumeGuid1"], "enableSystemBackup": true, "excludedVssWriters": ["writerName1","writerName2"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "excludedVssWriters": ["writerName1","writerName2"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["writerName1","writerName2"], "objects": [{"excludedVssWriters": ["writerName1","writerName2"], "id": 2, "filePaths": [{"includedPath": "~/dir1/", "excludedPaths": ["~/dir2"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["volume1"], "followNasSymlinkTarget": true, "metadataFilePath": "~/dir3"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "globalExcludePaths": ["~/dir1"], "globalExcludeFS": ["~/dir2"], "ignorableErrors": ["kEOF","kNonExistent"], "allowParallelRuns": true}}`,
					`--mssql-params={"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26}], "objects": [{"id": 6}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 6}], "withClause": "withClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 8, "volumeGuids": ["volumeGuid1"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "objects": [{"id": 6}]}}`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"id": "testString", "name": "testString", "clusterId": "testString", "regionId": "testString", "policyId": "testString", "priority": "kLow", "description": "testString", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 26, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "testString", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": true, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "testString", "protectionGroupInstanceId": 26, "protectionGroupId": "testString", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString"}, "originProtectionGroupId": "testString", "protectionGroupName": "testString", "isLocalSnapshotsDeleted": true, "objects": [{"object": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isCloudArchivalDirect": true, "hasLocalSnapshot": true, "environment": "testString", "externallyTriggeredBackupTag": "testString"}, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isProtectOnce": true, "missingEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "invalidEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "numProtectedObjects": 26, "advancedConfigs": [{"key": "testString", "value": "testString"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 26, "name": "testString", "volumeGuids": ["testString"], "enableSystemBackup": true, "excludedVssWriters": ["testString"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "excludedVssWriters": ["testString"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["testString"], "objects": [{"excludedVssWriters": ["testString"], "id": 26, "name": "testString", "filePaths": [{"includedPath": "testString", "excludedPaths": ["testString"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["testString"], "followNasSymlinkTarget": true, "metadataFilePath": "testString"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "globalExcludePaths": ["testString"], "globalExcludeFS": ["testString"], "ignorableErrors": ["kEOF"], "allowParallelRuns": true}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26, "hostName": "testString"}], "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "withClause": "testString"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 26, "hostName": "testString", "volumeGuids": ["testString"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}]}}}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
			It("but there is a single extranous field", func() {
				args := []string{
					"protection-group",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-protection-group`,
					`--policy-id=xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx`,
					`--environment=kPhysical`,
					`--priority=kLow`,
					`--description=Protection Group`,
					`--start-time={"hour":0,"minute":0,"timeZone":"America/Los_Angeles","absolutelyExtraneousField1":null}`,
					`--end-time-usecs=26`,
					`--last-modified-timestamp-usecs=26`,
					`--alert-policy={"backupRunStatus":["kSuccess","kFailure","kSlaViolation","kWarning"],"alertTargets":[{"emailAddress":"alert1@domain.com","language":"en-us","recipientType":"kTo"}],"raiseObjectLevelFailureAlert":true,"raiseObjectLevelFailureAlertAfterLastAttempt":true,"raiseObjectLevelFailureAlertAfterEachAttempt":true,"absolutelyExtraneousField1":null}`,
					`--sla=[{"backupRunType":"kIncremental","slaMinutes":1,"absolutelyExtraneousField1":null}]`,
					`--qos-policy=kBackupHDD`,
					`--abort-in-blackouts=true`,
					`--pause-in-blackouts=true`,
					`--is-paused=true`,
					`--advanced-configs=[{"key":"configKey","value":"configValue","absolutelyExtraneousField1":null}]`,
					`--physical-params={"protectionType":"kFile","volumeProtectionTypeParams":{"objects":[{"id":3,"volumeGuids":["volumeGuid1"],"enableSystemBackup":true,"excludedVssWriters":["writerName1","writerName2"]}],"indexingPolicy":{"enableIndexing":true,"includePaths":["~/dir1"],"excludePaths":["~/dir2"]},"performSourceSideDeduplication":true,"quiesce":true,"continueOnQuiesceFailure":true,"incrementalBackupAfterRestart":true,"prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"dedupExclusionSourceIds":[26,27],"excludedVssWriters":["writerName1","writerName2"],"cobmrBackup":true},"fileProtectionTypeParams":{"excludedVssWriters":["writerName1","writerName2"],"objects":[{"excludedVssWriters":["writerName1","writerName2"],"id":2,"filePaths":[{"includedPath":"~/dir1/","excludedPaths":["~/dir2"],"skipNestedVolumes":true}],"usesPathLevelSkipNestedVolumeSetting":true,"nestedVolumeTypesToSkip":["volume1"],"followNasSymlinkTarget":true,"metadataFilePath":"~/dir3"}],"indexingPolicy":{"enableIndexing":true,"includePaths":["~/dir1"],"excludePaths":["~/dir2"]},"performSourceSideDeduplication":true,"performBrickBasedDeduplication":true,"taskTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"quiesce":true,"continueOnQuiesceFailure":true,"cobmrBackup":true,"prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"dedupExclusionSourceIds":[26,27],"globalExcludePaths":["~/dir1"],"globalExcludeFS":["~/dir2"],"ignorableErrors":["kEOF","kNonExistent"],"allowParallelRuns":true},"absolutelyExtraneousField1":null}`,
					`--mssql-params={"fileProtectionTypeParams":{"aagBackupPreferenceType":"kPrimaryReplicaOnly","advancedSettings":{"clonedDbBackupStatus":"kError","dbBackupIfNotOnlineStatus":"kError","missingDbBackupStatus":"kError","offlineRestoringDbBackupStatus":"kError","readOnlyDbBackupStatus":"kError","reportAllNonAutoprotectDbErrors":"kError"},"backupSystemDbs":true,"excludeFilters":[{"filterString":"filterString","isRegularExpression":false}],"fullBackupsCopyOnly":true,"logBackupNumStreams":38,"logBackupWithClause":"backupWithClause","prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"useAagPreferencesFromServer":true,"userDbBackupPreferenceType":"kBackupAllDatabases","additionalHostParams":[{"disableSourceSideDeduplication":true,"hostId":26}],"objects":[{"id":6}],"performSourceSideDeduplication":true},"nativeProtectionTypeParams":{"aagBackupPreferenceType":"kPrimaryReplicaOnly","advancedSettings":{"clonedDbBackupStatus":"kError","dbBackupIfNotOnlineStatus":"kError","missingDbBackupStatus":"kError","offlineRestoringDbBackupStatus":"kError","readOnlyDbBackupStatus":"kError","reportAllNonAutoprotectDbErrors":"kError"},"backupSystemDbs":true,"excludeFilters":[{"filterString":"filterString","isRegularExpression":false}],"fullBackupsCopyOnly":true,"logBackupNumStreams":38,"logBackupWithClause":"backupWithClause","prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"useAagPreferencesFromServer":true,"userDbBackupPreferenceType":"kBackupAllDatabases","numStreams":38,"objects":[{"id":6}],"withClause":"withClause"},"protectionType":"kFile","volumeProtectionTypeParams":{"aagBackupPreferenceType":"kPrimaryReplicaOnly","advancedSettings":{"clonedDbBackupStatus":"kError","dbBackupIfNotOnlineStatus":"kError","missingDbBackupStatus":"kError","offlineRestoringDbBackupStatus":"kError","readOnlyDbBackupStatus":"kError","reportAllNonAutoprotectDbErrors":"kError"},"backupSystemDbs":true,"excludeFilters":[{"filterString":"filterString","isRegularExpression":false}],"fullBackupsCopyOnly":true,"logBackupNumStreams":38,"logBackupWithClause":"backupWithClause","prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"useAagPreferencesFromServer":true,"userDbBackupPreferenceType":"kBackupAllDatabases","additionalHostParams":[{"enableSystemBackup":true,"hostId":8,"volumeGuids":["volumeGuid1"]}],"backupDbVolumesOnly":true,"incrementalBackupAfterRestart":true,"indexingPolicy":{"enableIndexing":true,"includePaths":["~/dir1"],"excludePaths":["~/dir2"]},"objects":[{"id":6}]},"absolutelyExtraneousField1":null}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There is an unsupported field in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField1'\n`))
			})

			It("but there are multiple extranous fields", func() {
				args := []string{
					"protection-group",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-protection-group`,
					`--policy-id=xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx`,
					`--environment=kPhysical`,
					`--priority=kLow`,
					`--description=Protection Group`,
					`--start-time={"hour":0,"minute":0,"timeZone":"America/Los_Angeles","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--end-time-usecs=26`,
					`--last-modified-timestamp-usecs=26`,
					`--alert-policy={"backupRunStatus":["kSuccess","kFailure","kSlaViolation","kWarning"],"alertTargets":[{"emailAddress":"alert1@domain.com","language":"en-us","recipientType":"kTo"}],"raiseObjectLevelFailureAlert":true,"raiseObjectLevelFailureAlertAfterLastAttempt":true,"raiseObjectLevelFailureAlertAfterEachAttempt":true,"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--sla=[{"backupRunType":"kIncremental","slaMinutes":1,"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--qos-policy=kBackupHDD`,
					`--abort-in-blackouts=true`,
					`--pause-in-blackouts=true`,
					`--is-paused=true`,
					`--advanced-configs=[{"key":"configKey","value":"configValue","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--physical-params={"protectionType":"kFile","volumeProtectionTypeParams":{"objects":[{"id":3,"volumeGuids":["volumeGuid1"],"enableSystemBackup":true,"excludedVssWriters":["writerName1","writerName2"]}],"indexingPolicy":{"enableIndexing":true,"includePaths":["~/dir1"],"excludePaths":["~/dir2"]},"performSourceSideDeduplication":true,"quiesce":true,"continueOnQuiesceFailure":true,"incrementalBackupAfterRestart":true,"prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"dedupExclusionSourceIds":[26,27],"excludedVssWriters":["writerName1","writerName2"],"cobmrBackup":true},"fileProtectionTypeParams":{"excludedVssWriters":["writerName1","writerName2"],"objects":[{"excludedVssWriters":["writerName1","writerName2"],"id":2,"filePaths":[{"includedPath":"~/dir1/","excludedPaths":["~/dir2"],"skipNestedVolumes":true}],"usesPathLevelSkipNestedVolumeSetting":true,"nestedVolumeTypesToSkip":["volume1"],"followNasSymlinkTarget":true,"metadataFilePath":"~/dir3"}],"indexingPolicy":{"enableIndexing":true,"includePaths":["~/dir1"],"excludePaths":["~/dir2"]},"performSourceSideDeduplication":true,"performBrickBasedDeduplication":true,"taskTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"quiesce":true,"continueOnQuiesceFailure":true,"cobmrBackup":true,"prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"dedupExclusionSourceIds":[26,27],"globalExcludePaths":["~/dir1"],"globalExcludeFS":["~/dir2"],"ignorableErrors":["kEOF","kNonExistent"],"allowParallelRuns":true},"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--mssql-params={"fileProtectionTypeParams":{"aagBackupPreferenceType":"kPrimaryReplicaOnly","advancedSettings":{"clonedDbBackupStatus":"kError","dbBackupIfNotOnlineStatus":"kError","missingDbBackupStatus":"kError","offlineRestoringDbBackupStatus":"kError","readOnlyDbBackupStatus":"kError","reportAllNonAutoprotectDbErrors":"kError"},"backupSystemDbs":true,"excludeFilters":[{"filterString":"filterString","isRegularExpression":false}],"fullBackupsCopyOnly":true,"logBackupNumStreams":38,"logBackupWithClause":"backupWithClause","prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"useAagPreferencesFromServer":true,"userDbBackupPreferenceType":"kBackupAllDatabases","additionalHostParams":[{"disableSourceSideDeduplication":true,"hostId":26}],"objects":[{"id":6}],"performSourceSideDeduplication":true},"nativeProtectionTypeParams":{"aagBackupPreferenceType":"kPrimaryReplicaOnly","advancedSettings":{"clonedDbBackupStatus":"kError","dbBackupIfNotOnlineStatus":"kError","missingDbBackupStatus":"kError","offlineRestoringDbBackupStatus":"kError","readOnlyDbBackupStatus":"kError","reportAllNonAutoprotectDbErrors":"kError"},"backupSystemDbs":true,"excludeFilters":[{"filterString":"filterString","isRegularExpression":false}],"fullBackupsCopyOnly":true,"logBackupNumStreams":38,"logBackupWithClause":"backupWithClause","prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"useAagPreferencesFromServer":true,"userDbBackupPreferenceType":"kBackupAllDatabases","numStreams":38,"objects":[{"id":6}],"withClause":"withClause"},"protectionType":"kFile","volumeProtectionTypeParams":{"aagBackupPreferenceType":"kPrimaryReplicaOnly","advancedSettings":{"clonedDbBackupStatus":"kError","dbBackupIfNotOnlineStatus":"kError","missingDbBackupStatus":"kError","offlineRestoringDbBackupStatus":"kError","readOnlyDbBackupStatus":"kError","reportAllNonAutoprotectDbErrors":"kError"},"backupSystemDbs":true,"excludeFilters":[{"filterString":"filterString","isRegularExpression":false}],"fullBackupsCopyOnly":true,"logBackupNumStreams":38,"logBackupWithClause":"backupWithClause","prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"useAagPreferencesFromServer":true,"userDbBackupPreferenceType":"kBackupAllDatabases","additionalHostParams":[{"enableSystemBackup":true,"hostId":8,"volumeGuids":["volumeGuid1"]}],"backupDbVolumesOnly":true,"incrementalBackupAfterRestart":true,"indexingPolicy":{"enableIndexing":true,"includePaths":["~/dir1"],"excludePaths":["~/dir2"]},"objects":[{"id":6}]},"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There are multiple unsupported fields in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField[12], #\.(\[0\]\.)?absolutelyExtraneousField[12]'\n`))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-protection-group`,
					`--policy-id=xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx`,
					`--environment=kPhysical`,
					`--priority=kLow`,
					`--description=Protection Group`,
					`--start-time={"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}`,
					`--end-time-usecs=26`,
					`--last-modified-timestamp-usecs=26`,
					`--alert-policy={"backupRunStatus": ["kSuccess","kFailure","kSlaViolation","kWarning"], "alertTargets": [{"emailAddress": "alert1@domain.com", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}`,
					`--sla=[{"backupRunType": "kIncremental", "slaMinutes": 1}]`,
					`--qos-policy=kBackupHDD`,
					`--abort-in-blackouts=true`,
					`--pause-in-blackouts=true`,
					`--is-paused=true`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--physical-params={"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 3, "volumeGuids": ["volumeGuid1"], "enableSystemBackup": true, "excludedVssWriters": ["writerName1","writerName2"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "excludedVssWriters": ["writerName1","writerName2"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["writerName1","writerName2"], "objects": [{"excludedVssWriters": ["writerName1","writerName2"], "id": 2, "filePaths": [{"includedPath": "~/dir1/", "excludedPaths": ["~/dir2"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["volume1"], "followNasSymlinkTarget": true, "metadataFilePath": "~/dir3"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "globalExcludePaths": ["~/dir1"], "globalExcludeFS": ["~/dir2"], "ignorableErrors": ["kEOF","kNonExistent"], "allowParallelRuns": true}}`,
					`--mssql-params={"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26}], "objects": [{"id": 6}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 6}], "withClause": "withClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 8, "volumeGuids": ["volumeGuid1"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "objects": [{"id": 6}]}}`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-group",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-protection-group`,
					`--policy-id=xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx`,
					`--environment=kPhysical`,
					`--priority=kLow`,
					`--description=Protection Group`,
					`--start-time={"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}`,
					`--end-time-usecs=26`,
					`--last-modified-timestamp-usecs=26`,
					`--alert-policy={"backupRunStatus": ["kSuccess","kFailure","kSlaViolation","kWarning"], "alertTargets": [{"emailAddress": "alert1@domain.com", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}`,
					`--sla=[{"backupRunType": "kIncremental", "slaMinutes": 1}]`,
					`--qos-policy=kBackupHDD`,
					`--abort-in-blackouts=true`,
					`--pause-in-blackouts=true`,
					`--is-paused=true`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--physical-params={"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 3, "volumeGuids": ["volumeGuid1"], "enableSystemBackup": true, "excludedVssWriters": ["writerName1","writerName2"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "excludedVssWriters": ["writerName1","writerName2"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["writerName1","writerName2"], "objects": [{"excludedVssWriters": ["writerName1","writerName2"], "id": 2, "filePaths": [{"includedPath": "~/dir1/", "excludedPaths": ["~/dir2"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["volume1"], "followNasSymlinkTarget": true, "metadataFilePath": "~/dir3"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "globalExcludePaths": ["~/dir1"], "globalExcludeFS": ["~/dir2"], "ignorableErrors": ["kEOF","kNonExistent"], "allowParallelRuns": true}}`,
					`--mssql-params={"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26}], "objects": [{"id": 6}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 6}], "withClause": "withClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 8, "volumeGuids": ["volumeGuid1"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "objects": [{"id": 6}]}}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-group",
					"create",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-group get` command", func() {
		var (
			operationPath = "/data-protect/protection-groups/testString"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "testString", "name": "testString", "clusterId": "testString", "regionId": "testString", "policyId": "testString", "priority": "kLow", "description": "testString", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 26, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "testString", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": true, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "testString", "protectionGroupInstanceId": 26, "protectionGroupId": "testString", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString"}, "originProtectionGroupId": "testString", "protectionGroupName": "testString", "isLocalSnapshotsDeleted": true, "objects": [{"object": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isCloudArchivalDirect": true, "hasLocalSnapshot": true, "environment": "testString", "externallyTriggeredBackupTag": "testString"}, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isProtectOnce": true, "missingEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "invalidEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "numProtectedObjects": 26, "advancedConfigs": [{"key": "testString", "value": "testString"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 26, "name": "testString", "volumeGuids": ["testString"], "enableSystemBackup": true, "excludedVssWriters": ["testString"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "excludedVssWriters": ["testString"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["testString"], "objects": [{"excludedVssWriters": ["testString"], "id": 26, "name": "testString", "filePaths": [{"includedPath": "testString", "excludedPaths": ["testString"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["testString"], "followNasSymlinkTarget": true, "metadataFilePath": "testString"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "globalExcludePaths": ["testString"], "globalExcludeFS": ["testString"], "ignorableErrors": ["kEOF"], "allowParallelRuns": true}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26, "hostName": "testString"}], "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "withClause": "testString"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 26, "hostName": "testString", "volumeGuids": ["testString"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}]}}}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"get",
					`--id=testString`,
					`--xibm-tenant-id=tenantID`,
					`--request-initiator-type=UIUser`,
					`--include-last-run-info=true`,
					`--prune-excluded-source-ids=true`,
					`--prune-source-ids=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"get",
					`--id=testString`,
					`--xibm-tenant-id=tenantID`,
					`--request-initiator-type=UIUser`,
					`--include-last-run-info=true`,
					`--prune-excluded-source-ids=true`,
					`--prune-source-ids=true`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"id": "testString", "name": "testString", "clusterId": "testString", "regionId": "testString", "policyId": "testString", "priority": "kLow", "description": "testString", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 26, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "testString", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": true, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "testString", "protectionGroupInstanceId": 26, "protectionGroupId": "testString", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString"}, "originProtectionGroupId": "testString", "protectionGroupName": "testString", "isLocalSnapshotsDeleted": true, "objects": [{"object": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isCloudArchivalDirect": true, "hasLocalSnapshot": true, "environment": "testString", "externallyTriggeredBackupTag": "testString"}, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isProtectOnce": true, "missingEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "invalidEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "numProtectedObjects": 26, "advancedConfigs": [{"key": "testString", "value": "testString"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 26, "name": "testString", "volumeGuids": ["testString"], "enableSystemBackup": true, "excludedVssWriters": ["testString"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "excludedVssWriters": ["testString"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["testString"], "objects": [{"excludedVssWriters": ["testString"], "id": 26, "name": "testString", "filePaths": [{"includedPath": "testString", "excludedPaths": ["testString"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["testString"], "followNasSymlinkTarget": true, "metadataFilePath": "testString"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "globalExcludePaths": ["testString"], "globalExcludeFS": ["testString"], "ignorableErrors": ["kEOF"], "allowParallelRuns": true}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26, "hostName": "testString"}], "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "withClause": "testString"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 26, "hostName": "testString", "volumeGuids": ["testString"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}]}}}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"get",
					`--id=testString`,
					`--xibm-tenant-id=tenantID`,
					`--request-initiator-type=UIUser`,
					`--include-last-run-info=true`,
					`--prune-excluded-source-ids=true`,
					`--prune-source-ids=true`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-group",
					"get",
					`--id=testString`,
					`--xibm-tenant-id=tenantID`,
					`--request-initiator-type=UIUser`,
					`--include-last-run-info=true`,
					`--prune-excluded-source-ids=true`,
					`--prune-source-ids=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-group",
					"get",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-group update` command", func() {
		var (
			operationPath = "/data-protect/protection-groups/testString"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PUT"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "testString", "name": "testString", "clusterId": "testString", "regionId": "testString", "policyId": "testString", "priority": "kLow", "description": "testString", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 26, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "testString", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": true, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "testString", "protectionGroupInstanceId": 26, "protectionGroupId": "testString", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString"}, "originProtectionGroupId": "testString", "protectionGroupName": "testString", "isLocalSnapshotsDeleted": true, "objects": [{"object": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isCloudArchivalDirect": true, "hasLocalSnapshot": true, "environment": "testString", "externallyTriggeredBackupTag": "testString"}, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isProtectOnce": true, "missingEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "invalidEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "numProtectedObjects": 26, "advancedConfigs": [{"key": "testString", "value": "testString"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 26, "name": "testString", "volumeGuids": ["testString"], "enableSystemBackup": true, "excludedVssWriters": ["testString"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "excludedVssWriters": ["testString"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["testString"], "objects": [{"excludedVssWriters": ["testString"], "id": 26, "name": "testString", "filePaths": [{"includedPath": "testString", "excludedPaths": ["testString"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["testString"], "followNasSymlinkTarget": true, "metadataFilePath": "testString"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "globalExcludePaths": ["testString"], "globalExcludeFS": ["testString"], "ignorableErrors": ["kEOF"], "allowParallelRuns": true}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26, "hostName": "testString"}], "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "withClause": "testString"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 26, "hostName": "testString", "volumeGuids": ["testString"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}]}}}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--name=update-protection-group`,
					`--policy-id=xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx`,
					`--environment=kPhysical`,
					`--priority=kLow`,
					`--description=Protection Group`,
					`--start-time={"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}`,
					`--end-time-usecs=26`,
					`--last-modified-timestamp-usecs=26`,
					`--alert-policy={"backupRunStatus": ["kSuccess","kFailure","kSlaViolation","kWarning"], "alertTargets": [{"emailAddress": "alert1@domain.com", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}`,
					`--sla=[{"backupRunType": "kIncremental", "slaMinutes": 1}]`,
					`--qos-policy=kBackupHDD`,
					`--abort-in-blackouts=true`,
					`--pause-in-blackouts=true`,
					`--is-paused=true`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--physical-params={"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 3, "volumeGuids": ["volumeGuid1"], "enableSystemBackup": true, "excludedVssWriters": ["writerName1","writerName2"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "excludedVssWriters": ["writerName1","writerName2"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["writerName1","writerName2"], "objects": [{"excludedVssWriters": ["writerName1","writerName2"], "id": 2, "filePaths": [{"includedPath": "~/dir1/", "excludedPaths": ["~/dir2"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["volume1"], "followNasSymlinkTarget": true, "metadataFilePath": "~/dir3"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "globalExcludePaths": ["~/dir1"], "globalExcludeFS": ["~/dir2"], "ignorableErrors": ["kEOF","kNonExistent"], "allowParallelRuns": true}}`,
					`--mssql-params={"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26}], "objects": [{"id": 6}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 6}], "withClause": "withClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 8, "volumeGuids": ["volumeGuid1"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "objects": [{"id": 6}]}}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--name=update-protection-group`,
					`--policy-id=xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx`,
					`--environment=kPhysical`,
					`--priority=kLow`,
					`--description=Protection Group`,
					`--start-time={"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}`,
					`--end-time-usecs=26`,
					`--last-modified-timestamp-usecs=26`,
					`--alert-policy={"backupRunStatus": ["kSuccess","kFailure","kSlaViolation","kWarning"], "alertTargets": [{"emailAddress": "alert1@domain.com", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}`,
					`--sla=[{"backupRunType": "kIncremental", "slaMinutes": 1}]`,
					`--qos-policy=kBackupHDD`,
					`--abort-in-blackouts=true`,
					`--pause-in-blackouts=true`,
					`--is-paused=true`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--physical-params={"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 3, "volumeGuids": ["volumeGuid1"], "enableSystemBackup": true, "excludedVssWriters": ["writerName1","writerName2"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "excludedVssWriters": ["writerName1","writerName2"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["writerName1","writerName2"], "objects": [{"excludedVssWriters": ["writerName1","writerName2"], "id": 2, "filePaths": [{"includedPath": "~/dir1/", "excludedPaths": ["~/dir2"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["volume1"], "followNasSymlinkTarget": true, "metadataFilePath": "~/dir3"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "globalExcludePaths": ["~/dir1"], "globalExcludeFS": ["~/dir2"], "ignorableErrors": ["kEOF","kNonExistent"], "allowParallelRuns": true}}`,
					`--mssql-params={"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26}], "objects": [{"id": 6}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 6}], "withClause": "withClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 8, "volumeGuids": ["volumeGuid1"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "objects": [{"id": 6}]}}`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"id": "testString", "name": "testString", "clusterId": "testString", "regionId": "testString", "policyId": "testString", "priority": "kLow", "description": "testString", "startTime": {"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}, "endTimeUsecs": 26, "lastModifiedTimestampUsecs": 26, "alertPolicy": {"backupRunStatus": ["kSuccess"], "alertTargets": [{"emailAddress": "testString", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}, "sla": [{"backupRunType": "kIncremental", "slaMinutes": 1}], "qosPolicy": "kBackupHDD", "abortInBlackouts": true, "pauseInBlackouts": true, "isActive": true, "isDeleted": true, "isPaused": true, "environment": "kPhysical", "lastRun": {"id": "testString", "protectionGroupInstanceId": 26, "protectionGroupId": "testString", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString"}, "originProtectionGroupId": "testString", "protectionGroupName": "testString", "isLocalSnapshotsDeleted": true, "objects": [{"object": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isCloudArchivalDirect": true, "hasLocalSnapshot": true, "environment": "testString", "externallyTriggeredBackupTag": "testString"}, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isProtectOnce": true, "missingEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "invalidEntities": [{"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}], "numProtectedObjects": 26, "advancedConfigs": [{"key": "testString", "value": "testString"}], "physicalParams": {"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 26, "name": "testString", "volumeGuids": ["testString"], "enableSystemBackup": true, "excludedVssWriters": ["testString"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "excludedVssWriters": ["testString"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["testString"], "objects": [{"excludedVssWriters": ["testString"], "id": 26, "name": "testString", "filePaths": [{"includedPath": "testString", "excludedPaths": ["testString"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["testString"], "followNasSymlinkTarget": true, "metadataFilePath": "testString"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26], "globalExcludePaths": ["testString"], "globalExcludeFS": ["testString"], "ignorableErrors": ["kEOF"], "allowParallelRuns": true}}, "mssqlParams": {"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26, "hostName": "testString"}], "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}], "withClause": "testString"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "testString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "testString", "prePostScript": {"preScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "testString", "params": "testString", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 26, "hostName": "testString", "volumeGuids": ["testString"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["testString"], "excludePaths": ["testString"]}, "objects": [{"id": 26, "name": "testString", "sourceType": "testString"}]}}}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
			It("but there is a single extranous field", func() {
				args := []string{
					"protection-group",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--name=update-protection-group`,
					`--policy-id=xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx`,
					`--environment=kPhysical`,
					`--priority=kLow`,
					`--description=Protection Group`,
					`--start-time={"hour":0,"minute":0,"timeZone":"America/Los_Angeles","absolutelyExtraneousField1":null}`,
					`--end-time-usecs=26`,
					`--last-modified-timestamp-usecs=26`,
					`--alert-policy={"backupRunStatus":["kSuccess","kFailure","kSlaViolation","kWarning"],"alertTargets":[{"emailAddress":"alert1@domain.com","language":"en-us","recipientType":"kTo"}],"raiseObjectLevelFailureAlert":true,"raiseObjectLevelFailureAlertAfterLastAttempt":true,"raiseObjectLevelFailureAlertAfterEachAttempt":true,"absolutelyExtraneousField1":null}`,
					`--sla=[{"backupRunType":"kIncremental","slaMinutes":1,"absolutelyExtraneousField1":null}]`,
					`--qos-policy=kBackupHDD`,
					`--abort-in-blackouts=true`,
					`--pause-in-blackouts=true`,
					`--is-paused=true`,
					`--advanced-configs=[{"key":"configKey","value":"configValue","absolutelyExtraneousField1":null}]`,
					`--physical-params={"protectionType":"kFile","volumeProtectionTypeParams":{"objects":[{"id":3,"volumeGuids":["volumeGuid1"],"enableSystemBackup":true,"excludedVssWriters":["writerName1","writerName2"]}],"indexingPolicy":{"enableIndexing":true,"includePaths":["~/dir1"],"excludePaths":["~/dir2"]},"performSourceSideDeduplication":true,"quiesce":true,"continueOnQuiesceFailure":true,"incrementalBackupAfterRestart":true,"prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"dedupExclusionSourceIds":[26,27],"excludedVssWriters":["writerName1","writerName2"],"cobmrBackup":true},"fileProtectionTypeParams":{"excludedVssWriters":["writerName1","writerName2"],"objects":[{"excludedVssWriters":["writerName1","writerName2"],"id":2,"filePaths":[{"includedPath":"~/dir1/","excludedPaths":["~/dir2"],"skipNestedVolumes":true}],"usesPathLevelSkipNestedVolumeSetting":true,"nestedVolumeTypesToSkip":["volume1"],"followNasSymlinkTarget":true,"metadataFilePath":"~/dir3"}],"indexingPolicy":{"enableIndexing":true,"includePaths":["~/dir1"],"excludePaths":["~/dir2"]},"performSourceSideDeduplication":true,"performBrickBasedDeduplication":true,"taskTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"quiesce":true,"continueOnQuiesceFailure":true,"cobmrBackup":true,"prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"dedupExclusionSourceIds":[26,27],"globalExcludePaths":["~/dir1"],"globalExcludeFS":["~/dir2"],"ignorableErrors":["kEOF","kNonExistent"],"allowParallelRuns":true},"absolutelyExtraneousField1":null}`,
					`--mssql-params={"fileProtectionTypeParams":{"aagBackupPreferenceType":"kPrimaryReplicaOnly","advancedSettings":{"clonedDbBackupStatus":"kError","dbBackupIfNotOnlineStatus":"kError","missingDbBackupStatus":"kError","offlineRestoringDbBackupStatus":"kError","readOnlyDbBackupStatus":"kError","reportAllNonAutoprotectDbErrors":"kError"},"backupSystemDbs":true,"excludeFilters":[{"filterString":"filterString","isRegularExpression":false}],"fullBackupsCopyOnly":true,"logBackupNumStreams":38,"logBackupWithClause":"backupWithClause","prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"useAagPreferencesFromServer":true,"userDbBackupPreferenceType":"kBackupAllDatabases","additionalHostParams":[{"disableSourceSideDeduplication":true,"hostId":26}],"objects":[{"id":6}],"performSourceSideDeduplication":true},"nativeProtectionTypeParams":{"aagBackupPreferenceType":"kPrimaryReplicaOnly","advancedSettings":{"clonedDbBackupStatus":"kError","dbBackupIfNotOnlineStatus":"kError","missingDbBackupStatus":"kError","offlineRestoringDbBackupStatus":"kError","readOnlyDbBackupStatus":"kError","reportAllNonAutoprotectDbErrors":"kError"},"backupSystemDbs":true,"excludeFilters":[{"filterString":"filterString","isRegularExpression":false}],"fullBackupsCopyOnly":true,"logBackupNumStreams":38,"logBackupWithClause":"backupWithClause","prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"useAagPreferencesFromServer":true,"userDbBackupPreferenceType":"kBackupAllDatabases","numStreams":38,"objects":[{"id":6}],"withClause":"withClause"},"protectionType":"kFile","volumeProtectionTypeParams":{"aagBackupPreferenceType":"kPrimaryReplicaOnly","advancedSettings":{"clonedDbBackupStatus":"kError","dbBackupIfNotOnlineStatus":"kError","missingDbBackupStatus":"kError","offlineRestoringDbBackupStatus":"kError","readOnlyDbBackupStatus":"kError","reportAllNonAutoprotectDbErrors":"kError"},"backupSystemDbs":true,"excludeFilters":[{"filterString":"filterString","isRegularExpression":false}],"fullBackupsCopyOnly":true,"logBackupNumStreams":38,"logBackupWithClause":"backupWithClause","prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"useAagPreferencesFromServer":true,"userDbBackupPreferenceType":"kBackupAllDatabases","additionalHostParams":[{"enableSystemBackup":true,"hostId":8,"volumeGuids":["volumeGuid1"]}],"backupDbVolumesOnly":true,"incrementalBackupAfterRestart":true,"indexingPolicy":{"enableIndexing":true,"includePaths":["~/dir1"],"excludePaths":["~/dir2"]},"objects":[{"id":6}]},"absolutelyExtraneousField1":null}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There is an unsupported field in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField1'\n`))
			})

			It("but there are multiple extranous fields", func() {
				args := []string{
					"protection-group",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--name=update-protection-group`,
					`--policy-id=xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx`,
					`--environment=kPhysical`,
					`--priority=kLow`,
					`--description=Protection Group`,
					`--start-time={"hour":0,"minute":0,"timeZone":"America/Los_Angeles","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--end-time-usecs=26`,
					`--last-modified-timestamp-usecs=26`,
					`--alert-policy={"backupRunStatus":["kSuccess","kFailure","kSlaViolation","kWarning"],"alertTargets":[{"emailAddress":"alert1@domain.com","language":"en-us","recipientType":"kTo"}],"raiseObjectLevelFailureAlert":true,"raiseObjectLevelFailureAlertAfterLastAttempt":true,"raiseObjectLevelFailureAlertAfterEachAttempt":true,"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--sla=[{"backupRunType":"kIncremental","slaMinutes":1,"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--qos-policy=kBackupHDD`,
					`--abort-in-blackouts=true`,
					`--pause-in-blackouts=true`,
					`--is-paused=true`,
					`--advanced-configs=[{"key":"configKey","value":"configValue","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--physical-params={"protectionType":"kFile","volumeProtectionTypeParams":{"objects":[{"id":3,"volumeGuids":["volumeGuid1"],"enableSystemBackup":true,"excludedVssWriters":["writerName1","writerName2"]}],"indexingPolicy":{"enableIndexing":true,"includePaths":["~/dir1"],"excludePaths":["~/dir2"]},"performSourceSideDeduplication":true,"quiesce":true,"continueOnQuiesceFailure":true,"incrementalBackupAfterRestart":true,"prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"dedupExclusionSourceIds":[26,27],"excludedVssWriters":["writerName1","writerName2"],"cobmrBackup":true},"fileProtectionTypeParams":{"excludedVssWriters":["writerName1","writerName2"],"objects":[{"excludedVssWriters":["writerName1","writerName2"],"id":2,"filePaths":[{"includedPath":"~/dir1/","excludedPaths":["~/dir2"],"skipNestedVolumes":true}],"usesPathLevelSkipNestedVolumeSetting":true,"nestedVolumeTypesToSkip":["volume1"],"followNasSymlinkTarget":true,"metadataFilePath":"~/dir3"}],"indexingPolicy":{"enableIndexing":true,"includePaths":["~/dir1"],"excludePaths":["~/dir2"]},"performSourceSideDeduplication":true,"performBrickBasedDeduplication":true,"taskTimeouts":[{"timeoutMins":26,"backupType":"kRegular"}],"quiesce":true,"continueOnQuiesceFailure":true,"cobmrBackup":true,"prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"dedupExclusionSourceIds":[26,27],"globalExcludePaths":["~/dir1"],"globalExcludeFS":["~/dir2"],"ignorableErrors":["kEOF","kNonExistent"],"allowParallelRuns":true},"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--mssql-params={"fileProtectionTypeParams":{"aagBackupPreferenceType":"kPrimaryReplicaOnly","advancedSettings":{"clonedDbBackupStatus":"kError","dbBackupIfNotOnlineStatus":"kError","missingDbBackupStatus":"kError","offlineRestoringDbBackupStatus":"kError","readOnlyDbBackupStatus":"kError","reportAllNonAutoprotectDbErrors":"kError"},"backupSystemDbs":true,"excludeFilters":[{"filterString":"filterString","isRegularExpression":false}],"fullBackupsCopyOnly":true,"logBackupNumStreams":38,"logBackupWithClause":"backupWithClause","prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"useAagPreferencesFromServer":true,"userDbBackupPreferenceType":"kBackupAllDatabases","additionalHostParams":[{"disableSourceSideDeduplication":true,"hostId":26}],"objects":[{"id":6}],"performSourceSideDeduplication":true},"nativeProtectionTypeParams":{"aagBackupPreferenceType":"kPrimaryReplicaOnly","advancedSettings":{"clonedDbBackupStatus":"kError","dbBackupIfNotOnlineStatus":"kError","missingDbBackupStatus":"kError","offlineRestoringDbBackupStatus":"kError","readOnlyDbBackupStatus":"kError","reportAllNonAutoprotectDbErrors":"kError"},"backupSystemDbs":true,"excludeFilters":[{"filterString":"filterString","isRegularExpression":false}],"fullBackupsCopyOnly":true,"logBackupNumStreams":38,"logBackupWithClause":"backupWithClause","prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"useAagPreferencesFromServer":true,"userDbBackupPreferenceType":"kBackupAllDatabases","numStreams":38,"objects":[{"id":6}],"withClause":"withClause"},"protectionType":"kFile","volumeProtectionTypeParams":{"aagBackupPreferenceType":"kPrimaryReplicaOnly","advancedSettings":{"clonedDbBackupStatus":"kError","dbBackupIfNotOnlineStatus":"kError","missingDbBackupStatus":"kError","offlineRestoringDbBackupStatus":"kError","readOnlyDbBackupStatus":"kError","reportAllNonAutoprotectDbErrors":"kError"},"backupSystemDbs":true,"excludeFilters":[{"filterString":"filterString","isRegularExpression":false}],"fullBackupsCopyOnly":true,"logBackupNumStreams":38,"logBackupWithClause":"backupWithClause","prePostScript":{"preScript":{"path":"~/script1","params":"param1","timeoutSecs":1,"isActive":true,"continueOnError":true},"postScript":{"path":"~/script2","params":"param2","timeoutSecs":1,"isActive":true}},"useAagPreferencesFromServer":true,"userDbBackupPreferenceType":"kBackupAllDatabases","additionalHostParams":[{"enableSystemBackup":true,"hostId":8,"volumeGuids":["volumeGuid1"]}],"backupDbVolumesOnly":true,"incrementalBackupAfterRestart":true,"indexingPolicy":{"enableIndexing":true,"includePaths":["~/dir1"],"excludePaths":["~/dir2"]},"objects":[{"id":6}]},"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There are multiple unsupported fields in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField[12], #\.(\[0\]\.)?absolutelyExtraneousField[12]'\n`))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PUT"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--name=update-protection-group`,
					`--policy-id=xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx`,
					`--environment=kPhysical`,
					`--priority=kLow`,
					`--description=Protection Group`,
					`--start-time={"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}`,
					`--end-time-usecs=26`,
					`--last-modified-timestamp-usecs=26`,
					`--alert-policy={"backupRunStatus": ["kSuccess","kFailure","kSlaViolation","kWarning"], "alertTargets": [{"emailAddress": "alert1@domain.com", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}`,
					`--sla=[{"backupRunType": "kIncremental", "slaMinutes": 1}]`,
					`--qos-policy=kBackupHDD`,
					`--abort-in-blackouts=true`,
					`--pause-in-blackouts=true`,
					`--is-paused=true`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--physical-params={"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 3, "volumeGuids": ["volumeGuid1"], "enableSystemBackup": true, "excludedVssWriters": ["writerName1","writerName2"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "excludedVssWriters": ["writerName1","writerName2"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["writerName1","writerName2"], "objects": [{"excludedVssWriters": ["writerName1","writerName2"], "id": 2, "filePaths": [{"includedPath": "~/dir1/", "excludedPaths": ["~/dir2"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["volume1"], "followNasSymlinkTarget": true, "metadataFilePath": "~/dir3"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "globalExcludePaths": ["~/dir1"], "globalExcludeFS": ["~/dir2"], "ignorableErrors": ["kEOF","kNonExistent"], "allowParallelRuns": true}}`,
					`--mssql-params={"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26}], "objects": [{"id": 6}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 6}], "withClause": "withClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 8, "volumeGuids": ["volumeGuid1"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "objects": [{"id": 6}]}}`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-group",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--name=update-protection-group`,
					`--policy-id=xxxxxxxxxxxxxxxx:xxxxxxxxxxxxx:xx`,
					`--environment=kPhysical`,
					`--priority=kLow`,
					`--description=Protection Group`,
					`--start-time={"hour": 0, "minute": 0, "timeZone": "America/Los_Angeles"}`,
					`--end-time-usecs=26`,
					`--last-modified-timestamp-usecs=26`,
					`--alert-policy={"backupRunStatus": ["kSuccess","kFailure","kSlaViolation","kWarning"], "alertTargets": [{"emailAddress": "alert1@domain.com", "language": "en-us", "recipientType": "kTo"}], "raiseObjectLevelFailureAlert": true, "raiseObjectLevelFailureAlertAfterLastAttempt": true, "raiseObjectLevelFailureAlertAfterEachAttempt": true}`,
					`--sla=[{"backupRunType": "kIncremental", "slaMinutes": 1}]`,
					`--qos-policy=kBackupHDD`,
					`--abort-in-blackouts=true`,
					`--pause-in-blackouts=true`,
					`--is-paused=true`,
					`--advanced-configs=[{"key": "configKey", "value": "configValue"}]`,
					`--physical-params={"protectionType": "kFile", "volumeProtectionTypeParams": {"objects": [{"id": 3, "volumeGuids": ["volumeGuid1"], "enableSystemBackup": true, "excludedVssWriters": ["writerName1","writerName2"]}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "quiesce": true, "continueOnQuiesceFailure": true, "incrementalBackupAfterRestart": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "excludedVssWriters": ["writerName1","writerName2"], "cobmrBackup": true}, "fileProtectionTypeParams": {"excludedVssWriters": ["writerName1","writerName2"], "objects": [{"excludedVssWriters": ["writerName1","writerName2"], "id": 2, "filePaths": [{"includedPath": "~/dir1/", "excludedPaths": ["~/dir2"], "skipNestedVolumes": true}], "usesPathLevelSkipNestedVolumeSetting": true, "nestedVolumeTypesToSkip": ["volume1"], "followNasSymlinkTarget": true, "metadataFilePath": "~/dir3"}], "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "performSourceSideDeduplication": true, "performBrickBasedDeduplication": true, "taskTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "quiesce": true, "continueOnQuiesceFailure": true, "cobmrBackup": true, "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "dedupExclusionSourceIds": [26,27], "globalExcludePaths": ["~/dir1"], "globalExcludeFS": ["~/dir2"], "ignorableErrors": ["kEOF","kNonExistent"], "allowParallelRuns": true}}`,
					`--mssql-params={"fileProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"disableSourceSideDeduplication": true, "hostId": 26}], "objects": [{"id": 6}], "performSourceSideDeduplication": true}, "nativeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "numStreams": 38, "objects": [{"id": 6}], "withClause": "withClause"}, "protectionType": "kFile", "volumeProtectionTypeParams": {"aagBackupPreferenceType": "kPrimaryReplicaOnly", "advancedSettings": {"clonedDbBackupStatus": "kError", "dbBackupIfNotOnlineStatus": "kError", "missingDbBackupStatus": "kError", "offlineRestoringDbBackupStatus": "kError", "readOnlyDbBackupStatus": "kError", "reportAllNonAutoprotectDbErrors": "kError"}, "backupSystemDbs": true, "excludeFilters": [{"filterString": "filterString", "isRegularExpression": false}], "fullBackupsCopyOnly": true, "logBackupNumStreams": 38, "logBackupWithClause": "backupWithClause", "prePostScript": {"preScript": {"path": "~/script1", "params": "param1", "timeoutSecs": 1, "isActive": true, "continueOnError": true}, "postScript": {"path": "~/script2", "params": "param2", "timeoutSecs": 1, "isActive": true}}, "useAagPreferencesFromServer": true, "userDbBackupPreferenceType": "kBackupAllDatabases", "additionalHostParams": [{"enableSystemBackup": true, "hostId": 8, "volumeGuids": ["volumeGuid1"]}], "backupDbVolumesOnly": true, "incrementalBackupAfterRestart": true, "indexingPolicy": {"enableIndexing": true, "includePaths": ["~/dir1"], "excludePaths": ["~/dir2"]}, "objects": [{"id": 6}]}}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-group",
					"update",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-group delete` command", func() {
		var (
			operationPath = "/data-protect/protection-groups/testString"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("DELETE"))
					requestCallback(req)
					res.WriteHeader(204)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"delete",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--delete-snapshots=true`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"delete",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--delete-snapshots=true`,
					`--output=json`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				Expect(out).ToNot(BeNil())
				Expect(string(out)).To(Equal("\"\"\n"))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("DELETE"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group",
					"delete",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--delete-snapshots=true`,
					`--force`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-group",
					"delete",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--delete-snapshots=true`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-group",
					"delete",
					`--force`,
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-group-run list` command", func() {
		var (
			operationPath = "/data-protect/protection-groups/testString/runs"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runs": [{"id": "testString", "protectionGroupInstanceId": 26, "protectionGroupId": "testString", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString"}, "originProtectionGroupId": "testString", "protectionGroupName": "testString", "isLocalSnapshotsDeleted": true, "objects": [{"object": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isCloudArchivalDirect": true, "hasLocalSnapshot": true, "environment": "testString", "externallyTriggeredBackupTag": "testString"}], "totalRuns": 38}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group-run",
					"list",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--run-id=11:111`,
					`--start-time-usecs=26`,
					`--end-time-usecs=26`,
					`--run-types=kAll,kHydrateCDP,kSystem,kStorageArraySnapshot,kIncremental,kFull,kLog`,
					`--include-object-details=true`,
					`--local-backup-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--replication-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--archival-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--cloud-spin-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--num-runs=26`,
					`--exclude-non-restorable-runs=false`,
					`--run-tags=tag1`,
					`--use-cached-data=true`,
					`--filter-by-end-time=true`,
					`--snapshot-target-types=Local,Archival,RpaasArchival,StorageArraySnapshot,Remote`,
					`--only-return-successful-copy-run=true`,
					`--filter-by-copy-task-end-time=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group-run",
					"list",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--run-id=11:111`,
					`--start-time-usecs=26`,
					`--end-time-usecs=26`,
					`--run-types=kAll,kHydrateCDP,kSystem,kStorageArraySnapshot,kIncremental,kFull,kLog`,
					`--include-object-details=true`,
					`--local-backup-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--replication-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--archival-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--cloud-spin-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--num-runs=26`,
					`--exclude-non-restorable-runs=false`,
					`--run-tags=tag1`,
					`--use-cached-data=true`,
					`--filter-by-end-time=true`,
					`--snapshot-target-types=Local,Archival,RpaasArchival,StorageArraySnapshot,Remote`,
					`--only-return-successful-copy-run=true`,
					`--filter-by-copy-task-end-time=true`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"runs": [{"id": "testString", "protectionGroupInstanceId": 26, "protectionGroupId": "testString", "isReplicationRun": true, "originClusterIdentifier": {"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString"}, "originProtectionGroupId": "testString", "protectionGroupName": "testString", "isLocalSnapshotsDeleted": true, "objects": [{"object": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "localSnapshotInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "originalBackupInfo": {"snapshotInfo": {"snapshotId": "testString", "status": "kInProgress", "statusMessage": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "indexingTaskId": "testString", "statsTaskId": "testString", "warnings": ["testString"], "isManuallyDeleted": true, "expiryTimeUsecs": 26, "totalFileCount": 26, "backupFileCount": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "failedAttempts": [{"startTimeUsecs": 26, "endTimeUsecs": 26, "admittedTimeUsecs": 26, "permitGrantTimeUsecs": 26, "queueDurationUsecs": 26, "snapshotCreationTimeUsecs": 26, "status": "Accepted", "stats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "progressTaskId": "testString", "message": "testString"}]}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true}], "localBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "originalBackupInfo": {"runType": "kRegular", "isSlaViolated": true, "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "messages": ["testString"], "successfulObjectsCount": 26, "skippedObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "localSnapshotStats": {"logicalSizeBytes": 26, "bytesWritten": 26, "bytesRead": 26}, "indexingTaskId": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "dataLock": "Compliance", "localTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}}, "replicationInfo": {"replicationTargetResults": [{"clusterId": 26, "clusterIncarnationId": 26, "clusterName": "testString", "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "status": "Accepted", "message": "testString", "percentageCompleted": 38, "stats": {"logicalSizeBytes": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "replicationTaskId": "testString", "entriesChanged": 26, "isInBound": true, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "multiObjectReplication": true}]}, "archivalInfo": {"archivalTargetResults": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "runType": "kRegular", "isSlaViolated": true, "snapshotId": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "queuedTimeUsecs": 26, "isIncremental": true, "isForeverIncremental": true, "isCadArchive": true, "status": "Accepted", "message": "testString", "progressTaskId": "testString", "statsTaskId": "testString", "indexingTaskId": "testString", "successfulObjectsCount": 26, "failedObjectsCount": 26, "cancelledObjectsCount": 26, "successfulAppObjectsCount": 38, "failedAppObjectsCount": 38, "cancelledAppObjectsCount": 38, "stats": {"logicalSizeBytes": 26, "bytesRead": 26, "logicalBytesTransferred": 26, "physicalBytesTransferred": 26, "avgLogicalTransferRateBps": 26, "fileWalkDone": true, "totalFileCount": 26, "backupFileCount": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true, "wormProperties": {"isArchiveWormCompliant": true, "wormNonComplianceReason": "testString", "wormExpiryTimeUsecs": 26}}]}, "cloudSpinInfo": {"cloudSpinTargetResults": [{"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "message": "testString", "stats": {"physicalBytesTransferred": 26}, "isManuallyDeleted": true, "expiryTimeUsecs": 26, "cloudspinTaskId": "testString", "progressTaskId": "testString", "dataLockConstraints": {"mode": "Compliance", "expiryTimeUsecs": 26}, "onLegalHold": true}]}, "onLegalHold": true, "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "isCloudArchivalDirect": true, "hasLocalSnapshot": true, "environment": "testString", "externallyTriggeredBackupTag": "testString"}], "totalRuns": 38}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group-run",
					"list",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--run-id=11:111`,
					`--start-time-usecs=26`,
					`--end-time-usecs=26`,
					`--run-types=kAll,kHydrateCDP,kSystem,kStorageArraySnapshot,kIncremental,kFull,kLog`,
					`--include-object-details=true`,
					`--local-backup-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--replication-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--archival-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--cloud-spin-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--num-runs=26`,
					`--exclude-non-restorable-runs=false`,
					`--run-tags=tag1`,
					`--use-cached-data=true`,
					`--filter-by-end-time=true`,
					`--snapshot-target-types=Local,Archival,RpaasArchival,StorageArraySnapshot,Remote`,
					`--only-return-successful-copy-run=true`,
					`--filter-by-copy-task-end-time=true`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-group-run",
					"list",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--run-id=11:111`,
					`--start-time-usecs=26`,
					`--end-time-usecs=26`,
					`--run-types=kAll,kHydrateCDP,kSystem,kStorageArraySnapshot,kIncremental,kFull,kLog`,
					`--include-object-details=true`,
					`--local-backup-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--replication-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--archival-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--cloud-spin-run-status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,Paused`,
					`--num-runs=26`,
					`--exclude-non-restorable-runs=false`,
					`--run-tags=tag1`,
					`--use-cached-data=true`,
					`--filter-by-end-time=true`,
					`--snapshot-target-types=Local,Archival,RpaasArchival,StorageArraySnapshot,Remote`,
					`--only-return-successful-copy-run=true`,
					`--filter-by-copy-task-end-time=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-group-run",
					"list",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-group-run update` command", func() {
		var (
			operationPath = "/data-protect/protection-groups/testString/runs"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PUT"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(207)
					fmt.Fprintf(res, "%s", `{"successfulRunIds": ["testString"], "failedRuns": [{"runId": "testString", "errorMessage": "testString"}]}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group-run",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--update-protection-group-run-params=[{"runId": "11:111", "localSnapshotConfig": {"enableLegalHold": true, "deleteSnapshot": true, "dataLock": "Compliance", "daysToKeep": 26}, "replicationSnapshotConfig": {"newSnapshotConfig": [{"id": 26, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "updateExistingSnapshotConfig": [{"id": 4, "name": "update-snapshot-config", "enableLegalHold": true, "deleteSnapshot": true, "resync": true, "dataLock": "Compliance", "daysToKeep": 26}]}, "archivalSnapshotConfig": {"newSnapshotConfig": [{"id": 2, "archivalTargetType": "Tape", "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnlyFullySuccessful": true}], "updateExistingSnapshotConfig": [{"id": 3, "name": "update-snapshot-config", "archivalTargetType": "Tape", "enableLegalHold": true, "deleteSnapshot": true, "resync": true, "dataLock": "Compliance", "daysToKeep": 26}]}}]`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group-run",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--update-protection-group-run-params=[{"runId": "11:111", "localSnapshotConfig": {"enableLegalHold": true, "deleteSnapshot": true, "dataLock": "Compliance", "daysToKeep": 26}, "replicationSnapshotConfig": {"newSnapshotConfig": [{"id": 26, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "updateExistingSnapshotConfig": [{"id": 4, "name": "update-snapshot-config", "enableLegalHold": true, "deleteSnapshot": true, "resync": true, "dataLock": "Compliance", "daysToKeep": 26}]}, "archivalSnapshotConfig": {"newSnapshotConfig": [{"id": 2, "archivalTargetType": "Tape", "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnlyFullySuccessful": true}], "updateExistingSnapshotConfig": [{"id": 3, "name": "update-snapshot-config", "archivalTargetType": "Tape", "enableLegalHold": true, "deleteSnapshot": true, "resync": true, "dataLock": "Compliance", "daysToKeep": 26}]}}]`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"successfulRunIds": ["testString"], "failedRuns": [{"runId": "testString", "errorMessage": "testString"}]}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
			It("but there is a single extranous field", func() {
				args := []string{
					"protection-group-run",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--update-protection-group-run-params=[{"runId":"11:111","localSnapshotConfig":{"enableLegalHold":true,"deleteSnapshot":true,"dataLock":"Compliance","daysToKeep":26},"replicationSnapshotConfig":{"newSnapshotConfig":[{"id":26,"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}}],"updateExistingSnapshotConfig":[{"id":4,"name":"update-snapshot-config","enableLegalHold":true,"deleteSnapshot":true,"resync":true,"dataLock":"Compliance","daysToKeep":26}]},"archivalSnapshotConfig":{"newSnapshotConfig":[{"id":2,"archivalTargetType":"Tape","retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnlyFullySuccessful":true}],"updateExistingSnapshotConfig":[{"id":3,"name":"update-snapshot-config","archivalTargetType":"Tape","enableLegalHold":true,"deleteSnapshot":true,"resync":true,"dataLock":"Compliance","daysToKeep":26}]},"absolutelyExtraneousField1":null}]`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There is an unsupported field in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField1'\n`))
			})

			It("but there are multiple extranous fields", func() {
				args := []string{
					"protection-group-run",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--update-protection-group-run-params=[{"runId":"11:111","localSnapshotConfig":{"enableLegalHold":true,"deleteSnapshot":true,"dataLock":"Compliance","daysToKeep":26},"replicationSnapshotConfig":{"newSnapshotConfig":[{"id":26,"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}}],"updateExistingSnapshotConfig":[{"id":4,"name":"update-snapshot-config","enableLegalHold":true,"deleteSnapshot":true,"resync":true,"dataLock":"Compliance","daysToKeep":26}]},"archivalSnapshotConfig":{"newSnapshotConfig":[{"id":2,"archivalTargetType":"Tape","retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnlyFullySuccessful":true}],"updateExistingSnapshotConfig":[{"id":3,"name":"update-snapshot-config","archivalTargetType":"Tape","enableLegalHold":true,"deleteSnapshot":true,"resync":true,"dataLock":"Compliance","daysToKeep":26}]},"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There are multiple unsupported fields in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField[12], #\.(\[0\]\.)?absolutelyExtraneousField[12]'\n`))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PUT"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group-run",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--update-protection-group-run-params=[{"runId": "11:111", "localSnapshotConfig": {"enableLegalHold": true, "deleteSnapshot": true, "dataLock": "Compliance", "daysToKeep": 26}, "replicationSnapshotConfig": {"newSnapshotConfig": [{"id": 26, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "updateExistingSnapshotConfig": [{"id": 4, "name": "update-snapshot-config", "enableLegalHold": true, "deleteSnapshot": true, "resync": true, "dataLock": "Compliance", "daysToKeep": 26}]}, "archivalSnapshotConfig": {"newSnapshotConfig": [{"id": 2, "archivalTargetType": "Tape", "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnlyFullySuccessful": true}], "updateExistingSnapshotConfig": [{"id": 3, "name": "update-snapshot-config", "archivalTargetType": "Tape", "enableLegalHold": true, "deleteSnapshot": true, "resync": true, "dataLock": "Compliance", "daysToKeep": 26}]}}]`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-group-run",
					"update",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--update-protection-group-run-params=[{"runId": "11:111", "localSnapshotConfig": {"enableLegalHold": true, "deleteSnapshot": true, "dataLock": "Compliance", "daysToKeep": 26}, "replicationSnapshotConfig": {"newSnapshotConfig": [{"id": 26, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "updateExistingSnapshotConfig": [{"id": 4, "name": "update-snapshot-config", "enableLegalHold": true, "deleteSnapshot": true, "resync": true, "dataLock": "Compliance", "daysToKeep": 26}]}, "archivalSnapshotConfig": {"newSnapshotConfig": [{"id": 2, "archivalTargetType": "Tape", "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnlyFullySuccessful": true}], "updateExistingSnapshotConfig": [{"id": 3, "name": "update-snapshot-config", "archivalTargetType": "Tape", "enableLegalHold": true, "deleteSnapshot": true, "resync": true, "dataLock": "Compliance", "daysToKeep": 26}]}}]`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-group-run",
					"update",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-group-run create` command", func() {
		var (
			operationPath = "/data-protect/protection-groups/runId/runs"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"protectionGroupId": "testString"}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group-run",
					"create",
					`--id=runId`,
					`--xibm-tenant-id=tenantId`,
					`--run-type=kRegular`,
					`--objects=[{"id": 4, "appIds": [26,27], "physicalParams": {"metadataFilePath": "~/metadata"}}]`,
					`--targets-config={"usePolicyDefaults": false, "replications": [{"id": 26, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "archivals": [{"id": 26, "archivalTargetType": "Tape", "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnlyFullySuccessful": true}], "cloudReplications": [{"awsTarget": {"region": 26, "sourceId": 26}, "azureTarget": {"resourceGroup": 26, "sourceId": 26}, "targetType": "AWS", "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}]}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group-run",
					"create",
					`--id=runId`,
					`--xibm-tenant-id=tenantId`,
					`--run-type=kRegular`,
					`--objects=[{"id": 4, "appIds": [26,27], "physicalParams": {"metadataFilePath": "~/metadata"}}]`,
					`--targets-config={"usePolicyDefaults": false, "replications": [{"id": 26, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "archivals": [{"id": 26, "archivalTargetType": "Tape", "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnlyFullySuccessful": true}], "cloudReplications": [{"awsTarget": {"region": 26, "sourceId": 26}, "azureTarget": {"resourceGroup": 26, "sourceId": 26}, "targetType": "AWS", "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}]}`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"protectionGroupId": "testString"}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
			It("but there is a single extranous field", func() {
				args := []string{
					"protection-group-run",
					"create",
					`--id=runId`,
					`--xibm-tenant-id=tenantId`,
					`--run-type=kRegular`,
					`--objects=[{"id":4,"appIds":[26,27],"physicalParams":{"metadataFilePath":"~/metadata"},"absolutelyExtraneousField1":null}]`,
					`--targets-config={"usePolicyDefaults":false,"replications":[{"id":26,"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}}],"archivals":[{"id":26,"archivalTargetType":"Tape","retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnlyFullySuccessful":true}],"cloudReplications":[{"awsTarget":{"region":26,"sourceId":26},"azureTarget":{"resourceGroup":26,"sourceId":26},"targetType":"AWS","retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}}],"absolutelyExtraneousField1":null}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There is an unsupported field in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField1'\n`))
			})

			It("but there are multiple extranous fields", func() {
				args := []string{
					"protection-group-run",
					"create",
					`--id=runId`,
					`--xibm-tenant-id=tenantId`,
					`--run-type=kRegular`,
					`--objects=[{"id":4,"appIds":[26,27],"physicalParams":{"metadataFilePath":"~/metadata"},"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--targets-config={"usePolicyDefaults":false,"replications":[{"id":26,"retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}}],"archivals":[{"id":26,"archivalTargetType":"Tape","retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}},"copyOnlyFullySuccessful":true}],"cloudReplications":[{"awsTarget":{"region":26,"sourceId":26},"azureTarget":{"resourceGroup":26,"sourceId":26},"targetType":"AWS","retention":{"unit":"Days","duration":1,"dataLockConfig":{"mode":"Compliance","unit":"Days","duration":1,"enableWormOnExternalTarget":true}}}],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There are multiple unsupported fields in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField[12], #\.(\[0\]\.)?absolutelyExtraneousField[12]'\n`))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group-run",
					"create",
					`--id=runId`,
					`--xibm-tenant-id=tenantId`,
					`--run-type=kRegular`,
					`--objects=[{"id": 4, "appIds": [26,27], "physicalParams": {"metadataFilePath": "~/metadata"}}]`,
					`--targets-config={"usePolicyDefaults": false, "replications": [{"id": 26, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "archivals": [{"id": 26, "archivalTargetType": "Tape", "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnlyFullySuccessful": true}], "cloudReplications": [{"awsTarget": {"region": 26, "sourceId": 26}, "azureTarget": {"resourceGroup": 26, "sourceId": 26}, "targetType": "AWS", "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}]}`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-group-run",
					"create",
					`--id=runId`,
					`--xibm-tenant-id=tenantId`,
					`--run-type=kRegular`,
					`--objects=[{"id": 4, "appIds": [26,27], "physicalParams": {"metadataFilePath": "~/metadata"}}]`,
					`--targets-config={"usePolicyDefaults": false, "replications": [{"id": 26, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}], "archivals": [{"id": 26, "archivalTargetType": "Tape", "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnlyFullySuccessful": true}], "cloudReplications": [{"awsTarget": {"region": 26, "sourceId": 26}, "azureTarget": {"resourceGroup": 26, "sourceId": 26}, "targetType": "AWS", "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}}]}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-group-run",
					"create",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protection-group-run perform-action` command", func() {
		var (
			operationPath = "/data-protect/protection-groups/runId/runs/actions"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"action": "Pause", "pauseParams": [{"runId": "testString", "error": "testString"}], "resumeParams": [{"runId": "testString", "error": "testString"}], "cancelParams": [{"runId": "testString"}]}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group-run",
					"perform-action",
					`--id=runId`,
					`--xibm-tenant-id=tenantId`,
					`--action=Pause`,
					`--pause-params=[{"runId": "11:111"}]`,
					`--resume-params=[{"runId": "11:111"}]`,
					`--cancel-params=[{"runId": "11:111", "localTaskId": "123:456:789", "objectIds": [26,27], "replicationTaskId": ["123:456:789"], "archivalTaskId": ["123:456:789"], "cloudSpinTaskId": ["123:456:789"]}]`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group-run",
					"perform-action",
					`--id=runId`,
					`--xibm-tenant-id=tenantId`,
					`--action=Pause`,
					`--pause-params=[{"runId": "11:111"}]`,
					`--resume-params=[{"runId": "11:111"}]`,
					`--cancel-params=[{"runId": "11:111", "localTaskId": "123:456:789", "objectIds": [26,27], "replicationTaskId": ["123:456:789"], "archivalTaskId": ["123:456:789"], "cloudSpinTaskId": ["123:456:789"]}]`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"action": "Pause", "pauseParams": [{"runId": "testString", "error": "testString"}], "resumeParams": [{"runId": "testString", "error": "testString"}], "cancelParams": [{"runId": "testString"}]}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
			It("but there is a single extranous field", func() {
				args := []string{
					"protection-group-run",
					"perform-action",
					`--id=runId`,
					`--xibm-tenant-id=tenantId`,
					`--action=Pause`,
					`--pause-params=[{"runId":"11:111","absolutelyExtraneousField1":null}]`,
					`--resume-params=[{"runId":"11:111","absolutelyExtraneousField1":null}]`,
					`--cancel-params=[{"runId":"11:111","localTaskId":"123:456:789","objectIds":[26,27],"replicationTaskId":["123:456:789"],"archivalTaskId":["123:456:789"],"cloudSpinTaskId":["123:456:789"],"absolutelyExtraneousField1":null}]`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There is an unsupported field in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField1'\n`))
			})

			It("but there are multiple extranous fields", func() {
				args := []string{
					"protection-group-run",
					"perform-action",
					`--id=runId`,
					`--xibm-tenant-id=tenantId`,
					`--action=Pause`,
					`--pause-params=[{"runId":"11:111","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--resume-params=[{"runId":"11:111","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--cancel-params=[{"runId":"11:111","localTaskId":"123:456:789","objectIds":[26,27],"replicationTaskId":["123:456:789"],"archivalTaskId":["123:456:789"],"cloudSpinTaskId":["123:456:789"],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There are multiple unsupported fields in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField[12], #\.(\[0\]\.)?absolutelyExtraneousField[12]'\n`))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protection-group-run",
					"perform-action",
					`--id=runId`,
					`--xibm-tenant-id=tenantId`,
					`--action=Pause`,
					`--pause-params=[{"runId": "11:111"}]`,
					`--resume-params=[{"runId": "11:111"}]`,
					`--cancel-params=[{"runId": "11:111", "localTaskId": "123:456:789", "objectIds": [26,27], "replicationTaskId": ["123:456:789"], "archivalTaskId": ["123:456:789"], "cloudSpinTaskId": ["123:456:789"]}]`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protection-group-run",
					"perform-action",
					`--id=runId`,
					`--xibm-tenant-id=tenantId`,
					`--action=Pause`,
					`--pause-params=[{"runId": "11:111"}]`,
					`--resume-params=[{"runId": "11:111"}]`,
					`--cancel-params=[{"runId": "11:111", "localTaskId": "123:456:789", "objectIds": [26,27], "replicationTaskId": ["123:456:789"], "archivalTaskId": ["123:456:789"], "cloudSpinTaskId": ["123:456:789"]}]`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protection-group-run",
					"perform-action",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `recovery list` command", func() {
		var (
			operationPath = "/data-protect/recoveries"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"recoveries": [{"id": "testString", "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "progressTaskId": "testString", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "creationInfo": {"userName": "testString"}, "canTearDown": true, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "testString", "messages": ["testString"], "isParentRecovery": true, "parentRecoveryId": "testString", "retrieveArchiveTasks": [{"taskUid": "testString", "uptierExpiryTimes": [26]}], "isMultiStageRestore": true, "physicalParams": {"objects": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 26, "name": "testString"}, "volumeMapping": [{"sourceVolumeGuid": "testString", "destinationVolumeGuid": "testString"}], "forceUnmountVolume": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": true, "originalTargetConfig": {"serverCredentials": {"username": "testString", "password": "testString"}}, "newTargetConfig": {"mountTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "serverCredentials": {"username": "testString", "password": "testString"}}, "readOnlyMount": true, "volumeNames": ["testString"], "mountedVolumeMapping": [{"originalVolume": "testString", "mountedVolume": "testString", "fileSystemType": "testString"}], "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "restoreToOriginalPaths": true, "overwriteExisting": true, "alternateRestoreDirectory": "testString", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": true, "saveSuccessFiles": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 26, "filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "downloadFilePath": "testString"}, "systemRecoveryParams": {"fullNasPath": "testString"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26, "aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true, "sqlTargetParams": {"newSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "dataFileDirectoryLocation": "testString", "databaseName": "testString", "host": {"id": 26, "name": "testString"}, "instanceName": "testString", "logFileDirectoryLocation": "testString"}, "originalSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "captureTailLogs": true, "dataFileDirectoryLocation": "testString", "logFileDirectoryLocation": "testString", "newDatabaseName": "testString"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}]}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"recovery",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--ids=11:111:11`,
					`--return-only-child-recoveries=true`,
					`--start-time-usecs=26`,
					`--end-time-usecs=26`,
					`--snapshot-target-type=Local,Archival,RpaasArchival,StorageArraySnapshot,Remote`,
					`--archival-target-type=Tape,Cloud,Nas`,
					`--snapshot-environments=kPhysical,kSQL`,
					`--status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,LegalHold`,
					`--recovery-actions=RecoverVMs,RecoverFiles,InstantVolumeMount,RecoverVmDisks,RecoverVApps,RecoverVAppTemplates,UptierSnapshot,RecoverRDS,RecoverAurora,RecoverS3Buckets,RecoverRDSPostgres,RecoverAzureSQL,RecoverApps,CloneApps,RecoverNasVolume,RecoverPhysicalVolumes,RecoverSystem,RecoverExchangeDbs,CloneAppView,RecoverSanVolumes,RecoverSanGroup,RecoverMailbox,RecoverOneDrive,RecoverSharePoint,RecoverPublicFolders,RecoverMsGroup,RecoverMsTeam,ConvertToPst,DownloadChats,RecoverMailboxCSM,RecoverOneDriveCSM,RecoverSharePointCSM,RecoverNamespaces,RecoverObjects,RecoverSfdcObjects,RecoverSfdcOrg,RecoverSfdcRecords,DownloadFilesAndFolders,CloneVMs,CloneView,CloneRefreshApp,CloneVMsToView,ConvertAndDeployVMs,DeployVMs`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"recovery",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--ids=11:111:11`,
					`--return-only-child-recoveries=true`,
					`--start-time-usecs=26`,
					`--end-time-usecs=26`,
					`--snapshot-target-type=Local,Archival,RpaasArchival,StorageArraySnapshot,Remote`,
					`--archival-target-type=Tape,Cloud,Nas`,
					`--snapshot-environments=kPhysical,kSQL`,
					`--status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,LegalHold`,
					`--recovery-actions=RecoverVMs,RecoverFiles,InstantVolumeMount,RecoverVmDisks,RecoverVApps,RecoverVAppTemplates,UptierSnapshot,RecoverRDS,RecoverAurora,RecoverS3Buckets,RecoverRDSPostgres,RecoverAzureSQL,RecoverApps,CloneApps,RecoverNasVolume,RecoverPhysicalVolumes,RecoverSystem,RecoverExchangeDbs,CloneAppView,RecoverSanVolumes,RecoverSanGroup,RecoverMailbox,RecoverOneDrive,RecoverSharePoint,RecoverPublicFolders,RecoverMsGroup,RecoverMsTeam,ConvertToPst,DownloadChats,RecoverMailboxCSM,RecoverOneDriveCSM,RecoverSharePointCSM,RecoverNamespaces,RecoverObjects,RecoverSfdcObjects,RecoverSfdcOrg,RecoverSfdcRecords,DownloadFilesAndFolders,CloneVMs,CloneView,CloneRefreshApp,CloneVMsToView,ConvertAndDeployVMs,DeployVMs`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"recoveries": [{"id": "testString", "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "progressTaskId": "testString", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "creationInfo": {"userName": "testString"}, "canTearDown": true, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "testString", "messages": ["testString"], "isParentRecovery": true, "parentRecoveryId": "testString", "retrieveArchiveTasks": [{"taskUid": "testString", "uptierExpiryTimes": [26]}], "isMultiStageRestore": true, "physicalParams": {"objects": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 26, "name": "testString"}, "volumeMapping": [{"sourceVolumeGuid": "testString", "destinationVolumeGuid": "testString"}], "forceUnmountVolume": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": true, "originalTargetConfig": {"serverCredentials": {"username": "testString", "password": "testString"}}, "newTargetConfig": {"mountTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "serverCredentials": {"username": "testString", "password": "testString"}}, "readOnlyMount": true, "volumeNames": ["testString"], "mountedVolumeMapping": [{"originalVolume": "testString", "mountedVolume": "testString", "fileSystemType": "testString"}], "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "restoreToOriginalPaths": true, "overwriteExisting": true, "alternateRestoreDirectory": "testString", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": true, "saveSuccessFiles": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 26, "filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "downloadFilePath": "testString"}, "systemRecoveryParams": {"fullNasPath": "testString"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26, "aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true, "sqlTargetParams": {"newSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "dataFileDirectoryLocation": "testString", "databaseName": "testString", "host": {"id": 26, "name": "testString"}, "instanceName": "testString", "logFileDirectoryLocation": "testString"}, "originalSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "captureTailLogs": true, "dataFileDirectoryLocation": "testString", "logFileDirectoryLocation": "testString", "newDatabaseName": "testString"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}]}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"recovery",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--ids=11:111:11`,
					`--return-only-child-recoveries=true`,
					`--start-time-usecs=26`,
					`--end-time-usecs=26`,
					`--snapshot-target-type=Local,Archival,RpaasArchival,StorageArraySnapshot,Remote`,
					`--archival-target-type=Tape,Cloud,Nas`,
					`--snapshot-environments=kPhysical,kSQL`,
					`--status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,LegalHold`,
					`--recovery-actions=RecoverVMs,RecoverFiles,InstantVolumeMount,RecoverVmDisks,RecoverVApps,RecoverVAppTemplates,UptierSnapshot,RecoverRDS,RecoverAurora,RecoverS3Buckets,RecoverRDSPostgres,RecoverAzureSQL,RecoverApps,CloneApps,RecoverNasVolume,RecoverPhysicalVolumes,RecoverSystem,RecoverExchangeDbs,CloneAppView,RecoverSanVolumes,RecoverSanGroup,RecoverMailbox,RecoverOneDrive,RecoverSharePoint,RecoverPublicFolders,RecoverMsGroup,RecoverMsTeam,ConvertToPst,DownloadChats,RecoverMailboxCSM,RecoverOneDriveCSM,RecoverSharePointCSM,RecoverNamespaces,RecoverObjects,RecoverSfdcObjects,RecoverSfdcOrg,RecoverSfdcRecords,DownloadFilesAndFolders,CloneVMs,CloneView,CloneRefreshApp,CloneVMsToView,ConvertAndDeployVMs,DeployVMs`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"recovery",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--ids=11:111:11`,
					`--return-only-child-recoveries=true`,
					`--start-time-usecs=26`,
					`--end-time-usecs=26`,
					`--snapshot-target-type=Local,Archival,RpaasArchival,StorageArraySnapshot,Remote`,
					`--archival-target-type=Tape,Cloud,Nas`,
					`--snapshot-environments=kPhysical,kSQL`,
					`--status=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,LegalHold`,
					`--recovery-actions=RecoverVMs,RecoverFiles,InstantVolumeMount,RecoverVmDisks,RecoverVApps,RecoverVAppTemplates,UptierSnapshot,RecoverRDS,RecoverAurora,RecoverS3Buckets,RecoverRDSPostgres,RecoverAzureSQL,RecoverApps,CloneApps,RecoverNasVolume,RecoverPhysicalVolumes,RecoverSystem,RecoverExchangeDbs,CloneAppView,RecoverSanVolumes,RecoverSanGroup,RecoverMailbox,RecoverOneDrive,RecoverSharePoint,RecoverPublicFolders,RecoverMsGroup,RecoverMsTeam,ConvertToPst,DownloadChats,RecoverMailboxCSM,RecoverOneDriveCSM,RecoverSharePointCSM,RecoverNamespaces,RecoverObjects,RecoverSfdcObjects,RecoverSfdcOrg,RecoverSfdcRecords,DownloadFilesAndFolders,CloneVMs,CloneView,CloneRefreshApp,CloneVMsToView,ConvertAndDeployVMs,DeployVMs`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"recovery",
					"list",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `recovery create` command", func() {
		var (
			operationPath = "/data-protect/recoveries"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "testString", "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "progressTaskId": "testString", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "creationInfo": {"userName": "testString"}, "canTearDown": true, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "testString", "messages": ["testString"], "isParentRecovery": true, "parentRecoveryId": "testString", "retrieveArchiveTasks": [{"taskUid": "testString", "uptierExpiryTimes": [26]}], "isMultiStageRestore": true, "physicalParams": {"objects": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 26, "name": "testString"}, "volumeMapping": [{"sourceVolumeGuid": "testString", "destinationVolumeGuid": "testString"}], "forceUnmountVolume": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": true, "originalTargetConfig": {"serverCredentials": {"username": "testString", "password": "testString"}}, "newTargetConfig": {"mountTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "serverCredentials": {"username": "testString", "password": "testString"}}, "readOnlyMount": true, "volumeNames": ["testString"], "mountedVolumeMapping": [{"originalVolume": "testString", "mountedVolume": "testString", "fileSystemType": "testString"}], "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "restoreToOriginalPaths": true, "overwriteExisting": true, "alternateRestoreDirectory": "testString", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": true, "saveSuccessFiles": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 26, "filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "downloadFilePath": "testString"}, "systemRecoveryParams": {"fullNasPath": "testString"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26, "aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true, "sqlTargetParams": {"newSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "dataFileDirectoryLocation": "testString", "databaseName": "testString", "host": {"id": 26, "name": "testString"}, "instanceName": "testString", "logFileDirectoryLocation": "testString"}, "originalSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "captureTailLogs": true, "dataFileDirectoryLocation": "testString", "logFileDirectoryLocation": "testString", "newDatabaseName": "testString"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"recovery",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-recovery`,
					`--snapshot-environment=kPhysical`,
					`--physical-params={"objects": [{"snapshotId": "snapshotID", "pointInTimeUsecs": 26, "protectionGroupId": "protectionGroupID", "protectionGroupName": "protectionGroupName", "recoverFromStandby": true}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 26}, "volumeMapping": [{"sourceVolumeGuid": "sourceVolumeGuid", "destinationVolumeGuid": "destinationVolumeGuid"}], "forceUnmountVolume": true, "vlanConfig": {"id": 38, "disableVlan": true}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": true, "originalTargetConfig": {"serverCredentials": {"username": "Username", "password": "Password"}}, "newTargetConfig": {"mountTarget": {"id": 26}, "serverCredentials": {"username": "Username", "password": "Password"}}, "readOnlyMount": true, "volumeNames": ["volume1"], "vlanConfig": {"id": 38, "disableVlan": true}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "~/folder1", "isDirectory": true, "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 26}, "restoreToOriginalPaths": true, "overwriteExisting": true, "alternateRestoreDirectory": "~/dirAlt", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": true, "saveSuccessFiles": true, "vlanConfig": {"id": 38, "disableVlan": true}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 26, "filesAndFolders": [{"absolutePath": "~/folder1", "isDirectory": true, "isViewFileRecovery": true}], "downloadFilePath": "~/downloadFile"}, "systemRecoveryParams": {"fullNasPath": "~/nas"}}`,
					`--mssql-params={"recoverAppParams": [{"snapshotId": "snapshotId", "pointInTimeUsecs": 26, "protectionGroupId": "protectionGroupId", "protectionGroupName": "protectionGroupName", "recoverFromStandby": true, "aagInfo": {"name": "aagInfoName", "objectId": 26}, "hostInfo": {"id": "hostInfoId", "name": "hostInfoName", "environment": "kPhysical"}, "isEncrypted": true, "sqlTargetParams": {"newSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "LogRecoveryWithClause", "nativeRecoveryWithClause": "RecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "~/dir1", "filenamePattern": ".sql"}], "withNoRecovery": true, "dataFileDirectoryLocation": "~/dir1", "databaseName": "recovery-database-sql", "host": {"id": 26}, "instanceName": "database-instance-1", "logFileDirectoryLocation": "~/dir2"}, "originalSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "LogRecoveryWithClause", "nativeRecoveryWithClause": "RecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "~/dir1", "filenamePattern": ".sql"}], "withNoRecovery": true, "captureTailLogs": true, "dataFileDirectoryLocation": "~/dir1", "logFileDirectoryLocation": "~/dir2", "newDatabaseName": "recovery-database-sql-new"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 38, "disableVlan": true}}`,
					`--request-initiator-type=UIUser`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"recovery",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-recovery`,
					`--snapshot-environment=kPhysical`,
					`--physical-params={"objects": [{"snapshotId": "snapshotID", "pointInTimeUsecs": 26, "protectionGroupId": "protectionGroupID", "protectionGroupName": "protectionGroupName", "recoverFromStandby": true}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 26}, "volumeMapping": [{"sourceVolumeGuid": "sourceVolumeGuid", "destinationVolumeGuid": "destinationVolumeGuid"}], "forceUnmountVolume": true, "vlanConfig": {"id": 38, "disableVlan": true}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": true, "originalTargetConfig": {"serverCredentials": {"username": "Username", "password": "Password"}}, "newTargetConfig": {"mountTarget": {"id": 26}, "serverCredentials": {"username": "Username", "password": "Password"}}, "readOnlyMount": true, "volumeNames": ["volume1"], "vlanConfig": {"id": 38, "disableVlan": true}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "~/folder1", "isDirectory": true, "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 26}, "restoreToOriginalPaths": true, "overwriteExisting": true, "alternateRestoreDirectory": "~/dirAlt", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": true, "saveSuccessFiles": true, "vlanConfig": {"id": 38, "disableVlan": true}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 26, "filesAndFolders": [{"absolutePath": "~/folder1", "isDirectory": true, "isViewFileRecovery": true}], "downloadFilePath": "~/downloadFile"}, "systemRecoveryParams": {"fullNasPath": "~/nas"}}`,
					`--mssql-params={"recoverAppParams": [{"snapshotId": "snapshotId", "pointInTimeUsecs": 26, "protectionGroupId": "protectionGroupId", "protectionGroupName": "protectionGroupName", "recoverFromStandby": true, "aagInfo": {"name": "aagInfoName", "objectId": 26}, "hostInfo": {"id": "hostInfoId", "name": "hostInfoName", "environment": "kPhysical"}, "isEncrypted": true, "sqlTargetParams": {"newSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "LogRecoveryWithClause", "nativeRecoveryWithClause": "RecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "~/dir1", "filenamePattern": ".sql"}], "withNoRecovery": true, "dataFileDirectoryLocation": "~/dir1", "databaseName": "recovery-database-sql", "host": {"id": 26}, "instanceName": "database-instance-1", "logFileDirectoryLocation": "~/dir2"}, "originalSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "LogRecoveryWithClause", "nativeRecoveryWithClause": "RecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "~/dir1", "filenamePattern": ".sql"}], "withNoRecovery": true, "captureTailLogs": true, "dataFileDirectoryLocation": "~/dir1", "logFileDirectoryLocation": "~/dir2", "newDatabaseName": "recovery-database-sql-new"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 38, "disableVlan": true}}`,
					`--request-initiator-type=UIUser`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"id": "testString", "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "progressTaskId": "testString", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "creationInfo": {"userName": "testString"}, "canTearDown": true, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "testString", "messages": ["testString"], "isParentRecovery": true, "parentRecoveryId": "testString", "retrieveArchiveTasks": [{"taskUid": "testString", "uptierExpiryTimes": [26]}], "isMultiStageRestore": true, "physicalParams": {"objects": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 26, "name": "testString"}, "volumeMapping": [{"sourceVolumeGuid": "testString", "destinationVolumeGuid": "testString"}], "forceUnmountVolume": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": true, "originalTargetConfig": {"serverCredentials": {"username": "testString", "password": "testString"}}, "newTargetConfig": {"mountTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "serverCredentials": {"username": "testString", "password": "testString"}}, "readOnlyMount": true, "volumeNames": ["testString"], "mountedVolumeMapping": [{"originalVolume": "testString", "mountedVolume": "testString", "fileSystemType": "testString"}], "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "restoreToOriginalPaths": true, "overwriteExisting": true, "alternateRestoreDirectory": "testString", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": true, "saveSuccessFiles": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 26, "filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "downloadFilePath": "testString"}, "systemRecoveryParams": {"fullNasPath": "testString"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26, "aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true, "sqlTargetParams": {"newSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "dataFileDirectoryLocation": "testString", "databaseName": "testString", "host": {"id": 26, "name": "testString"}, "instanceName": "testString", "logFileDirectoryLocation": "testString"}, "originalSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "captureTailLogs": true, "dataFileDirectoryLocation": "testString", "logFileDirectoryLocation": "testString", "newDatabaseName": "testString"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
			It("but there is a single extranous field", func() {
				args := []string{
					"recovery",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-recovery`,
					`--snapshot-environment=kPhysical`,
					`--physical-params={"objects":[{"snapshotId":"snapshotID","pointInTimeUsecs":26,"protectionGroupId":"protectionGroupID","protectionGroupName":"protectionGroupName","recoverFromStandby":true}],"recoveryAction":"RecoverPhysicalVolumes","recoverVolumeParams":{"targetEnvironment":"kPhysical","physicalTargetParams":{"mountTarget":{"id":26},"volumeMapping":[{"sourceVolumeGuid":"sourceVolumeGuid","destinationVolumeGuid":"destinationVolumeGuid"}],"forceUnmountVolume":true,"vlanConfig":{"id":38,"disableVlan":true}}},"mountVolumeParams":{"targetEnvironment":"kPhysical","physicalTargetParams":{"mountToOriginalTarget":true,"originalTargetConfig":{"serverCredentials":{"username":"Username","password":"Password"}},"newTargetConfig":{"mountTarget":{"id":26},"serverCredentials":{"username":"Username","password":"Password"}},"readOnlyMount":true,"volumeNames":["volume1"],"vlanConfig":{"id":38,"disableVlan":true}}},"recoverFileAndFolderParams":{"filesAndFolders":[{"absolutePath":"~/folder1","isDirectory":true,"isViewFileRecovery":true}],"targetEnvironment":"kPhysical","physicalTargetParams":{"recoverTarget":{"id":26},"restoreToOriginalPaths":true,"overwriteExisting":true,"alternateRestoreDirectory":"~/dirAlt","preserveAttributes":true,"preserveTimestamps":true,"preserveAcls":true,"continueOnError":true,"saveSuccessFiles":true,"vlanConfig":{"id":38,"disableVlan":true},"restoreEntityType":"kRegular"}},"downloadFileAndFolderParams":{"expiryTimeUsecs":26,"filesAndFolders":[{"absolutePath":"~/folder1","isDirectory":true,"isViewFileRecovery":true}],"downloadFilePath":"~/downloadFile"},"systemRecoveryParams":{"fullNasPath":"~/nas"},"absolutelyExtraneousField1":null}`,
					`--mssql-params={"recoverAppParams":[{"snapshotId":"snapshotId","pointInTimeUsecs":26,"protectionGroupId":"protectionGroupId","protectionGroupName":"protectionGroupName","recoverFromStandby":true,"aagInfo":{"name":"aagInfoName","objectId":26},"hostInfo":{"id":"hostInfoId","name":"hostInfoName","environment":"kPhysical"},"isEncrypted":true,"sqlTargetParams":{"newSourceConfig":{"keepCdc":true,"multiStageRestoreOptions":{"enableAutoSync":true,"enableMultiStageRestore":true},"nativeLogRecoveryWithClause":"LogRecoveryWithClause","nativeRecoveryWithClause":"RecoveryWithClause","overwritingPolicy":"FailIfExists","replayEntireLastLog":true,"restoreTimeUsecs":26,"secondaryDataFilesDirList":[{"directory":"~/dir1","filenamePattern":".sql"}],"withNoRecovery":true,"dataFileDirectoryLocation":"~/dir1","databaseName":"recovery-database-sql","host":{"id":26},"instanceName":"database-instance-1","logFileDirectoryLocation":"~/dir2"},"originalSourceConfig":{"keepCdc":true,"multiStageRestoreOptions":{"enableAutoSync":true,"enableMultiStageRestore":true},"nativeLogRecoveryWithClause":"LogRecoveryWithClause","nativeRecoveryWithClause":"RecoveryWithClause","overwritingPolicy":"FailIfExists","replayEntireLastLog":true,"restoreTimeUsecs":26,"secondaryDataFilesDirList":[{"directory":"~/dir1","filenamePattern":".sql"}],"withNoRecovery":true,"captureTailLogs":true,"dataFileDirectoryLocation":"~/dir1","logFileDirectoryLocation":"~/dir2","newDatabaseName":"recovery-database-sql-new"},"recoverToNewSource":true},"targetEnvironment":"kSQL"}],"recoveryAction":"RecoverApps","vlanConfig":{"id":38,"disableVlan":true},"absolutelyExtraneousField1":null}`,
					`--request-initiator-type=UIUser`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There is an unsupported field in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField1'\n`))
			})

			It("but there are multiple extranous fields", func() {
				args := []string{
					"recovery",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-recovery`,
					`--snapshot-environment=kPhysical`,
					`--physical-params={"objects":[{"snapshotId":"snapshotID","pointInTimeUsecs":26,"protectionGroupId":"protectionGroupID","protectionGroupName":"protectionGroupName","recoverFromStandby":true}],"recoveryAction":"RecoverPhysicalVolumes","recoverVolumeParams":{"targetEnvironment":"kPhysical","physicalTargetParams":{"mountTarget":{"id":26},"volumeMapping":[{"sourceVolumeGuid":"sourceVolumeGuid","destinationVolumeGuid":"destinationVolumeGuid"}],"forceUnmountVolume":true,"vlanConfig":{"id":38,"disableVlan":true}}},"mountVolumeParams":{"targetEnvironment":"kPhysical","physicalTargetParams":{"mountToOriginalTarget":true,"originalTargetConfig":{"serverCredentials":{"username":"Username","password":"Password"}},"newTargetConfig":{"mountTarget":{"id":26},"serverCredentials":{"username":"Username","password":"Password"}},"readOnlyMount":true,"volumeNames":["volume1"],"vlanConfig":{"id":38,"disableVlan":true}}},"recoverFileAndFolderParams":{"filesAndFolders":[{"absolutePath":"~/folder1","isDirectory":true,"isViewFileRecovery":true}],"targetEnvironment":"kPhysical","physicalTargetParams":{"recoverTarget":{"id":26},"restoreToOriginalPaths":true,"overwriteExisting":true,"alternateRestoreDirectory":"~/dirAlt","preserveAttributes":true,"preserveTimestamps":true,"preserveAcls":true,"continueOnError":true,"saveSuccessFiles":true,"vlanConfig":{"id":38,"disableVlan":true},"restoreEntityType":"kRegular"}},"downloadFileAndFolderParams":{"expiryTimeUsecs":26,"filesAndFolders":[{"absolutePath":"~/folder1","isDirectory":true,"isViewFileRecovery":true}],"downloadFilePath":"~/downloadFile"},"systemRecoveryParams":{"fullNasPath":"~/nas"},"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--mssql-params={"recoverAppParams":[{"snapshotId":"snapshotId","pointInTimeUsecs":26,"protectionGroupId":"protectionGroupId","protectionGroupName":"protectionGroupName","recoverFromStandby":true,"aagInfo":{"name":"aagInfoName","objectId":26},"hostInfo":{"id":"hostInfoId","name":"hostInfoName","environment":"kPhysical"},"isEncrypted":true,"sqlTargetParams":{"newSourceConfig":{"keepCdc":true,"multiStageRestoreOptions":{"enableAutoSync":true,"enableMultiStageRestore":true},"nativeLogRecoveryWithClause":"LogRecoveryWithClause","nativeRecoveryWithClause":"RecoveryWithClause","overwritingPolicy":"FailIfExists","replayEntireLastLog":true,"restoreTimeUsecs":26,"secondaryDataFilesDirList":[{"directory":"~/dir1","filenamePattern":".sql"}],"withNoRecovery":true,"dataFileDirectoryLocation":"~/dir1","databaseName":"recovery-database-sql","host":{"id":26},"instanceName":"database-instance-1","logFileDirectoryLocation":"~/dir2"},"originalSourceConfig":{"keepCdc":true,"multiStageRestoreOptions":{"enableAutoSync":true,"enableMultiStageRestore":true},"nativeLogRecoveryWithClause":"LogRecoveryWithClause","nativeRecoveryWithClause":"RecoveryWithClause","overwritingPolicy":"FailIfExists","replayEntireLastLog":true,"restoreTimeUsecs":26,"secondaryDataFilesDirList":[{"directory":"~/dir1","filenamePattern":".sql"}],"withNoRecovery":true,"captureTailLogs":true,"dataFileDirectoryLocation":"~/dir1","logFileDirectoryLocation":"~/dir2","newDatabaseName":"recovery-database-sql-new"},"recoverToNewSource":true},"targetEnvironment":"kSQL"}],"recoveryAction":"RecoverApps","vlanConfig":{"id":38,"disableVlan":true},"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--request-initiator-type=UIUser`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There are multiple unsupported fields in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField[12], #\.(\[0\]\.)?absolutelyExtraneousField[12]'\n`))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"recovery",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-recovery`,
					`--snapshot-environment=kPhysical`,
					`--physical-params={"objects": [{"snapshotId": "snapshotID", "pointInTimeUsecs": 26, "protectionGroupId": "protectionGroupID", "protectionGroupName": "protectionGroupName", "recoverFromStandby": true}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 26}, "volumeMapping": [{"sourceVolumeGuid": "sourceVolumeGuid", "destinationVolumeGuid": "destinationVolumeGuid"}], "forceUnmountVolume": true, "vlanConfig": {"id": 38, "disableVlan": true}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": true, "originalTargetConfig": {"serverCredentials": {"username": "Username", "password": "Password"}}, "newTargetConfig": {"mountTarget": {"id": 26}, "serverCredentials": {"username": "Username", "password": "Password"}}, "readOnlyMount": true, "volumeNames": ["volume1"], "vlanConfig": {"id": 38, "disableVlan": true}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "~/folder1", "isDirectory": true, "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 26}, "restoreToOriginalPaths": true, "overwriteExisting": true, "alternateRestoreDirectory": "~/dirAlt", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": true, "saveSuccessFiles": true, "vlanConfig": {"id": 38, "disableVlan": true}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 26, "filesAndFolders": [{"absolutePath": "~/folder1", "isDirectory": true, "isViewFileRecovery": true}], "downloadFilePath": "~/downloadFile"}, "systemRecoveryParams": {"fullNasPath": "~/nas"}}`,
					`--mssql-params={"recoverAppParams": [{"snapshotId": "snapshotId", "pointInTimeUsecs": 26, "protectionGroupId": "protectionGroupId", "protectionGroupName": "protectionGroupName", "recoverFromStandby": true, "aagInfo": {"name": "aagInfoName", "objectId": 26}, "hostInfo": {"id": "hostInfoId", "name": "hostInfoName", "environment": "kPhysical"}, "isEncrypted": true, "sqlTargetParams": {"newSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "LogRecoveryWithClause", "nativeRecoveryWithClause": "RecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "~/dir1", "filenamePattern": ".sql"}], "withNoRecovery": true, "dataFileDirectoryLocation": "~/dir1", "databaseName": "recovery-database-sql", "host": {"id": 26}, "instanceName": "database-instance-1", "logFileDirectoryLocation": "~/dir2"}, "originalSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "LogRecoveryWithClause", "nativeRecoveryWithClause": "RecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "~/dir1", "filenamePattern": ".sql"}], "withNoRecovery": true, "captureTailLogs": true, "dataFileDirectoryLocation": "~/dir1", "logFileDirectoryLocation": "~/dir2", "newDatabaseName": "recovery-database-sql-new"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 38, "disableVlan": true}}`,
					`--request-initiator-type=UIUser`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"recovery",
					"create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-recovery`,
					`--snapshot-environment=kPhysical`,
					`--physical-params={"objects": [{"snapshotId": "snapshotID", "pointInTimeUsecs": 26, "protectionGroupId": "protectionGroupID", "protectionGroupName": "protectionGroupName", "recoverFromStandby": true}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 26}, "volumeMapping": [{"sourceVolumeGuid": "sourceVolumeGuid", "destinationVolumeGuid": "destinationVolumeGuid"}], "forceUnmountVolume": true, "vlanConfig": {"id": 38, "disableVlan": true}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": true, "originalTargetConfig": {"serverCredentials": {"username": "Username", "password": "Password"}}, "newTargetConfig": {"mountTarget": {"id": 26}, "serverCredentials": {"username": "Username", "password": "Password"}}, "readOnlyMount": true, "volumeNames": ["volume1"], "vlanConfig": {"id": 38, "disableVlan": true}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "~/folder1", "isDirectory": true, "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 26}, "restoreToOriginalPaths": true, "overwriteExisting": true, "alternateRestoreDirectory": "~/dirAlt", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": true, "saveSuccessFiles": true, "vlanConfig": {"id": 38, "disableVlan": true}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 26, "filesAndFolders": [{"absolutePath": "~/folder1", "isDirectory": true, "isViewFileRecovery": true}], "downloadFilePath": "~/downloadFile"}, "systemRecoveryParams": {"fullNasPath": "~/nas"}}`,
					`--mssql-params={"recoverAppParams": [{"snapshotId": "snapshotId", "pointInTimeUsecs": 26, "protectionGroupId": "protectionGroupId", "protectionGroupName": "protectionGroupName", "recoverFromStandby": true, "aagInfo": {"name": "aagInfoName", "objectId": 26}, "hostInfo": {"id": "hostInfoId", "name": "hostInfoName", "environment": "kPhysical"}, "isEncrypted": true, "sqlTargetParams": {"newSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "LogRecoveryWithClause", "nativeRecoveryWithClause": "RecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "~/dir1", "filenamePattern": ".sql"}], "withNoRecovery": true, "dataFileDirectoryLocation": "~/dir1", "databaseName": "recovery-database-sql", "host": {"id": 26}, "instanceName": "database-instance-1", "logFileDirectoryLocation": "~/dir2"}, "originalSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "LogRecoveryWithClause", "nativeRecoveryWithClause": "RecoveryWithClause", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "~/dir1", "filenamePattern": ".sql"}], "withNoRecovery": true, "captureTailLogs": true, "dataFileDirectoryLocation": "~/dir1", "logFileDirectoryLocation": "~/dir2", "newDatabaseName": "recovery-database-sql-new"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 38, "disableVlan": true}}`,
					`--request-initiator-type=UIUser`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"recovery",
					"create",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `recovery get` command", func() {
		var (
			operationPath = "/data-protect/recoveries/testString"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "testString", "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "progressTaskId": "testString", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "creationInfo": {"userName": "testString"}, "canTearDown": true, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "testString", "messages": ["testString"], "isParentRecovery": true, "parentRecoveryId": "testString", "retrieveArchiveTasks": [{"taskUid": "testString", "uptierExpiryTimes": [26]}], "isMultiStageRestore": true, "physicalParams": {"objects": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 26, "name": "testString"}, "volumeMapping": [{"sourceVolumeGuid": "testString", "destinationVolumeGuid": "testString"}], "forceUnmountVolume": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": true, "originalTargetConfig": {"serverCredentials": {"username": "testString", "password": "testString"}}, "newTargetConfig": {"mountTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "serverCredentials": {"username": "testString", "password": "testString"}}, "readOnlyMount": true, "volumeNames": ["testString"], "mountedVolumeMapping": [{"originalVolume": "testString", "mountedVolume": "testString", "fileSystemType": "testString"}], "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "restoreToOriginalPaths": true, "overwriteExisting": true, "alternateRestoreDirectory": "testString", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": true, "saveSuccessFiles": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 26, "filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "downloadFilePath": "testString"}, "systemRecoveryParams": {"fullNasPath": "testString"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26, "aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true, "sqlTargetParams": {"newSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "dataFileDirectoryLocation": "testString", "databaseName": "testString", "host": {"id": 26, "name": "testString"}, "instanceName": "testString", "logFileDirectoryLocation": "testString"}, "originalSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "captureTailLogs": true, "dataFileDirectoryLocation": "testString", "logFileDirectoryLocation": "testString", "newDatabaseName": "testString"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"recovery",
					"get",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"recovery",
					"get",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"id": "testString", "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "progressTaskId": "testString", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "creationInfo": {"userName": "testString"}, "canTearDown": true, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "testString", "messages": ["testString"], "isParentRecovery": true, "parentRecoveryId": "testString", "retrieveArchiveTasks": [{"taskUid": "testString", "uptierExpiryTimes": [26]}], "isMultiStageRestore": true, "physicalParams": {"objects": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 26, "name": "testString"}, "volumeMapping": [{"sourceVolumeGuid": "testString", "destinationVolumeGuid": "testString"}], "forceUnmountVolume": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": true, "originalTargetConfig": {"serverCredentials": {"username": "testString", "password": "testString"}}, "newTargetConfig": {"mountTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "serverCredentials": {"username": "testString", "password": "testString"}}, "readOnlyMount": true, "volumeNames": ["testString"], "mountedVolumeMapping": [{"originalVolume": "testString", "mountedVolume": "testString", "fileSystemType": "testString"}], "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "restoreToOriginalPaths": true, "overwriteExisting": true, "alternateRestoreDirectory": "testString", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": true, "saveSuccessFiles": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 26, "filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "downloadFilePath": "testString"}, "systemRecoveryParams": {"fullNasPath": "testString"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26, "aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true, "sqlTargetParams": {"newSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "dataFileDirectoryLocation": "testString", "databaseName": "testString", "host": {"id": 26, "name": "testString"}, "instanceName": "testString", "logFileDirectoryLocation": "testString"}, "originalSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "captureTailLogs": true, "dataFileDirectoryLocation": "testString", "logFileDirectoryLocation": "testString", "newDatabaseName": "testString"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"recovery",
					"get",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"recovery",
					"get",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"recovery",
					"get",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `recovery files-download` command", func() {
		var (
			operationPath = "/data-protect/recoveries/testString/download-files"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					res.WriteHeader(200)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"recovery",
					"files-download",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--start-offset=26`,
					`--length=26`,
					`--file-type=fileType`,
					`--source-name=sourceName`,
					`--start-time=startTime`,
					`--include-tenants=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"recovery",
					"files-download",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--start-offset=26`,
					`--length=26`,
					`--file-type=fileType`,
					`--source-name=sourceName`,
					`--start-time=startTime`,
					`--include-tenants=true`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				Expect(out).ToNot(BeNil())
				Expect(string(out)).To(Equal("\"\"\n"))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"recovery",
					"files-download",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--start-offset=26`,
					`--length=26`,
					`--file-type=fileType`,
					`--source-name=sourceName`,
					`--start-time=startTime`,
					`--include-tenants=true`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"recovery",
					"files-download",
					`--id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--start-offset=26`,
					`--length=26`,
					`--file-type=fileType`,
					`--source-name=sourceName`,
					`--start-time=startTime`,
					`--include-tenants=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"recovery",
					"files-download",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `data-source-connection list` command", func() {
		var (
			operationPath = "/data-source-connections"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"connectionId": "testString", "connectionName": "testString", "connectorIds": ["testString"], "registrationToken": "testString", "tenantId": "testString", "upgradingConnectorId": "testString"}]}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--connection-ids=connectionId1,connectionId2`,
					`--connection-names=connectionName1,connectionName2`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--connection-ids=connectionId1,connectionId2`,
					`--connection-names=connectionName1,connectionName2`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"connections": [{"connectionId": "testString", "connectionName": "testString", "connectorIds": ["testString"], "registrationToken": "testString", "tenantId": "testString", "upgradingConnectorId": "testString"}]}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--connection-ids=connectionId1,connectionId2`,
					`--connection-names=connectionName1,connectionName2`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"data-source-connection",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--connection-ids=connectionId1,connectionId2`,
					`--connection-names=connectionName1,connectionName2`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"data-source-connection",
					"list",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `data-source-connection create` command", func() {
		var (
			operationPath = "/data-source-connections"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"connectionId": "testString", "connectionName": "testString", "connectorIds": ["testString"], "registrationToken": "testString", "tenantId": "testString", "upgradingConnectorId": "testString"}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"create",
					`--connection-name=data-source-connection`,
					`--xibm-tenant-id=tenantId`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"create",
					`--connection-name=data-source-connection`,
					`--xibm-tenant-id=tenantId`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"connectionId": "testString", "connectionName": "testString", "connectorIds": ["testString"], "registrationToken": "testString", "tenantId": "testString", "upgradingConnectorId": "testString"}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"create",
					`--connection-name=data-source-connection`,
					`--xibm-tenant-id=tenantId`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"data-source-connection",
					"create",
					`--connection-name=data-source-connection`,
					`--xibm-tenant-id=tenantId`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"data-source-connection",
					"create",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `data-source-connection delete` command", func() {
		var (
			operationPath = "/data-source-connections/testString"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("DELETE"))
					requestCallback(req)
					res.WriteHeader(204)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"delete",
					`--connection-id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"delete",
					`--connection-id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--output=json`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				Expect(out).ToNot(BeNil())
				Expect(string(out)).To(Equal("\"\"\n"))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("DELETE"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"delete",
					`--connection-id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--force`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"data-source-connection",
					"delete",
					`--connection-id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"data-source-connection",
					"delete",
					`--force`,
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `data-source-connection patch` command", func() {
		var (
			operationPath = "/data-source-connections/connectionId"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PATCH"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connectionId": "testString", "connectionName": "testString", "connectorIds": ["testString"], "registrationToken": "testString", "tenantId": "testString", "upgradingConnectorId": "testString"}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"patch",
					`--connection-id=connectionId`,
					`--xibm-tenant-id=tenantId`,
					`--connection-name=connectionName`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"patch",
					`--connection-id=connectionId`,
					`--xibm-tenant-id=tenantId`,
					`--connection-name=connectionName`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"connectionId": "testString", "connectionName": "testString", "connectorIds": ["testString"], "registrationToken": "testString", "tenantId": "testString", "upgradingConnectorId": "testString"}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PATCH"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"patch",
					`--connection-id=connectionId`,
					`--xibm-tenant-id=tenantId`,
					`--connection-name=connectionName`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"data-source-connection",
					"patch",
					`--connection-id=connectionId`,
					`--xibm-tenant-id=tenantId`,
					`--connection-name=connectionName`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"data-source-connection",
					"patch",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `data-source-connection registration-token-generate` command", func() {
		var (
			operationPath = "/data-source-connections/testString/registrationToken"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"testString"`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"registration-token-generate",
					`--connection-id=testString`,
					`--xibm-tenant-id=tenantId`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"registration-token-generate",
					`--connection-id=testString`,
					`--xibm-tenant-id=tenantId`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `"testString"`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connection",
					"registration-token-generate",
					`--connection-id=testString`,
					`--xibm-tenant-id=tenantId`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"data-source-connection",
					"registration-token-generate",
					`--connection-id=testString`,
					`--xibm-tenant-id=tenantId`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"data-source-connection",
					"registration-token-generate",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `data-source-connector list` command", func() {
		var (
			operationPath = "/data-source-connectors"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connectors": [{"clusterSideIp": "testString", "connectionId": "testString", "connectorId": "testString", "connectorName": "testString", "connectivityStatus": {"isConnected": true, "lastConnectedTimestampSecs": 26, "message": "testString"}, "softwareVersion": "testString", "tenantSideIp": "testString", "upgradeStatus": {"lastStatusFetchedTimestampMsecs": 26, "message": "testString", "startTimestampMSecs": 26, "status": "NotStarted"}}]}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connector",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--connector-ids=connectorId1,connectorId2`,
					`--connector-names=connectionName1,connectionName2`,
					`--connection-id=testString`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connector",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--connector-ids=connectorId1,connectorId2`,
					`--connector-names=connectionName1,connectionName2`,
					`--connection-id=testString`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"connectors": [{"clusterSideIp": "testString", "connectionId": "testString", "connectorId": "testString", "connectorName": "testString", "connectivityStatus": {"isConnected": true, "lastConnectedTimestampSecs": 26, "message": "testString"}, "softwareVersion": "testString", "tenantSideIp": "testString", "upgradeStatus": {"lastStatusFetchedTimestampMsecs": 26, "message": "testString", "startTimestampMSecs": 26, "status": "NotStarted"}}]}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connector",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--connector-ids=connectorId1,connectorId2`,
					`--connector-names=connectionName1,connectionName2`,
					`--connection-id=testString`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"data-source-connector",
					"list",
					`--xibm-tenant-id=tenantId`,
					`--connector-ids=connectorId1,connectorId2`,
					`--connector-names=connectionName1,connectionName2`,
					`--connection-id=testString`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"data-source-connector",
					"list",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `data-source-connector delete` command", func() {
		var (
			operationPath = "/data-source-connectors/connectorId"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("DELETE"))
					requestCallback(req)
					res.WriteHeader(204)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connector",
					"delete",
					`--connector-id=connectorId`,
					`--xibm-tenant-id=tenantId`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connector",
					"delete",
					`--connector-id=connectorId`,
					`--xibm-tenant-id=tenantId`,
					`--output=json`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				Expect(out).ToNot(BeNil())
				Expect(string(out)).To(Equal("\"\"\n"))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("DELETE"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connector",
					"delete",
					`--connector-id=connectorId`,
					`--xibm-tenant-id=tenantId`,
					`--force`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"data-source-connector",
					"delete",
					`--connector-id=connectorId`,
					`--xibm-tenant-id=tenantId`,
					`--force`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"data-source-connector",
					"delete",
					`--force`,
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `data-source-connector patch` command", func() {
		var (
			operationPath = "/data-source-connectors/connectorID"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PATCH"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clusterSideIp": "testString", "connectionId": "testString", "connectorId": "testString", "connectorName": "testString", "connectivityStatus": {"isConnected": true, "lastConnectedTimestampSecs": 26, "message": "testString"}, "softwareVersion": "testString", "tenantSideIp": "testString", "upgradeStatus": {"lastStatusFetchedTimestampMsecs": 26, "message": "testString", "startTimestampMSecs": 26, "status": "NotStarted"}}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connector",
					"patch",
					`--connector-id=connectorID`,
					`--xibm-tenant-id=tenantId`,
					`--connector-name=connectorName`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connector",
					"patch",
					`--connector-id=connectorID`,
					`--xibm-tenant-id=tenantId`,
					`--connector-name=connectorName`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"clusterSideIp": "testString", "connectionId": "testString", "connectorId": "testString", "connectorName": "testString", "connectivityStatus": {"isConnected": true, "lastConnectedTimestampSecs": 26, "message": "testString"}, "softwareVersion": "testString", "tenantSideIp": "testString", "upgradeStatus": {"lastStatusFetchedTimestampMsecs": 26, "message": "testString", "startTimestampMSecs": 26, "status": "NotStarted"}}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("PATCH"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"data-source-connector",
					"patch",
					`--connector-id=connectorID`,
					`--xibm-tenant-id=tenantId`,
					`--connector-name=connectorName`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"data-source-connector",
					"patch",
					`--connector-id=connectorID`,
					`--xibm-tenant-id=tenantId`,
					`--connector-name=connectorName`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"data-source-connector",
					"patch",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `agent-download` command", func() {
		var (
			operationPath = "/data-protect/agents/download"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/octet-stream")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `This is a mock binary response.`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"agent-download",
					`--xibm-tenant-id=tenantId`,
					`--platform=kWindows`,
					`--linux-params={"packageType": "kScript"}`,
					`--output-file=tempdir/example-output.txt`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})
			It("but there is a single extranous field", func() {
				args := []string{
					"agent-download",
					`--xibm-tenant-id=tenantId`,
					`--platform=kWindows`,
					`--linux-params={"packageType":"kScript","absolutelyExtraneousField1":null}`,
					`--output-file=tempdir/example-output.txt`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There is an unsupported field in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField1'\n`))
			})

			It("but there are multiple extranous fields", func() {
				args := []string{
					"agent-download",
					`--xibm-tenant-id=tenantId`,
					`--platform=kWindows`,
					`--linux-params={"packageType":"kScript","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--output-file=tempdir/example-output.txt`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There are multiple unsupported fields in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField[12], #\.(\[0\]\.)?absolutelyExtraneousField[12]'\n`))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"agent-download",
					`--xibm-tenant-id=tenantId`,
					`--platform=kWindows`,
					`--linux-params={"packageType": "kScript"}`,
					`--output-file=tempdir/example-output.txt`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"agent-download",
					`--xibm-tenant-id=tenantId`,
					`--platform=kWindows`,
					`--linux-params={"packageType": "kScript"}`,
					`--output-file=tempdir/example-output.txt`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"agent-download",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `connector-metadata-get` command", func() {
		var (
			operationPath = "/data-source-connectors/metadata"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connectorImageMetadata": {"connectorImageFileList": [{"imageType": "VSI", "url": "testString"}]}}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"connector-metadata-get",
					`--xibm-tenant-id=tenantId`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"connector-metadata-get",
					`--xibm-tenant-id=tenantId`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"connectorImageMetadata": {"connectorImageFileList": [{"imageType": "VSI", "url": "testString"}]}}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"connector-metadata-get",
					`--xibm-tenant-id=tenantId`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"connector-metadata-get",
					`--xibm-tenant-id=tenantId`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"connector-metadata-get",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `object-snapshots-list` command", func() {
		var (
			operationPath = "/data-protect/objects/26/snapshots"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"snapshots": [{"awsParams": {"protectionType": "kAgent"}, "azureParams": {"protectionType": "kAgent"}, "clusterId": 26, "clusterIncarnationId": 26, "elastifileParams": {"supportedNasMountProtocols": ["kNoProtocol"]}, "environment": "kVMware", "expiryTimeUsecs": 26, "externalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "flashbladeParams": {"supportedNasMountProtocols": ["kNfs"]}, "genericNasParams": {"supportedNasMountProtocols": ["kNoProtocol"]}, "gpfsParams": {"supportedNasMountProtocols": ["kNoProtocol"]}, "hasDataLock": true, "hypervParams": {"protectionType": "kAuto"}, "id": "testString", "indexingStatus": "InProgress", "isilonParams": {"supportedNasMountProtocols": ["kNfs"]}, "netappParams": {"supportedNasMountProtocols": ["kNfs"], "volumeExtendedStyle": "kFlexVol", "volumeType": "ReadWrite"}, "objectId": 26, "objectName": "testString", "onLegalHold": true, "ownershipContext": "Local", "physicalParams": {"enableSystemBackup": true, "protectionType": "kFile"}, "protectionGroupId": "testString", "protectionGroupName": "testString", "protectionGroupRunId": "testString", "regionId": "testString", "runInstanceId": 26, "runStartTimeUsecs": 26, "runType": "kRegular", "sfdcParams": {"recordsAdded": 26, "recordsModified": 26, "recordsRemoved": 26}, "snapshotTargetType": "Local", "snapshotTimestampUsecs": 26, "sourceGroupId": "testString", "sourceId": 26, "storageDomainId": 26}]}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"object-snapshots-list",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--from-time-usecs=26`,
					`--to-time-usecs=26`,
					`--run-start-from-time-usecs=26`,
					`--run-start-to-time-usecs=26`,
					`--snapshot-actions=RecoverVMs,RecoverFiles,InstantVolumeMount,RecoverVmDisks,MountVolumes,RecoverVApps,RecoverRDS,RecoverAurora,RecoverS3Buckets,RecoverApps,RecoverNasVolume,RecoverPhysicalVolumes,RecoverSystem,RecoverSanVolumes,RecoverNamespaces,RecoverObjects,DownloadFilesAndFolders,RecoverPublicFolders,RecoverVAppTemplates,RecoverMailbox,RecoverOneDrive,RecoverMsTeam,RecoverMsGroup,RecoverSharePoint,ConvertToPst,RecoverSfdcRecords,RecoverAzureSQL,DownloadChats,RecoverRDSPostgres,RecoverMailboxCSM,RecoverOneDriveCSM,RecoverSharePointCSM`,
					`--run-types=kRegular,kFull,kLog,kSystem,kHydrateCDP,kStorageArraySnapshot`,
					`--protection-group-ids=protectionGroupId1`,
					`--run-instance-ids=26,27`,
					`--region-ids=regionId1`,
					`--object-action-keys=kVMware,kHyperV,kVCD,kAzure,kGCP,kKVM,kAcropolis,kAWS,kAWSNative,kAwsS3,kAWSSnapshotManager,kRDSSnapshotManager,kAuroraSnapshotManager,kAwsRDSPostgresBackup,kAwsRDSPostgres,kAwsAuroraPostgres,kAzureNative,kAzureSQL,kAzureSnapshotManager,kPhysical,kPhysicalFiles,kGPFS,kElastifile,kNetapp,kGenericNas,kIsilon,kFlashBlade,kPure,kIbmFlashSystem,kSQL,kExchange,kAD,kOracle,kView,kRemoteAdapter,kO365,kO365PublicFolders,kO365Teams,kO365Group,kO365Exchange,kO365OneDrive,kO365Sharepoint,kKubernetes,kCassandra,kMongoDB,kCouchbase,kHdfs,kHive,kHBase,kSAPHANA,kUDA,kSfdc,kO365ExchangeCSM,kO365OneDriveCSM,kO365SharepointCSM`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"object-snapshots-list",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--from-time-usecs=26`,
					`--to-time-usecs=26`,
					`--run-start-from-time-usecs=26`,
					`--run-start-to-time-usecs=26`,
					`--snapshot-actions=RecoverVMs,RecoverFiles,InstantVolumeMount,RecoverVmDisks,MountVolumes,RecoverVApps,RecoverRDS,RecoverAurora,RecoverS3Buckets,RecoverApps,RecoverNasVolume,RecoverPhysicalVolumes,RecoverSystem,RecoverSanVolumes,RecoverNamespaces,RecoverObjects,DownloadFilesAndFolders,RecoverPublicFolders,RecoverVAppTemplates,RecoverMailbox,RecoverOneDrive,RecoverMsTeam,RecoverMsGroup,RecoverSharePoint,ConvertToPst,RecoverSfdcRecords,RecoverAzureSQL,DownloadChats,RecoverRDSPostgres,RecoverMailboxCSM,RecoverOneDriveCSM,RecoverSharePointCSM`,
					`--run-types=kRegular,kFull,kLog,kSystem,kHydrateCDP,kStorageArraySnapshot`,
					`--protection-group-ids=protectionGroupId1`,
					`--run-instance-ids=26,27`,
					`--region-ids=regionId1`,
					`--object-action-keys=kVMware,kHyperV,kVCD,kAzure,kGCP,kKVM,kAcropolis,kAWS,kAWSNative,kAwsS3,kAWSSnapshotManager,kRDSSnapshotManager,kAuroraSnapshotManager,kAwsRDSPostgresBackup,kAwsRDSPostgres,kAwsAuroraPostgres,kAzureNative,kAzureSQL,kAzureSnapshotManager,kPhysical,kPhysicalFiles,kGPFS,kElastifile,kNetapp,kGenericNas,kIsilon,kFlashBlade,kPure,kIbmFlashSystem,kSQL,kExchange,kAD,kOracle,kView,kRemoteAdapter,kO365,kO365PublicFolders,kO365Teams,kO365Group,kO365Exchange,kO365OneDrive,kO365Sharepoint,kKubernetes,kCassandra,kMongoDB,kCouchbase,kHdfs,kHive,kHBase,kSAPHANA,kUDA,kSfdc,kO365ExchangeCSM,kO365OneDriveCSM,kO365SharepointCSM`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"snapshots": [{"awsParams": {"protectionType": "kAgent"}, "azureParams": {"protectionType": "kAgent"}, "clusterId": 26, "clusterIncarnationId": 26, "elastifileParams": {"supportedNasMountProtocols": ["kNoProtocol"]}, "environment": "kVMware", "expiryTimeUsecs": 26, "externalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "flashbladeParams": {"supportedNasMountProtocols": ["kNfs"]}, "genericNasParams": {"supportedNasMountProtocols": ["kNoProtocol"]}, "gpfsParams": {"supportedNasMountProtocols": ["kNoProtocol"]}, "hasDataLock": true, "hypervParams": {"protectionType": "kAuto"}, "id": "testString", "indexingStatus": "InProgress", "isilonParams": {"supportedNasMountProtocols": ["kNfs"]}, "netappParams": {"supportedNasMountProtocols": ["kNfs"], "volumeExtendedStyle": "kFlexVol", "volumeType": "ReadWrite"}, "objectId": 26, "objectName": "testString", "onLegalHold": true, "ownershipContext": "Local", "physicalParams": {"enableSystemBackup": true, "protectionType": "kFile"}, "protectionGroupId": "testString", "protectionGroupName": "testString", "protectionGroupRunId": "testString", "regionId": "testString", "runInstanceId": 26, "runStartTimeUsecs": 26, "runType": "kRegular", "sfdcParams": {"recordsAdded": 26, "recordsModified": 26, "recordsRemoved": 26}, "snapshotTargetType": "Local", "snapshotTimestampUsecs": 26, "sourceGroupId": "testString", "sourceId": 26, "storageDomainId": 26}]}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"object-snapshots-list",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--from-time-usecs=26`,
					`--to-time-usecs=26`,
					`--run-start-from-time-usecs=26`,
					`--run-start-to-time-usecs=26`,
					`--snapshot-actions=RecoverVMs,RecoverFiles,InstantVolumeMount,RecoverVmDisks,MountVolumes,RecoverVApps,RecoverRDS,RecoverAurora,RecoverS3Buckets,RecoverApps,RecoverNasVolume,RecoverPhysicalVolumes,RecoverSystem,RecoverSanVolumes,RecoverNamespaces,RecoverObjects,DownloadFilesAndFolders,RecoverPublicFolders,RecoverVAppTemplates,RecoverMailbox,RecoverOneDrive,RecoverMsTeam,RecoverMsGroup,RecoverSharePoint,ConvertToPst,RecoverSfdcRecords,RecoverAzureSQL,DownloadChats,RecoverRDSPostgres,RecoverMailboxCSM,RecoverOneDriveCSM,RecoverSharePointCSM`,
					`--run-types=kRegular,kFull,kLog,kSystem,kHydrateCDP,kStorageArraySnapshot`,
					`--protection-group-ids=protectionGroupId1`,
					`--run-instance-ids=26,27`,
					`--region-ids=regionId1`,
					`--object-action-keys=kVMware,kHyperV,kVCD,kAzure,kGCP,kKVM,kAcropolis,kAWS,kAWSNative,kAwsS3,kAWSSnapshotManager,kRDSSnapshotManager,kAuroraSnapshotManager,kAwsRDSPostgresBackup,kAwsRDSPostgres,kAwsAuroraPostgres,kAzureNative,kAzureSQL,kAzureSnapshotManager,kPhysical,kPhysicalFiles,kGPFS,kElastifile,kNetapp,kGenericNas,kIsilon,kFlashBlade,kPure,kIbmFlashSystem,kSQL,kExchange,kAD,kOracle,kView,kRemoteAdapter,kO365,kO365PublicFolders,kO365Teams,kO365Group,kO365Exchange,kO365OneDrive,kO365Sharepoint,kKubernetes,kCassandra,kMongoDB,kCouchbase,kHdfs,kHive,kHBase,kSAPHANA,kUDA,kSfdc,kO365ExchangeCSM,kO365OneDriveCSM,kO365SharepointCSM`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"object-snapshots-list",
					`--id=26`,
					`--xibm-tenant-id=tenantId`,
					`--from-time-usecs=26`,
					`--to-time-usecs=26`,
					`--run-start-from-time-usecs=26`,
					`--run-start-to-time-usecs=26`,
					`--snapshot-actions=RecoverVMs,RecoverFiles,InstantVolumeMount,RecoverVmDisks,MountVolumes,RecoverVApps,RecoverRDS,RecoverAurora,RecoverS3Buckets,RecoverApps,RecoverNasVolume,RecoverPhysicalVolumes,RecoverSystem,RecoverSanVolumes,RecoverNamespaces,RecoverObjects,DownloadFilesAndFolders,RecoverPublicFolders,RecoverVAppTemplates,RecoverMailbox,RecoverOneDrive,RecoverMsTeam,RecoverMsGroup,RecoverSharePoint,ConvertToPst,RecoverSfdcRecords,RecoverAzureSQL,DownloadChats,RecoverRDSPostgres,RecoverMailboxCSM,RecoverOneDriveCSM,RecoverSharePointCSM`,
					`--run-types=kRegular,kFull,kLog,kSystem,kHydrateCDP,kStorageArraySnapshot`,
					`--protection-group-ids=protectionGroupId1`,
					`--run-instance-ids=26,27`,
					`--region-ids=regionId1`,
					`--object-action-keys=kVMware,kHyperV,kVCD,kAzure,kGCP,kKVM,kAcropolis,kAWS,kAWSNative,kAwsS3,kAWSSnapshotManager,kRDSSnapshotManager,kAuroraSnapshotManager,kAwsRDSPostgresBackup,kAwsRDSPostgres,kAwsAuroraPostgres,kAzureNative,kAzureSQL,kAzureSnapshotManager,kPhysical,kPhysicalFiles,kGPFS,kElastifile,kNetapp,kGenericNas,kIsilon,kFlashBlade,kPure,kIbmFlashSystem,kSQL,kExchange,kAD,kOracle,kView,kRemoteAdapter,kO365,kO365PublicFolders,kO365Teams,kO365Group,kO365Exchange,kO365OneDrive,kO365Sharepoint,kKubernetes,kCassandra,kMongoDB,kCouchbase,kHdfs,kHive,kHBase,kSAPHANA,kUDA,kSfdc,kO365ExchangeCSM,kO365OneDriveCSM,kO365SharepointCSM`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"object-snapshots-list",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `download-recovery-create` command", func() {
		var (
			operationPath = "/data-protect/recoveries/download-files-folders"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "testString", "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "progressTaskId": "testString", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "creationInfo": {"userName": "testString"}, "canTearDown": true, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "testString", "messages": ["testString"], "isParentRecovery": true, "parentRecoveryId": "testString", "retrieveArchiveTasks": [{"taskUid": "testString", "uptierExpiryTimes": [26]}], "isMultiStageRestore": true, "physicalParams": {"objects": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 26, "name": "testString"}, "volumeMapping": [{"sourceVolumeGuid": "testString", "destinationVolumeGuid": "testString"}], "forceUnmountVolume": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": true, "originalTargetConfig": {"serverCredentials": {"username": "testString", "password": "testString"}}, "newTargetConfig": {"mountTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "serverCredentials": {"username": "testString", "password": "testString"}}, "readOnlyMount": true, "volumeNames": ["testString"], "mountedVolumeMapping": [{"originalVolume": "testString", "mountedVolume": "testString", "fileSystemType": "testString"}], "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "restoreToOriginalPaths": true, "overwriteExisting": true, "alternateRestoreDirectory": "testString", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": true, "saveSuccessFiles": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 26, "filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "downloadFilePath": "testString"}, "systemRecoveryParams": {"fullNasPath": "testString"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26, "aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true, "sqlTargetParams": {"newSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "dataFileDirectoryLocation": "testString", "databaseName": "testString", "host": {"id": 26, "name": "testString"}, "instanceName": "testString", "logFileDirectoryLocation": "testString"}, "originalSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "captureTailLogs": true, "dataFileDirectoryLocation": "testString", "logFileDirectoryLocation": "testString", "newDatabaseName": "testString"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"download-recovery-create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-download-files-and-folders-recovery`,
					`--object={"snapshotId": "snapshotId", "pointInTimeUsecs": 26, "protectionGroupId": "protectionGroupId", "protectionGroupName": "protectionGroupName", "recoverFromStandby": true}`,
					`--files-and-folders=[{"absolutePath": "~/home/dir1", "isDirectory": true}]`,
					`--documents=[{"isDirectory": true, "itemId": "item1"}]`,
					`--parent-recovery-id=parentRecoveryId`,
					`--glacier-retrieval-type=kStandard`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"download-recovery-create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-download-files-and-folders-recovery`,
					`--object={"snapshotId": "snapshotId", "pointInTimeUsecs": 26, "protectionGroupId": "protectionGroupId", "protectionGroupName": "protectionGroupName", "recoverFromStandby": true}`,
					`--files-and-folders=[{"absolutePath": "~/home/dir1", "isDirectory": true}]`,
					`--documents=[{"isDirectory": true, "itemId": "item1"}]`,
					`--parent-recovery-id=parentRecoveryId`,
					`--glacier-retrieval-type=kStandard`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"id": "testString", "name": "testString", "startTimeUsecs": 26, "endTimeUsecs": 26, "status": "Accepted", "progressTaskId": "testString", "snapshotEnvironment": "kPhysical", "recoveryAction": "RecoverVMs", "permissions": [{"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}], "creationInfo": {"userName": "testString"}, "canTearDown": true, "tearDownStatus": "DestroyScheduled", "tearDownMessage": "testString", "messages": ["testString"], "isParentRecovery": true, "parentRecoveryId": "testString", "retrieveArchiveTasks": [{"taskUid": "testString", "uptierExpiryTimes": [26]}], "isMultiStageRestore": true, "physicalParams": {"objects": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26}], "recoveryAction": "RecoverPhysicalVolumes", "recoverVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountTarget": {"id": 26, "name": "testString"}, "volumeMapping": [{"sourceVolumeGuid": "testString", "destinationVolumeGuid": "testString"}], "forceUnmountVolume": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "mountVolumeParams": {"targetEnvironment": "kPhysical", "physicalTargetParams": {"mountToOriginalTarget": true, "originalTargetConfig": {"serverCredentials": {"username": "testString", "password": "testString"}}, "newTargetConfig": {"mountTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "serverCredentials": {"username": "testString", "password": "testString"}}, "readOnlyMount": true, "volumeNames": ["testString"], "mountedVolumeMapping": [{"originalVolume": "testString", "mountedVolume": "testString", "fileSystemType": "testString"}], "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}, "recoverFileAndFolderParams": {"filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "targetEnvironment": "kPhysical", "physicalTargetParams": {"recoverTarget": {"id": 26, "name": "testString", "parentSourceId": 26, "parentSourceName": "testString"}, "restoreToOriginalPaths": true, "overwriteExisting": true, "alternateRestoreDirectory": "testString", "preserveAttributes": true, "preserveTimestamps": true, "preserveAcls": true, "continueOnError": true, "saveSuccessFiles": true, "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}, "restoreEntityType": "kRegular"}}, "downloadFileAndFolderParams": {"expiryTimeUsecs": 26, "filesAndFolders": [{"absolutePath": "testString", "destinationDir": "testString", "isDirectory": true, "status": "NotStarted", "messages": ["testString"], "isViewFileRecovery": true}], "downloadFilePath": "testString"}, "systemRecoveryParams": {"fullNasPath": "testString"}}, "mssqlParams": {"recoverAppParams": [{"snapshotId": "testString", "pointInTimeUsecs": 26, "protectionGroupId": "testString", "protectionGroupName": "testString", "snapshotCreationTimeUsecs": 26, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "snapshotTargetType": "Local", "archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "progressTaskId": "testString", "recoverFromStandby": true, "status": "Accepted", "startTimeUsecs": 26, "endTimeUsecs": 26, "messages": ["testString"], "bytesRestored": 26, "aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true, "sqlTargetParams": {"newSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "dataFileDirectoryLocation": "testString", "databaseName": "testString", "host": {"id": 26, "name": "testString"}, "instanceName": "testString", "logFileDirectoryLocation": "testString"}, "originalSourceConfig": {"keepCdc": true, "multiStageRestoreOptions": {"enableAutoSync": true, "enableMultiStageRestore": true}, "nativeLogRecoveryWithClause": "testString", "nativeRecoveryWithClause": "testString", "overwritingPolicy": "FailIfExists", "replayEntireLastLog": true, "restoreTimeUsecs": 26, "secondaryDataFilesDirList": [{"directory": "testString", "filenamePattern": "testString"}], "withNoRecovery": true, "captureTailLogs": true, "dataFileDirectoryLocation": "testString", "logFileDirectoryLocation": "testString", "newDatabaseName": "testString"}, "recoverToNewSource": true}, "targetEnvironment": "kSQL"}], "recoveryAction": "RecoverApps", "vlanConfig": {"id": 38, "disableVlan": true, "interfaceName": "testString"}}}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
			It("but there is a single extranous field", func() {
				args := []string{
					"download-recovery-create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-download-files-and-folders-recovery`,
					`--object={"snapshotId":"snapshotId","pointInTimeUsecs":26,"protectionGroupId":"protectionGroupId","protectionGroupName":"protectionGroupName","recoverFromStandby":true,"absolutelyExtraneousField1":null}`,
					`--files-and-folders=[{"absolutePath":"~/home/dir1","isDirectory":true,"absolutelyExtraneousField1":null}]`,
					`--documents=[{"isDirectory":true,"itemId":"item1","absolutelyExtraneousField1":null}]`,
					`--parent-recovery-id=parentRecoveryId`,
					`--glacier-retrieval-type=kStandard`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There is an unsupported field in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField1'\n`))
			})

			It("but there are multiple extranous fields", func() {
				args := []string{
					"download-recovery-create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-download-files-and-folders-recovery`,
					`--object={"snapshotId":"snapshotId","pointInTimeUsecs":26,"protectionGroupId":"protectionGroupId","protectionGroupName":"protectionGroupName","recoverFromStandby":true,"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--files-and-folders=[{"absolutePath":"~/home/dir1","isDirectory":true,"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--documents=[{"isDirectory":true,"itemId":"item1","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}]`,
					`--parent-recovery-id=parentRecoveryId`,
					`--glacier-retrieval-type=kStandard`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There are multiple unsupported fields in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField[12], #\.(\[0\]\.)?absolutelyExtraneousField[12]'\n`))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"download-recovery-create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-download-files-and-folders-recovery`,
					`--object={"snapshotId": "snapshotId", "pointInTimeUsecs": 26, "protectionGroupId": "protectionGroupId", "protectionGroupName": "protectionGroupName", "recoverFromStandby": true}`,
					`--files-and-folders=[{"absolutePath": "~/home/dir1", "isDirectory": true}]`,
					`--documents=[{"isDirectory": true, "itemId": "item1"}]`,
					`--parent-recovery-id=parentRecoveryId`,
					`--glacier-retrieval-type=kStandard`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"download-recovery-create",
					`--xibm-tenant-id=tenantId`,
					`--name=create-download-files-and-folders-recovery`,
					`--object={"snapshotId": "snapshotId", "pointInTimeUsecs": 26, "protectionGroupId": "protectionGroupId", "protectionGroupName": "protectionGroupName", "recoverFromStandby": true}`,
					`--files-and-folders=[{"absolutePath": "~/home/dir1", "isDirectory": true}]`,
					`--documents=[{"isDirectory": true, "itemId": "item1"}]`,
					`--parent-recovery-id=parentRecoveryId`,
					`--glacier-retrieval-type=kStandard`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"download-recovery-create",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `restore-points` command", func() {
		var (
			operationPath = "/data-protect/snapshots/restore-points"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"fullSnapshotInfo": [{"restoreInfo": {"archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "attemptNumber": 38, "cloudDeployTarget": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}, "cloudReplicationTarget": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "parentObjectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "protectionGroupId": "testString", "runStartTimeUsecs": 26, "snapshotRelativeDirPath": "testString", "viewName": "testString", "vmHadIndependentDisks": true}, "targetsConfiguration": [{"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}]}], "timeRangeInfo": {"errorMessage": "testString", "timeRanges": [{"endTimeUsecs": 26, "protectionGroupId": "testString", "startTimeUsecs": 26}], "userMessage": "testString"}}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"restore-points",
					`--xibm-tenant-id=tenantId`,
					`--end-time-usecs=45`,
					`--environment=kVMware`,
					`--protection-group-ids=protectionGroupId1`,
					`--start-time-usecs=15`,
					`--source-id=26`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"restore-points",
					`--xibm-tenant-id=tenantId`,
					`--end-time-usecs=45`,
					`--environment=kVMware`,
					`--protection-group-ids=protectionGroupId1`,
					`--start-time-usecs=15`,
					`--source-id=26`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"fullSnapshotInfo": [{"restoreInfo": {"archivalTargetInfo": {"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}}, "attemptNumber": 38, "cloudDeployTarget": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}, "cloudReplicationTarget": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}, "objectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "parentObjectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "protectionGroupId": "testString", "runStartTimeUsecs": 26, "snapshotRelativeDirPath": "testString", "viewName": "testString", "vmHadIndependentDisks": true}, "targetsConfiguration": [{"replicationTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "awsTargetConfig": {"name": "testString", "region": 26, "regionName": "testString", "sourceId": 26}, "azureTargetConfig": {"name": "testString", "resourceGroup": 26, "resourceGroupName": "testString", "sourceId": 26, "storageAccount": 38, "storageAccountName": "testString", "storageContainer": 38, "storageContainerName": "testString", "storageResourceGroup": 38, "storageResourceGroupName": "testString"}, "targetType": "RemoteCluster", "remoteTargetConfig": {"clusterId": 26, "clusterName": "testString"}}], "archivalTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}}, "extendedRetention": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "runType": "Regular", "configId": "testString"}]}], "cloudSpinTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "target": {"awsParams": {"customTagList": [{"key": "testString", "value": "testString"}], "region": 26, "subnetId": 26, "vpcId": 26}, "azureParams": {"availabilitySetId": 26, "networkResourceGroupId": 26, "resourceGroupId": 26, "storageAccountId": 26, "storageContainerId": 26, "storageResourceGroupId": 26, "tempVmResourceGroupId": 26, "tempVmStorageAccountId": 26, "tempVmStorageContainerId": 26, "tempVmSubnetId": 26, "tempVmVirtualNetworkId": 26}, "id": 26, "name": "testString"}}], "onpremDeployTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "params": {"id": 26}}], "rpaasTargets": [{"schedule": {"unit": "Runs", "frequency": 1}, "retention": {"unit": "Days", "duration": 1, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "copyOnRunSuccess": true, "configId": "testString", "backupRunType": "Regular", "runTimeouts": [{"timeoutMins": 26, "backupType": "kRegular"}], "logRetention": {"unit": "Days", "duration": 0, "dataLockConfig": {"mode": "Compliance", "unit": "Days", "duration": 1, "enableWormOnExternalTarget": true}}, "targetId": 26, "targetName": "testString", "targetType": "Tape"}]}]}], "timeRangeInfo": {"errorMessage": "testString", "timeRanges": [{"endTimeUsecs": 26, "protectionGroupId": "testString", "startTimeUsecs": 26}], "userMessage": "testString"}}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"restore-points",
					`--xibm-tenant-id=tenantId`,
					`--end-time-usecs=45`,
					`--environment=kVMware`,
					`--protection-group-ids=protectionGroupId1`,
					`--start-time-usecs=15`,
					`--source-id=26`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"restore-points",
					`--xibm-tenant-id=tenantId`,
					`--end-time-usecs=45`,
					`--environment=kVMware`,
					`--protection-group-ids=protectionGroupId1`,
					`--start-time-usecs=15`,
					`--source-id=26`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"restore-points",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `indexed-file-download` command", func() {
		var (
			operationPath = "/data-protect/snapshots/snapshotId1/download-file"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					res.WriteHeader(200)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"indexed-file-download",
					`--snapshots-id=snapshotId1`,
					`--xibm-tenant-id=tenantId`,
					`--file-path=~/home/downloadFile`,
					`--nvram-file=true`,
					`--retry-attempt=26`,
					`--start-offset=26`,
					`--length=26`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"indexed-file-download",
					`--snapshots-id=snapshotId1`,
					`--xibm-tenant-id=tenantId`,
					`--file-path=~/home/downloadFile`,
					`--nvram-file=true`,
					`--retry-attempt=26`,
					`--start-offset=26`,
					`--length=26`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				Expect(out).ToNot(BeNil())
				Expect(string(out)).To(Equal("\"\"\n"))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"indexed-file-download",
					`--snapshots-id=snapshotId1`,
					`--xibm-tenant-id=tenantId`,
					`--file-path=~/home/downloadFile`,
					`--nvram-file=true`,
					`--retry-attempt=26`,
					`--start-offset=26`,
					`--length=26`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"indexed-file-download",
					`--snapshots-id=snapshotId1`,
					`--xibm-tenant-id=tenantId`,
					`--file-path=~/home/downloadFile`,
					`--nvram-file=true`,
					`--retry-attempt=26`,
					`--start-offset=26`,
					`--length=26`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"indexed-file-download",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `indexed-objects-search` command", func() {
		var (
			operationPath = "/data-protect/search/indexed-objects"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"objectType": "Emails", "count": 38, "paginationCookie": "testString", "cassandraObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "id": "testString", "keyspaceType": "kRegular", "type": "CassandraKeyspaces"}], "couchbaseObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "id": "testString", "type": "CouchbaseBuckets"}], "emails": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "bccRecipientAddresses": ["testString"], "ccRecipientAddresses": ["testString"], "createdTimeSecs": 26, "directoryPath": "testString", "emailAddresses": ["testString"], "emailSubject": "testString", "firstName": "testString", "folderName": "testString", "hasAttachment": true, "id": "testString", "lastModificationName": "testString", "lastModificationTimeSecs": 26, "lastName": "testString", "optionalAttendeesAddresses": ["testString"], "organizerAddress": "testString", "parentFolderId": 26, "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "receivedTimeSecs": 26, "recipientAddresses": ["testString"], "requiredAttendeesAddresses": ["testString"], "senderAddress": "testString", "sentTimeSecs": 26, "storageDomainId": 26, "taskCompletionDateTimeSecs": 26, "taskDueDateTimeSecs": 26, "taskStatus": "NotStarted", "tenantId": "testString", "type": "Email", "userObjectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}}], "exchangeObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "databaseName": "testString", "email": "testString", "objectName": "testString"}], "files": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "type": "File", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}}], "hbaseObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "id": "testString", "type": "HbaseNamespaces"}], "hdfsObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "id": "testString", "type": "HDFSFolders"}], "hiveObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "id": "testString", "type": "HiveDatabases"}], "mongoObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "cdpInfo": {"allowReEnableCdp": true, "cdpEnabled": true, "lastRunInfo": {"localBackupInfo": {"endTimeInUsecs": 26, "startTimeInUsecs": 26}}, "protectionGroupId": "testString"}, "id": "testString", "type": "MongoDatabases"}], "msGroupItems": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "mailboxItem": {"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "bccRecipientAddresses": ["testString"], "ccRecipientAddresses": ["testString"], "createdTimeSecs": 26, "directoryPath": "testString", "emailAddresses": ["testString"], "emailSubject": "testString", "firstName": "testString", "folderName": "testString", "hasAttachment": true, "id": "testString", "lastModificationName": "testString", "lastModificationTimeSecs": 26, "lastName": "testString", "optionalAttendeesAddresses": ["testString"], "organizerAddress": "testString", "parentFolderId": 26, "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "receivedTimeSecs": 26, "recipientAddresses": ["testString"], "requiredAttendeesAddresses": ["testString"], "senderAddress": "testString", "sentTimeSecs": 26, "storageDomainId": 26, "taskCompletionDateTimeSecs": 26, "taskDueDateTimeSecs": 26, "taskStatus": "NotStarted", "tenantId": "testString", "type": "Email", "userObjectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}}, "siteItem": {"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "creationTimeSecs": 26, "fileType": "File", "itemId": "testString", "itemSize": 26, "ownerEmail": "testString", "ownerName": "testString"}, "type": "Email"}], "oneDriveItems": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "creationTimeSecs": 26, "fileType": "File", "itemId": "testString", "itemSize": 26, "ownerEmail": "testString", "ownerName": "testString"}], "publicFolderItems": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "type": "testString", "id": "testString", "subject": "testString", "hasAttachments": true, "itemClass": "testString", "receivedTimeSecs": 26, "itemSize": 26, "parentFolderId": "testString"}], "sfdcRecords": {"columnNames": ["testString"], "records": ["testString"]}, "sharepointItems": [{"documentLibraryItem": {"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "creationTimeSecs": 26, "fileType": "File", "itemId": "testString", "itemSize": 26, "ownerEmail": "testString", "ownerName": "testString"}}], "teamsItems": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "channelItem": {"channelEmail": "testString", "channelId": "testString", "channelName": "testString", "channelType": "Private", "creationTimeSecs": 26, "ownerNames": ["testString"]}, "fileItem": {"creationTimeSecs": 26, "driveName": "testString", "fileType": "File", "itemSize": 26}, "type": "Channel"}], "udaObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "fullName": "testString", "id": "testString", "objectType": "testString"}]}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"indexed-objects-search",
					`--xibm-tenant-id=tenantId`,
					`--object-type=Emails`,
					`--protection-group-ids=protectionGroupId1`,
					`--storage-domain-ids=26,27`,
					`--tenant-id=tenantId`,
					`--include-tenants=false`,
					`--tags=123:456:ABC-123,123:456:ABC-456`,
					`--snapshot-tags=123:456:DEF-123,123:456:DEF-456`,
					`--must-have-tag-ids=123:456:ABC-123`,
					`--might-have-tag-ids=123:456:ABC-456`,
					`--must-have-snapshot-tag-ids=123:456:DEF-123`,
					`--might-have-snapshot-tag-ids=123:456:DEF-456`,
					`--pagination-cookie=paginationCookie`,
					`--count=38`,
					`--use-cached-data=true`,
					`--cassandra-params={"cassandraObjectTypes": ["CassandraKeyspaces","CassandraTables"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--couchbase-params={"couchbaseObjectTypes": ["CouchbaseBuckets"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--email-params={"attendeesAddresses": ["attendee1@domain.com"], "bccRecipientAddresses": ["bccrecipient@domain.com"], "ccRecipientAddresses": ["ccrecipient@domain.com"], "createdEndTimeSecs": 26, "createdStartTimeSecs": 26, "dueDateEndTimeSecs": 26, "dueDateStartTimeSecs": 26, "emailAddress": "email@domain.com", "emailSubject": "Email Subject", "firstName": "First Name", "folderNames": ["folder1"], "hasAttachment": true, "lastModifiedEndTimeSecs": 26, "lastModifiedStartTimeSecs": 26, "lastName": "Last Name", "middleName": "Middle Name", "organizerAddress": "organizer@domain.com", "receivedEndTimeSecs": 26, "receivedStartTimeSecs": 26, "recipientAddresses": ["recipient@domain.com"], "senderAddress": "sender@domain.com", "sourceEnvironment": "kO365", "taskStatusTypes": ["NotStarted","InProgress","Completed","WaitingOnOthers","Deferred"], "types": ["Email","Folder","Calendar","Contact","Task","Note"], "o365Params": {"domainIds": [26,27], "mailboxIds": [26,27]}}`,
					`--exchange-params={"searchString": "searchString"}`,
					`--file-params={"searchString": "searchString", "types": ["File","Directory","Symlink"], "sourceEnvironments": ["kVMware","kHyperV","kSQL","kView","kRemoteAdapter","kPhysical","kPhysicalFiles","kPure","kIbmFlashSystem","kAzure","kNetapp","kGenericNas","kAcropolis","kIsilon","kGPFS","kKVM","kAWS","kExchange","kOracle","kGCP","kFlashBlade","kO365","kHyperFlex","kKubernetes","kElastifile","kSAPHANA","kUDA","kSfdc"], "sourceIds": [26,27], "objectIds": [26,27]}`,
					`--hbase-params={"hbaseObjectTypes": ["HbaseNamespaces","HbaseTables"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--hdfs-params={"hdfsTypes": ["HDFSFolders","HDFSFiles"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--hive-params={"hiveObjectTypes": ["HiveDatabases","HiveTables","HivePartitions"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--mongodb-params={"mongoDBObjectTypes": ["MongoDatabases","MongoCollections"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--ms-groups-params={"mailboxParams": {"attendeesAddresses": ["attendee1@domain.com"], "bccRecipientAddresses": ["bccrecipient@domain.com"], "ccRecipientAddresses": ["ccrecipient@domain.com"], "createdEndTimeSecs": 26, "createdStartTimeSecs": 26, "dueDateEndTimeSecs": 26, "dueDateStartTimeSecs": 26, "emailAddress": "email@domain.com", "emailSubject": "Email Subject", "firstName": "First Name", "folderNames": ["folder1"], "hasAttachment": true, "lastModifiedEndTimeSecs": 26, "lastModifiedStartTimeSecs": 26, "lastName": "Last Name", "middleName": "Middle Name", "organizerAddress": "organizer@domain.com", "receivedEndTimeSecs": 26, "receivedStartTimeSecs": 26, "recipientAddresses": ["recipient@domain.com"], "senderAddress": "sender@domain.com", "sourceEnvironment": "kO365", "taskStatusTypes": ["NotStarted","InProgress","Completed","WaitingOnOthers","Deferred"], "types": ["Email","Folder","Calendar","Contact","Task","Note"]}, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "siteParams": {"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "includeFiles": true, "includeFolders": true, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26}}`,
					`--ms-teams-params={"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "channelNames": ["channelName1"], "channelParams": {"channelEmail": "channel@domain.com", "channelId": "channelId", "channelName": "channelName", "includePrivateChannels": true, "includePublicChannels": true}, "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26, "types": ["Channel","Chat","Conversation","File","Folder"]}`,
					`--one-drive-params={"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "includeFiles": true, "includeFolders": true, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26}`,
					`--public-folder-params={"searchString": "searchString", "types": ["Calendar","Contact","Post","Folder","Task","Journal","Note"], "hasAttachment": true, "senderAddress": "sender@domain.com", "recipientAddresses": ["recipient@domain.com"], "ccRecipientAddresses": ["ccrecipient@domain.com"], "bccRecipientAddresses": ["bccrecipient@domain.com"], "receivedStartTimeSecs": 26, "receivedEndTimeSecs": 26}`,
					`--sfdc-params={"mutationTypes": ["All","Added","Removed","Changed"], "objectName": "objectName", "queryString": "queryString", "snapshotId": "snapshotId"}`,
					`--sharepoint-params={"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "includeFiles": true, "includeFolders": true, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26}`,
					`--uda-params={"searchString": "searchString", "sourceIds": [26,27]}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"indexed-objects-search",
					`--xibm-tenant-id=tenantId`,
					`--object-type=Emails`,
					`--protection-group-ids=protectionGroupId1`,
					`--storage-domain-ids=26,27`,
					`--tenant-id=tenantId`,
					`--include-tenants=false`,
					`--tags=123:456:ABC-123,123:456:ABC-456`,
					`--snapshot-tags=123:456:DEF-123,123:456:DEF-456`,
					`--must-have-tag-ids=123:456:ABC-123`,
					`--might-have-tag-ids=123:456:ABC-456`,
					`--must-have-snapshot-tag-ids=123:456:DEF-123`,
					`--might-have-snapshot-tag-ids=123:456:DEF-456`,
					`--pagination-cookie=paginationCookie`,
					`--count=38`,
					`--use-cached-data=true`,
					`--cassandra-params={"cassandraObjectTypes": ["CassandraKeyspaces","CassandraTables"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--couchbase-params={"couchbaseObjectTypes": ["CouchbaseBuckets"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--email-params={"attendeesAddresses": ["attendee1@domain.com"], "bccRecipientAddresses": ["bccrecipient@domain.com"], "ccRecipientAddresses": ["ccrecipient@domain.com"], "createdEndTimeSecs": 26, "createdStartTimeSecs": 26, "dueDateEndTimeSecs": 26, "dueDateStartTimeSecs": 26, "emailAddress": "email@domain.com", "emailSubject": "Email Subject", "firstName": "First Name", "folderNames": ["folder1"], "hasAttachment": true, "lastModifiedEndTimeSecs": 26, "lastModifiedStartTimeSecs": 26, "lastName": "Last Name", "middleName": "Middle Name", "organizerAddress": "organizer@domain.com", "receivedEndTimeSecs": 26, "receivedStartTimeSecs": 26, "recipientAddresses": ["recipient@domain.com"], "senderAddress": "sender@domain.com", "sourceEnvironment": "kO365", "taskStatusTypes": ["NotStarted","InProgress","Completed","WaitingOnOthers","Deferred"], "types": ["Email","Folder","Calendar","Contact","Task","Note"], "o365Params": {"domainIds": [26,27], "mailboxIds": [26,27]}}`,
					`--exchange-params={"searchString": "searchString"}`,
					`--file-params={"searchString": "searchString", "types": ["File","Directory","Symlink"], "sourceEnvironments": ["kVMware","kHyperV","kSQL","kView","kRemoteAdapter","kPhysical","kPhysicalFiles","kPure","kIbmFlashSystem","kAzure","kNetapp","kGenericNas","kAcropolis","kIsilon","kGPFS","kKVM","kAWS","kExchange","kOracle","kGCP","kFlashBlade","kO365","kHyperFlex","kKubernetes","kElastifile","kSAPHANA","kUDA","kSfdc"], "sourceIds": [26,27], "objectIds": [26,27]}`,
					`--hbase-params={"hbaseObjectTypes": ["HbaseNamespaces","HbaseTables"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--hdfs-params={"hdfsTypes": ["HDFSFolders","HDFSFiles"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--hive-params={"hiveObjectTypes": ["HiveDatabases","HiveTables","HivePartitions"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--mongodb-params={"mongoDBObjectTypes": ["MongoDatabases","MongoCollections"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--ms-groups-params={"mailboxParams": {"attendeesAddresses": ["attendee1@domain.com"], "bccRecipientAddresses": ["bccrecipient@domain.com"], "ccRecipientAddresses": ["ccrecipient@domain.com"], "createdEndTimeSecs": 26, "createdStartTimeSecs": 26, "dueDateEndTimeSecs": 26, "dueDateStartTimeSecs": 26, "emailAddress": "email@domain.com", "emailSubject": "Email Subject", "firstName": "First Name", "folderNames": ["folder1"], "hasAttachment": true, "lastModifiedEndTimeSecs": 26, "lastModifiedStartTimeSecs": 26, "lastName": "Last Name", "middleName": "Middle Name", "organizerAddress": "organizer@domain.com", "receivedEndTimeSecs": 26, "receivedStartTimeSecs": 26, "recipientAddresses": ["recipient@domain.com"], "senderAddress": "sender@domain.com", "sourceEnvironment": "kO365", "taskStatusTypes": ["NotStarted","InProgress","Completed","WaitingOnOthers","Deferred"], "types": ["Email","Folder","Calendar","Contact","Task","Note"]}, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "siteParams": {"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "includeFiles": true, "includeFolders": true, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26}}`,
					`--ms-teams-params={"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "channelNames": ["channelName1"], "channelParams": {"channelEmail": "channel@domain.com", "channelId": "channelId", "channelName": "channelName", "includePrivateChannels": true, "includePublicChannels": true}, "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26, "types": ["Channel","Chat","Conversation","File","Folder"]}`,
					`--one-drive-params={"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "includeFiles": true, "includeFolders": true, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26}`,
					`--public-folder-params={"searchString": "searchString", "types": ["Calendar","Contact","Post","Folder","Task","Journal","Note"], "hasAttachment": true, "senderAddress": "sender@domain.com", "recipientAddresses": ["recipient@domain.com"], "ccRecipientAddresses": ["ccrecipient@domain.com"], "bccRecipientAddresses": ["bccrecipient@domain.com"], "receivedStartTimeSecs": 26, "receivedEndTimeSecs": 26}`,
					`--sfdc-params={"mutationTypes": ["All","Added","Removed","Changed"], "objectName": "objectName", "queryString": "queryString", "snapshotId": "snapshotId"}`,
					`--sharepoint-params={"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "includeFiles": true, "includeFolders": true, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26}`,
					`--uda-params={"searchString": "searchString", "sourceIds": [26,27]}`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"objectType": "Emails", "count": 38, "paginationCookie": "testString", "cassandraObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "id": "testString", "keyspaceType": "kRegular", "type": "CassandraKeyspaces"}], "couchbaseObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "id": "testString", "type": "CouchbaseBuckets"}], "emails": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "bccRecipientAddresses": ["testString"], "ccRecipientAddresses": ["testString"], "createdTimeSecs": 26, "directoryPath": "testString", "emailAddresses": ["testString"], "emailSubject": "testString", "firstName": "testString", "folderName": "testString", "hasAttachment": true, "id": "testString", "lastModificationName": "testString", "lastModificationTimeSecs": 26, "lastName": "testString", "optionalAttendeesAddresses": ["testString"], "organizerAddress": "testString", "parentFolderId": 26, "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "receivedTimeSecs": 26, "recipientAddresses": ["testString"], "requiredAttendeesAddresses": ["testString"], "senderAddress": "testString", "sentTimeSecs": 26, "storageDomainId": 26, "taskCompletionDateTimeSecs": 26, "taskDueDateTimeSecs": 26, "taskStatus": "NotStarted", "tenantId": "testString", "type": "Email", "userObjectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}}], "exchangeObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "databaseName": "testString", "email": "testString", "objectName": "testString"}], "files": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "type": "File", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}}], "hbaseObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "id": "testString", "type": "HbaseNamespaces"}], "hdfsObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "id": "testString", "type": "HDFSFolders"}], "hiveObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "id": "testString", "type": "HiveDatabases"}], "mongoObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "cdpInfo": {"allowReEnableCdp": true, "cdpEnabled": true, "lastRunInfo": {"localBackupInfo": {"endTimeInUsecs": 26, "startTimeInUsecs": 26}}, "protectionGroupId": "testString"}, "id": "testString", "type": "MongoDatabases"}], "msGroupItems": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "mailboxItem": {"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "bccRecipientAddresses": ["testString"], "ccRecipientAddresses": ["testString"], "createdTimeSecs": 26, "directoryPath": "testString", "emailAddresses": ["testString"], "emailSubject": "testString", "firstName": "testString", "folderName": "testString", "hasAttachment": true, "id": "testString", "lastModificationName": "testString", "lastModificationTimeSecs": 26, "lastName": "testString", "optionalAttendeesAddresses": ["testString"], "organizerAddress": "testString", "parentFolderId": 26, "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "receivedTimeSecs": 26, "recipientAddresses": ["testString"], "requiredAttendeesAddresses": ["testString"], "senderAddress": "testString", "sentTimeSecs": 26, "storageDomainId": 26, "taskCompletionDateTimeSecs": 26, "taskDueDateTimeSecs": 26, "taskStatus": "NotStarted", "tenantId": "testString", "type": "Email", "userObjectInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}}, "siteItem": {"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "creationTimeSecs": 26, "fileType": "File", "itemId": "testString", "itemSize": 26, "ownerEmail": "testString", "ownerName": "testString"}, "type": "Email"}], "oneDriveItems": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "creationTimeSecs": 26, "fileType": "File", "itemId": "testString", "itemSize": 26, "ownerEmail": "testString", "ownerName": "testString"}], "publicFolderItems": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "type": "testString", "id": "testString", "subject": "testString", "hasAttachments": true, "itemClass": "testString", "receivedTimeSecs": 26, "itemSize": 26, "parentFolderId": "testString"}], "sfdcRecords": {"columnNames": ["testString"], "records": ["testString"]}, "sharepointItems": [{"documentLibraryItem": {"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "creationTimeSecs": 26, "fileType": "File", "itemId": "testString", "itemSize": 26, "ownerEmail": "testString", "ownerName": "testString"}}], "teamsItems": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "channelItem": {"channelEmail": "testString", "channelId": "testString", "channelName": "testString", "channelType": "Private", "creationTimeSecs": 26, "ownerNames": ["testString"]}, "fileItem": {"creationTimeSecs": 26, "driveName": "testString", "fileType": "File", "itemSize": 26}, "type": "Channel"}], "udaObjects": [{"tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "name": "testString", "path": "testString", "protectionGroupId": "testString", "protectionGroupName": "testString", "policyId": "testString", "policyName": "testString", "storageDomainId": 26, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "fullName": "testString", "id": "testString", "objectType": "testString"}]}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
			It("but there is a single extranous field", func() {
				args := []string{
					"indexed-objects-search",
					`--xibm-tenant-id=tenantId`,
					`--object-type=Emails`,
					`--protection-group-ids=protectionGroupId1`,
					`--storage-domain-ids=26,27`,
					`--tenant-id=tenantId`,
					`--include-tenants=false`,
					`--tags=123:456:ABC-123,123:456:ABC-456`,
					`--snapshot-tags=123:456:DEF-123,123:456:DEF-456`,
					`--must-have-tag-ids=123:456:ABC-123`,
					`--might-have-tag-ids=123:456:ABC-456`,
					`--must-have-snapshot-tag-ids=123:456:DEF-123`,
					`--might-have-snapshot-tag-ids=123:456:DEF-456`,
					`--pagination-cookie=paginationCookie`,
					`--count=38`,
					`--use-cached-data=true`,
					`--cassandra-params={"cassandraObjectTypes":["CassandraKeyspaces","CassandraTables"],"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null}`,
					`--couchbase-params={"couchbaseObjectTypes":["CouchbaseBuckets"],"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null}`,
					`--email-params={"attendeesAddresses":["attendee1@domain.com"],"bccRecipientAddresses":["bccrecipient@domain.com"],"ccRecipientAddresses":["ccrecipient@domain.com"],"createdEndTimeSecs":26,"createdStartTimeSecs":26,"dueDateEndTimeSecs":26,"dueDateStartTimeSecs":26,"emailAddress":"email@domain.com","emailSubject":"Email Subject","firstName":"First Name","folderNames":["folder1"],"hasAttachment":true,"lastModifiedEndTimeSecs":26,"lastModifiedStartTimeSecs":26,"lastName":"Last Name","middleName":"Middle Name","organizerAddress":"organizer@domain.com","receivedEndTimeSecs":26,"receivedStartTimeSecs":26,"recipientAddresses":["recipient@domain.com"],"senderAddress":"sender@domain.com","sourceEnvironment":"kO365","taskStatusTypes":["NotStarted","InProgress","Completed","WaitingOnOthers","Deferred"],"types":["Email","Folder","Calendar","Contact","Task","Note"],"o365Params":{"domainIds":[26,27],"mailboxIds":[26,27]},"absolutelyExtraneousField1":null}`,
					`--exchange-params={"searchString":"searchString","absolutelyExtraneousField1":null}`,
					`--file-params={"searchString":"searchString","types":["File","Directory","Symlink"],"sourceEnvironments":["kVMware","kHyperV","kSQL","kView","kRemoteAdapter","kPhysical","kPhysicalFiles","kPure","kIbmFlashSystem","kAzure","kNetapp","kGenericNas","kAcropolis","kIsilon","kGPFS","kKVM","kAWS","kExchange","kOracle","kGCP","kFlashBlade","kO365","kHyperFlex","kKubernetes","kElastifile","kSAPHANA","kUDA","kSfdc"],"sourceIds":[26,27],"objectIds":[26,27],"absolutelyExtraneousField1":null}`,
					`--hbase-params={"hbaseObjectTypes":["HbaseNamespaces","HbaseTables"],"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null}`,
					`--hdfs-params={"hdfsTypes":["HDFSFolders","HDFSFiles"],"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null}`,
					`--hive-params={"hiveObjectTypes":["HiveDatabases","HiveTables","HivePartitions"],"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null}`,
					`--mongodb-params={"mongoDBObjectTypes":["MongoDatabases","MongoCollections"],"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null}`,
					`--ms-groups-params={"mailboxParams":{"attendeesAddresses":["attendee1@domain.com"],"bccRecipientAddresses":["bccrecipient@domain.com"],"ccRecipientAddresses":["ccrecipient@domain.com"],"createdEndTimeSecs":26,"createdStartTimeSecs":26,"dueDateEndTimeSecs":26,"dueDateStartTimeSecs":26,"emailAddress":"email@domain.com","emailSubject":"Email Subject","firstName":"First Name","folderNames":["folder1"],"hasAttachment":true,"lastModifiedEndTimeSecs":26,"lastModifiedStartTimeSecs":26,"lastName":"Last Name","middleName":"Middle Name","organizerAddress":"organizer@domain.com","receivedEndTimeSecs":26,"receivedStartTimeSecs":26,"recipientAddresses":["recipient@domain.com"],"senderAddress":"sender@domain.com","sourceEnvironment":"kO365","taskStatusTypes":["NotStarted","InProgress","Completed","WaitingOnOthers","Deferred"],"types":["Email","Folder","Calendar","Contact","Task","Note"]},"o365Params":{"domainIds":[26,27],"groupIds":[26,27],"siteIds":[26,27],"teamsIds":[26,27],"userIds":[26,27]},"siteParams":{"categoryTypes":["Document","Excel","Powerpoint","Image","OneNote"],"creationEndTimeSecs":26,"creationStartTimeSecs":26,"includeFiles":true,"includeFolders":true,"o365Params":{"domainIds":[26,27],"groupIds":[26,27],"siteIds":[26,27],"teamsIds":[26,27],"userIds":[26,27]},"ownerNames":["ownerName1"],"searchString":"searchString","sizeBytesLowerLimit":26,"sizeBytesUpperLimit":26},"absolutelyExtraneousField1":null}`,
					`--ms-teams-params={"categoryTypes":["Document","Excel","Powerpoint","Image","OneNote"],"channelNames":["channelName1"],"channelParams":{"channelEmail":"channel@domain.com","channelId":"channelId","channelName":"channelName","includePrivateChannels":true,"includePublicChannels":true},"creationEndTimeSecs":26,"creationStartTimeSecs":26,"o365Params":{"domainIds":[26,27],"groupIds":[26,27],"siteIds":[26,27],"teamsIds":[26,27],"userIds":[26,27]},"ownerNames":["ownerName1"],"searchString":"searchString","sizeBytesLowerLimit":26,"sizeBytesUpperLimit":26,"types":["Channel","Chat","Conversation","File","Folder"],"absolutelyExtraneousField1":null}`,
					`--one-drive-params={"categoryTypes":["Document","Excel","Powerpoint","Image","OneNote"],"creationEndTimeSecs":26,"creationStartTimeSecs":26,"includeFiles":true,"includeFolders":true,"o365Params":{"domainIds":[26,27],"groupIds":[26,27],"siteIds":[26,27],"teamsIds":[26,27],"userIds":[26,27]},"ownerNames":["ownerName1"],"searchString":"searchString","sizeBytesLowerLimit":26,"sizeBytesUpperLimit":26,"absolutelyExtraneousField1":null}`,
					`--public-folder-params={"searchString":"searchString","types":["Calendar","Contact","Post","Folder","Task","Journal","Note"],"hasAttachment":true,"senderAddress":"sender@domain.com","recipientAddresses":["recipient@domain.com"],"ccRecipientAddresses":["ccrecipient@domain.com"],"bccRecipientAddresses":["bccrecipient@domain.com"],"receivedStartTimeSecs":26,"receivedEndTimeSecs":26,"absolutelyExtraneousField1":null}`,
					`--sfdc-params={"mutationTypes":["All","Added","Removed","Changed"],"objectName":"objectName","queryString":"queryString","snapshotId":"snapshotId","absolutelyExtraneousField1":null}`,
					`--sharepoint-params={"categoryTypes":["Document","Excel","Powerpoint","Image","OneNote"],"creationEndTimeSecs":26,"creationStartTimeSecs":26,"includeFiles":true,"includeFolders":true,"o365Params":{"domainIds":[26,27],"groupIds":[26,27],"siteIds":[26,27],"teamsIds":[26,27],"userIds":[26,27]},"ownerNames":["ownerName1"],"searchString":"searchString","sizeBytesLowerLimit":26,"sizeBytesUpperLimit":26,"absolutelyExtraneousField1":null}`,
					`--uda-params={"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There is an unsupported field in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField1'\n`))
			})

			It("but there are multiple extranous fields", func() {
				args := []string{
					"indexed-objects-search",
					`--xibm-tenant-id=tenantId`,
					`--object-type=Emails`,
					`--protection-group-ids=protectionGroupId1`,
					`--storage-domain-ids=26,27`,
					`--tenant-id=tenantId`,
					`--include-tenants=false`,
					`--tags=123:456:ABC-123,123:456:ABC-456`,
					`--snapshot-tags=123:456:DEF-123,123:456:DEF-456`,
					`--must-have-tag-ids=123:456:ABC-123`,
					`--might-have-tag-ids=123:456:ABC-456`,
					`--must-have-snapshot-tag-ids=123:456:DEF-123`,
					`--might-have-snapshot-tag-ids=123:456:DEF-456`,
					`--pagination-cookie=paginationCookie`,
					`--count=38`,
					`--use-cached-data=true`,
					`--cassandra-params={"cassandraObjectTypes":["CassandraKeyspaces","CassandraTables"],"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--couchbase-params={"couchbaseObjectTypes":["CouchbaseBuckets"],"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--email-params={"attendeesAddresses":["attendee1@domain.com"],"bccRecipientAddresses":["bccrecipient@domain.com"],"ccRecipientAddresses":["ccrecipient@domain.com"],"createdEndTimeSecs":26,"createdStartTimeSecs":26,"dueDateEndTimeSecs":26,"dueDateStartTimeSecs":26,"emailAddress":"email@domain.com","emailSubject":"Email Subject","firstName":"First Name","folderNames":["folder1"],"hasAttachment":true,"lastModifiedEndTimeSecs":26,"lastModifiedStartTimeSecs":26,"lastName":"Last Name","middleName":"Middle Name","organizerAddress":"organizer@domain.com","receivedEndTimeSecs":26,"receivedStartTimeSecs":26,"recipientAddresses":["recipient@domain.com"],"senderAddress":"sender@domain.com","sourceEnvironment":"kO365","taskStatusTypes":["NotStarted","InProgress","Completed","WaitingOnOthers","Deferred"],"types":["Email","Folder","Calendar","Contact","Task","Note"],"o365Params":{"domainIds":[26,27],"mailboxIds":[26,27]},"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--exchange-params={"searchString":"searchString","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--file-params={"searchString":"searchString","types":["File","Directory","Symlink"],"sourceEnvironments":["kVMware","kHyperV","kSQL","kView","kRemoteAdapter","kPhysical","kPhysicalFiles","kPure","kIbmFlashSystem","kAzure","kNetapp","kGenericNas","kAcropolis","kIsilon","kGPFS","kKVM","kAWS","kExchange","kOracle","kGCP","kFlashBlade","kO365","kHyperFlex","kKubernetes","kElastifile","kSAPHANA","kUDA","kSfdc"],"sourceIds":[26,27],"objectIds":[26,27],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--hbase-params={"hbaseObjectTypes":["HbaseNamespaces","HbaseTables"],"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--hdfs-params={"hdfsTypes":["HDFSFolders","HDFSFiles"],"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--hive-params={"hiveObjectTypes":["HiveDatabases","HiveTables","HivePartitions"],"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--mongodb-params={"mongoDBObjectTypes":["MongoDatabases","MongoCollections"],"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--ms-groups-params={"mailboxParams":{"attendeesAddresses":["attendee1@domain.com"],"bccRecipientAddresses":["bccrecipient@domain.com"],"ccRecipientAddresses":["ccrecipient@domain.com"],"createdEndTimeSecs":26,"createdStartTimeSecs":26,"dueDateEndTimeSecs":26,"dueDateStartTimeSecs":26,"emailAddress":"email@domain.com","emailSubject":"Email Subject","firstName":"First Name","folderNames":["folder1"],"hasAttachment":true,"lastModifiedEndTimeSecs":26,"lastModifiedStartTimeSecs":26,"lastName":"Last Name","middleName":"Middle Name","organizerAddress":"organizer@domain.com","receivedEndTimeSecs":26,"receivedStartTimeSecs":26,"recipientAddresses":["recipient@domain.com"],"senderAddress":"sender@domain.com","sourceEnvironment":"kO365","taskStatusTypes":["NotStarted","InProgress","Completed","WaitingOnOthers","Deferred"],"types":["Email","Folder","Calendar","Contact","Task","Note"]},"o365Params":{"domainIds":[26,27],"groupIds":[26,27],"siteIds":[26,27],"teamsIds":[26,27],"userIds":[26,27]},"siteParams":{"categoryTypes":["Document","Excel","Powerpoint","Image","OneNote"],"creationEndTimeSecs":26,"creationStartTimeSecs":26,"includeFiles":true,"includeFolders":true,"o365Params":{"domainIds":[26,27],"groupIds":[26,27],"siteIds":[26,27],"teamsIds":[26,27],"userIds":[26,27]},"ownerNames":["ownerName1"],"searchString":"searchString","sizeBytesLowerLimit":26,"sizeBytesUpperLimit":26},"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--ms-teams-params={"categoryTypes":["Document","Excel","Powerpoint","Image","OneNote"],"channelNames":["channelName1"],"channelParams":{"channelEmail":"channel@domain.com","channelId":"channelId","channelName":"channelName","includePrivateChannels":true,"includePublicChannels":true},"creationEndTimeSecs":26,"creationStartTimeSecs":26,"o365Params":{"domainIds":[26,27],"groupIds":[26,27],"siteIds":[26,27],"teamsIds":[26,27],"userIds":[26,27]},"ownerNames":["ownerName1"],"searchString":"searchString","sizeBytesLowerLimit":26,"sizeBytesUpperLimit":26,"types":["Channel","Chat","Conversation","File","Folder"],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--one-drive-params={"categoryTypes":["Document","Excel","Powerpoint","Image","OneNote"],"creationEndTimeSecs":26,"creationStartTimeSecs":26,"includeFiles":true,"includeFolders":true,"o365Params":{"domainIds":[26,27],"groupIds":[26,27],"siteIds":[26,27],"teamsIds":[26,27],"userIds":[26,27]},"ownerNames":["ownerName1"],"searchString":"searchString","sizeBytesLowerLimit":26,"sizeBytesUpperLimit":26,"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--public-folder-params={"searchString":"searchString","types":["Calendar","Contact","Post","Folder","Task","Journal","Note"],"hasAttachment":true,"senderAddress":"sender@domain.com","recipientAddresses":["recipient@domain.com"],"ccRecipientAddresses":["ccrecipient@domain.com"],"bccRecipientAddresses":["bccrecipient@domain.com"],"receivedStartTimeSecs":26,"receivedEndTimeSecs":26,"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--sfdc-params={"mutationTypes":["All","Added","Removed","Changed"],"objectName":"objectName","queryString":"queryString","snapshotId":"snapshotId","absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--sharepoint-params={"categoryTypes":["Document","Excel","Powerpoint","Image","OneNote"],"creationEndTimeSecs":26,"creationStartTimeSecs":26,"includeFiles":true,"includeFolders":true,"o365Params":{"domainIds":[26,27],"groupIds":[26,27],"siteIds":[26,27],"teamsIds":[26,27],"userIds":[26,27]},"ownerNames":["ownerName1"],"searchString":"searchString","sizeBytesLowerLimit":26,"sizeBytesUpperLimit":26,"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
					`--uda-params={"searchString":"searchString","sourceIds":[26,27],"absolutelyExtraneousField1":null,"absolutelyExtraneousField2":null}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
				Expect(string(session.Err.Contents())).To(MatchRegexp(`^There are multiple unsupported fields in JSON flag '.+': '#\.(\[0\]\.)?absolutelyExtraneousField[12], #\.(\[0\]\.)?absolutelyExtraneousField[12]'\n`))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("POST"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"indexed-objects-search",
					`--xibm-tenant-id=tenantId`,
					`--object-type=Emails`,
					`--protection-group-ids=protectionGroupId1`,
					`--storage-domain-ids=26,27`,
					`--tenant-id=tenantId`,
					`--include-tenants=false`,
					`--tags=123:456:ABC-123,123:456:ABC-456`,
					`--snapshot-tags=123:456:DEF-123,123:456:DEF-456`,
					`--must-have-tag-ids=123:456:ABC-123`,
					`--might-have-tag-ids=123:456:ABC-456`,
					`--must-have-snapshot-tag-ids=123:456:DEF-123`,
					`--might-have-snapshot-tag-ids=123:456:DEF-456`,
					`--pagination-cookie=paginationCookie`,
					`--count=38`,
					`--use-cached-data=true`,
					`--cassandra-params={"cassandraObjectTypes": ["CassandraKeyspaces","CassandraTables"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--couchbase-params={"couchbaseObjectTypes": ["CouchbaseBuckets"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--email-params={"attendeesAddresses": ["attendee1@domain.com"], "bccRecipientAddresses": ["bccrecipient@domain.com"], "ccRecipientAddresses": ["ccrecipient@domain.com"], "createdEndTimeSecs": 26, "createdStartTimeSecs": 26, "dueDateEndTimeSecs": 26, "dueDateStartTimeSecs": 26, "emailAddress": "email@domain.com", "emailSubject": "Email Subject", "firstName": "First Name", "folderNames": ["folder1"], "hasAttachment": true, "lastModifiedEndTimeSecs": 26, "lastModifiedStartTimeSecs": 26, "lastName": "Last Name", "middleName": "Middle Name", "organizerAddress": "organizer@domain.com", "receivedEndTimeSecs": 26, "receivedStartTimeSecs": 26, "recipientAddresses": ["recipient@domain.com"], "senderAddress": "sender@domain.com", "sourceEnvironment": "kO365", "taskStatusTypes": ["NotStarted","InProgress","Completed","WaitingOnOthers","Deferred"], "types": ["Email","Folder","Calendar","Contact","Task","Note"], "o365Params": {"domainIds": [26,27], "mailboxIds": [26,27]}}`,
					`--exchange-params={"searchString": "searchString"}`,
					`--file-params={"searchString": "searchString", "types": ["File","Directory","Symlink"], "sourceEnvironments": ["kVMware","kHyperV","kSQL","kView","kRemoteAdapter","kPhysical","kPhysicalFiles","kPure","kIbmFlashSystem","kAzure","kNetapp","kGenericNas","kAcropolis","kIsilon","kGPFS","kKVM","kAWS","kExchange","kOracle","kGCP","kFlashBlade","kO365","kHyperFlex","kKubernetes","kElastifile","kSAPHANA","kUDA","kSfdc"], "sourceIds": [26,27], "objectIds": [26,27]}`,
					`--hbase-params={"hbaseObjectTypes": ["HbaseNamespaces","HbaseTables"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--hdfs-params={"hdfsTypes": ["HDFSFolders","HDFSFiles"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--hive-params={"hiveObjectTypes": ["HiveDatabases","HiveTables","HivePartitions"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--mongodb-params={"mongoDBObjectTypes": ["MongoDatabases","MongoCollections"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--ms-groups-params={"mailboxParams": {"attendeesAddresses": ["attendee1@domain.com"], "bccRecipientAddresses": ["bccrecipient@domain.com"], "ccRecipientAddresses": ["ccrecipient@domain.com"], "createdEndTimeSecs": 26, "createdStartTimeSecs": 26, "dueDateEndTimeSecs": 26, "dueDateStartTimeSecs": 26, "emailAddress": "email@domain.com", "emailSubject": "Email Subject", "firstName": "First Name", "folderNames": ["folder1"], "hasAttachment": true, "lastModifiedEndTimeSecs": 26, "lastModifiedStartTimeSecs": 26, "lastName": "Last Name", "middleName": "Middle Name", "organizerAddress": "organizer@domain.com", "receivedEndTimeSecs": 26, "receivedStartTimeSecs": 26, "recipientAddresses": ["recipient@domain.com"], "senderAddress": "sender@domain.com", "sourceEnvironment": "kO365", "taskStatusTypes": ["NotStarted","InProgress","Completed","WaitingOnOthers","Deferred"], "types": ["Email","Folder","Calendar","Contact","Task","Note"]}, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "siteParams": {"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "includeFiles": true, "includeFolders": true, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26}}`,
					`--ms-teams-params={"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "channelNames": ["channelName1"], "channelParams": {"channelEmail": "channel@domain.com", "channelId": "channelId", "channelName": "channelName", "includePrivateChannels": true, "includePublicChannels": true}, "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26, "types": ["Channel","Chat","Conversation","File","Folder"]}`,
					`--one-drive-params={"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "includeFiles": true, "includeFolders": true, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26}`,
					`--public-folder-params={"searchString": "searchString", "types": ["Calendar","Contact","Post","Folder","Task","Journal","Note"], "hasAttachment": true, "senderAddress": "sender@domain.com", "recipientAddresses": ["recipient@domain.com"], "ccRecipientAddresses": ["ccrecipient@domain.com"], "bccRecipientAddresses": ["bccrecipient@domain.com"], "receivedStartTimeSecs": 26, "receivedEndTimeSecs": 26}`,
					`--sfdc-params={"mutationTypes": ["All","Added","Removed","Changed"], "objectName": "objectName", "queryString": "queryString", "snapshotId": "snapshotId"}`,
					`--sharepoint-params={"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "includeFiles": true, "includeFolders": true, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26}`,
					`--uda-params={"searchString": "searchString", "sourceIds": [26,27]}`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"indexed-objects-search",
					`--xibm-tenant-id=tenantId`,
					`--object-type=Emails`,
					`--protection-group-ids=protectionGroupId1`,
					`--storage-domain-ids=26,27`,
					`--tenant-id=tenantId`,
					`--include-tenants=false`,
					`--tags=123:456:ABC-123,123:456:ABC-456`,
					`--snapshot-tags=123:456:DEF-123,123:456:DEF-456`,
					`--must-have-tag-ids=123:456:ABC-123`,
					`--might-have-tag-ids=123:456:ABC-456`,
					`--must-have-snapshot-tag-ids=123:456:DEF-123`,
					`--might-have-snapshot-tag-ids=123:456:DEF-456`,
					`--pagination-cookie=paginationCookie`,
					`--count=38`,
					`--use-cached-data=true`,
					`--cassandra-params={"cassandraObjectTypes": ["CassandraKeyspaces","CassandraTables"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--couchbase-params={"couchbaseObjectTypes": ["CouchbaseBuckets"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--email-params={"attendeesAddresses": ["attendee1@domain.com"], "bccRecipientAddresses": ["bccrecipient@domain.com"], "ccRecipientAddresses": ["ccrecipient@domain.com"], "createdEndTimeSecs": 26, "createdStartTimeSecs": 26, "dueDateEndTimeSecs": 26, "dueDateStartTimeSecs": 26, "emailAddress": "email@domain.com", "emailSubject": "Email Subject", "firstName": "First Name", "folderNames": ["folder1"], "hasAttachment": true, "lastModifiedEndTimeSecs": 26, "lastModifiedStartTimeSecs": 26, "lastName": "Last Name", "middleName": "Middle Name", "organizerAddress": "organizer@domain.com", "receivedEndTimeSecs": 26, "receivedStartTimeSecs": 26, "recipientAddresses": ["recipient@domain.com"], "senderAddress": "sender@domain.com", "sourceEnvironment": "kO365", "taskStatusTypes": ["NotStarted","InProgress","Completed","WaitingOnOthers","Deferred"], "types": ["Email","Folder","Calendar","Contact","Task","Note"], "o365Params": {"domainIds": [26,27], "mailboxIds": [26,27]}}`,
					`--exchange-params={"searchString": "searchString"}`,
					`--file-params={"searchString": "searchString", "types": ["File","Directory","Symlink"], "sourceEnvironments": ["kVMware","kHyperV","kSQL","kView","kRemoteAdapter","kPhysical","kPhysicalFiles","kPure","kIbmFlashSystem","kAzure","kNetapp","kGenericNas","kAcropolis","kIsilon","kGPFS","kKVM","kAWS","kExchange","kOracle","kGCP","kFlashBlade","kO365","kHyperFlex","kKubernetes","kElastifile","kSAPHANA","kUDA","kSfdc"], "sourceIds": [26,27], "objectIds": [26,27]}`,
					`--hbase-params={"hbaseObjectTypes": ["HbaseNamespaces","HbaseTables"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--hdfs-params={"hdfsTypes": ["HDFSFolders","HDFSFiles"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--hive-params={"hiveObjectTypes": ["HiveDatabases","HiveTables","HivePartitions"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--mongodb-params={"mongoDBObjectTypes": ["MongoDatabases","MongoCollections"], "searchString": "searchString", "sourceIds": [26,27]}`,
					`--ms-groups-params={"mailboxParams": {"attendeesAddresses": ["attendee1@domain.com"], "bccRecipientAddresses": ["bccrecipient@domain.com"], "ccRecipientAddresses": ["ccrecipient@domain.com"], "createdEndTimeSecs": 26, "createdStartTimeSecs": 26, "dueDateEndTimeSecs": 26, "dueDateStartTimeSecs": 26, "emailAddress": "email@domain.com", "emailSubject": "Email Subject", "firstName": "First Name", "folderNames": ["folder1"], "hasAttachment": true, "lastModifiedEndTimeSecs": 26, "lastModifiedStartTimeSecs": 26, "lastName": "Last Name", "middleName": "Middle Name", "organizerAddress": "organizer@domain.com", "receivedEndTimeSecs": 26, "receivedStartTimeSecs": 26, "recipientAddresses": ["recipient@domain.com"], "senderAddress": "sender@domain.com", "sourceEnvironment": "kO365", "taskStatusTypes": ["NotStarted","InProgress","Completed","WaitingOnOthers","Deferred"], "types": ["Email","Folder","Calendar","Contact","Task","Note"]}, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "siteParams": {"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "includeFiles": true, "includeFolders": true, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26}}`,
					`--ms-teams-params={"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "channelNames": ["channelName1"], "channelParams": {"channelEmail": "channel@domain.com", "channelId": "channelId", "channelName": "channelName", "includePrivateChannels": true, "includePublicChannels": true}, "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26, "types": ["Channel","Chat","Conversation","File","Folder"]}`,
					`--one-drive-params={"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "includeFiles": true, "includeFolders": true, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26}`,
					`--public-folder-params={"searchString": "searchString", "types": ["Calendar","Contact","Post","Folder","Task","Journal","Note"], "hasAttachment": true, "senderAddress": "sender@domain.com", "recipientAddresses": ["recipient@domain.com"], "ccRecipientAddresses": ["ccrecipient@domain.com"], "bccRecipientAddresses": ["bccrecipient@domain.com"], "receivedStartTimeSecs": 26, "receivedEndTimeSecs": 26}`,
					`--sfdc-params={"mutationTypes": ["All","Added","Removed","Changed"], "objectName": "objectName", "queryString": "queryString", "snapshotId": "snapshotId"}`,
					`--sharepoint-params={"categoryTypes": ["Document","Excel","Powerpoint","Image","OneNote"], "creationEndTimeSecs": 26, "creationStartTimeSecs": 26, "includeFiles": true, "includeFolders": true, "o365Params": {"domainIds": [26,27], "groupIds": [26,27], "siteIds": [26,27], "teamsIds": [26,27], "userIds": [26,27]}, "ownerNames": ["ownerName1"], "searchString": "searchString", "sizeBytesLowerLimit": 26, "sizeBytesUpperLimit": 26}`,
					`--uda-params={"searchString": "searchString", "sourceIds": [26,27]}`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"indexed-objects-search",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `objects-search` command", func() {
		var (
			operationPath = "/data-protect/search/objects"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"objects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}, "tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "heliosTags": [{"category": "Security", "name": "testString", "subCategory": "Classification", "thirdPartyName": "testString", "type": "System", "uiColor": "testString", "updatedTimeUsecs": 26, "uuid": "testString"}], "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "objectProtectionInfos": [{"objectId": 26, "sourceId": 26, "viewId": 26, "regionId": "testString", "clusterId": 26, "clusterIncarnationId": 26, "tenantIds": ["testString"], "isDeleted": true, "protectionGroups": [{"name": "testString", "id": "testString", "protectionEnvType": "kAgent", "policyName": "testString", "policyId": "testString", "lastBackupRunStatus": "Accepted", "lastArchivalRunStatus": "Accepted", "lastReplicationRunStatus": "Accepted", "lastRunSlaViolated": true}], "objectBackupConfiguration": [{"policyName": "testString", "policyId": "testString", "lastBackupRunStatus": "Accepted", "lastArchivalRunStatus": "Accepted", "lastReplicationRunStatus": "Accepted", "lastRunSlaViolated": true}], "lastRunStatus": "Accepted"}], "secondaryIds": [{"name": "testString", "value": "testString"}], "taggedSnapshots": [{"clusterId": 26, "clusterIncarnationId": 26, "jobId": 26, "objectUuid": "testString", "runStartTimeUsecs": 26, "tags": [{"category": "Security", "name": "testString", "subCategory": "Classification", "thirdPartyName": "testString", "type": "System", "uiColor": "testString", "updatedTimeUsecs": 26, "uuid": "testString"}]}]}], "paginationCookie": "testString", "count": 38}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"objects-search",
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--search-string=searchString`,
					`--environments=kPhysical,kSQL`,
					`--protection-types=kAgent,kNative,kSnapshotManager,kRDSSnapshotManager,kAuroraSnapshotManager,kAwsS3,kAwsRDSPostgresBackup,kAwsAuroraPostgres,kAwsRDSPostgres,kAzureSQL,kFile,kVolume`,
					`--protection-group-ids=protectionGroupId1`,
					`--object-ids=26,27`,
					`--os-types=kLinux,kWindows`,
					`--source-ids=26,27`,
					`--source-uuids=sourceUuid1`,
					`--is-protected=true`,
					`--is-deleted=true`,
					`--last-run-status-list=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,LegalHold`,
					`--cluster-identifiers=clusterIdentifier1`,
					`--include-deleted-objects=true`,
					`--pagination-cookie=paginationCookie`,
					`--count=38`,
					`--must-have-tag-ids=123:456:ABC-123`,
					`--might-have-tag-ids=123:456:ABC-456`,
					`--must-have-snapshot-tag-ids=123:456:DEF-123`,
					`--might-have-snapshot-tag-ids=123:456:DEF-456`,
					`--tag-search-name=tagName`,
					`--tag-names=tag1`,
					`--tag-types=System,Custom,ThirdParty`,
					`--tag-categories=Security`,
					`--tag-sub-categories=Classification,Threats,Anomalies,Dspm`,
					`--include-helios-tag-info-for-objects=true`,
					`--external-filters=filter1`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"objects-search",
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--search-string=searchString`,
					`--environments=kPhysical,kSQL`,
					`--protection-types=kAgent,kNative,kSnapshotManager,kRDSSnapshotManager,kAuroraSnapshotManager,kAwsS3,kAwsRDSPostgresBackup,kAwsAuroraPostgres,kAwsRDSPostgres,kAzureSQL,kFile,kVolume`,
					`--protection-group-ids=protectionGroupId1`,
					`--object-ids=26,27`,
					`--os-types=kLinux,kWindows`,
					`--source-ids=26,27`,
					`--source-uuids=sourceUuid1`,
					`--is-protected=true`,
					`--is-deleted=true`,
					`--last-run-status-list=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,LegalHold`,
					`--cluster-identifiers=clusterIdentifier1`,
					`--include-deleted-objects=true`,
					`--pagination-cookie=paginationCookie`,
					`--count=38`,
					`--must-have-tag-ids=123:456:ABC-123`,
					`--might-have-tag-ids=123:456:ABC-456`,
					`--must-have-snapshot-tag-ids=123:456:DEF-123`,
					`--might-have-snapshot-tag-ids=123:456:DEF-456`,
					`--tag-search-name=tagName`,
					`--tag-names=tag1`,
					`--tag-types=System,Custom,ThirdParty`,
					`--tag-categories=Security`,
					`--tag-sub-categories=Classification,Threats,Anomalies,Dspm`,
					`--include-helios-tag-info-for-objects=true`,
					`--external-filters=filter1`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"objects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}, "tags": [{"tagId": "testString"}], "snapshotTags": [{"tagId": "testString", "runIds": ["testString"]}], "heliosTags": [{"category": "Security", "name": "testString", "subCategory": "Classification", "thirdPartyName": "testString", "type": "System", "uiColor": "testString", "updatedTimeUsecs": 26, "uuid": "testString"}], "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}}, "objectProtectionInfos": [{"objectId": 26, "sourceId": 26, "viewId": 26, "regionId": "testString", "clusterId": 26, "clusterIncarnationId": 26, "tenantIds": ["testString"], "isDeleted": true, "protectionGroups": [{"name": "testString", "id": "testString", "protectionEnvType": "kAgent", "policyName": "testString", "policyId": "testString", "lastBackupRunStatus": "Accepted", "lastArchivalRunStatus": "Accepted", "lastReplicationRunStatus": "Accepted", "lastRunSlaViolated": true}], "objectBackupConfiguration": [{"policyName": "testString", "policyId": "testString", "lastBackupRunStatus": "Accepted", "lastArchivalRunStatus": "Accepted", "lastReplicationRunStatus": "Accepted", "lastRunSlaViolated": true}], "lastRunStatus": "Accepted"}], "secondaryIds": [{"name": "testString", "value": "testString"}], "taggedSnapshots": [{"clusterId": 26, "clusterIncarnationId": 26, "jobId": 26, "objectUuid": "testString", "runStartTimeUsecs": 26, "tags": [{"category": "Security", "name": "testString", "subCategory": "Classification", "thirdPartyName": "testString", "type": "System", "uiColor": "testString", "updatedTimeUsecs": 26, "uuid": "testString"}]}]}], "paginationCookie": "testString", "count": 38}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"objects-search",
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--search-string=searchString`,
					`--environments=kPhysical,kSQL`,
					`--protection-types=kAgent,kNative,kSnapshotManager,kRDSSnapshotManager,kAuroraSnapshotManager,kAwsS3,kAwsRDSPostgresBackup,kAwsAuroraPostgres,kAwsRDSPostgres,kAzureSQL,kFile,kVolume`,
					`--protection-group-ids=protectionGroupId1`,
					`--object-ids=26,27`,
					`--os-types=kLinux,kWindows`,
					`--source-ids=26,27`,
					`--source-uuids=sourceUuid1`,
					`--is-protected=true`,
					`--is-deleted=true`,
					`--last-run-status-list=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,LegalHold`,
					`--cluster-identifiers=clusterIdentifier1`,
					`--include-deleted-objects=true`,
					`--pagination-cookie=paginationCookie`,
					`--count=38`,
					`--must-have-tag-ids=123:456:ABC-123`,
					`--might-have-tag-ids=123:456:ABC-456`,
					`--must-have-snapshot-tag-ids=123:456:DEF-123`,
					`--might-have-snapshot-tag-ids=123:456:DEF-456`,
					`--tag-search-name=tagName`,
					`--tag-names=tag1`,
					`--tag-types=System,Custom,ThirdParty`,
					`--tag-categories=Security`,
					`--tag-sub-categories=Classification,Threats,Anomalies,Dspm`,
					`--include-helios-tag-info-for-objects=true`,
					`--external-filters=filter1`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"objects-search",
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--search-string=searchString`,
					`--environments=kPhysical,kSQL`,
					`--protection-types=kAgent,kNative,kSnapshotManager,kRDSSnapshotManager,kAuroraSnapshotManager,kAwsS3,kAwsRDSPostgresBackup,kAwsAuroraPostgres,kAwsRDSPostgres,kAzureSQL,kFile,kVolume`,
					`--protection-group-ids=protectionGroupId1`,
					`--object-ids=26,27`,
					`--os-types=kLinux,kWindows`,
					`--source-ids=26,27`,
					`--source-uuids=sourceUuid1`,
					`--is-protected=true`,
					`--is-deleted=true`,
					`--last-run-status-list=Accepted,Running,Canceled,Canceling,Failed,Missed,Succeeded,SucceededWithWarning,OnHold,Finalizing,Skipped,LegalHold`,
					`--cluster-identifiers=clusterIdentifier1`,
					`--include-deleted-objects=true`,
					`--pagination-cookie=paginationCookie`,
					`--count=38`,
					`--must-have-tag-ids=123:456:ABC-123`,
					`--might-have-tag-ids=123:456:ABC-456`,
					`--must-have-snapshot-tag-ids=123:456:DEF-123`,
					`--might-have-snapshot-tag-ids=123:456:DEF-456`,
					`--tag-search-name=tagName`,
					`--tag-names=tag1`,
					`--tag-types=System,Custom,ThirdParty`,
					`--tag-categories=Security`,
					`--tag-sub-categories=Classification,Threats,Anomalies,Dspm`,
					`--include-helios-tag-info-for-objects=true`,
					`--external-filters=filter1`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"objects-search",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})

	Describe("Run the `protected-objects-search` command", func() {
		var (
			operationPath = "/data-protect/search/protected-objects"
			requestCallback func(*http.Request)
		)

		Context("successfully", func() {
			BeforeEach(func() {
				// Initialize a no-op callback function.
				requestCallback = func(req *http.Request) {}

				// Create the mock server.
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					requestCallback(req)
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"objects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "latestSnapshotsInfo": [{"localSnapshotInfo": {"snapshotId": "testString", "logicalSizeBytes": 26}, "archivalSnapshotsInfo": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "snapshotId": "testString", "logicalSizeBytes": 26}], "indexingStatus": "InProgress", "protectionGroupId": "testString", "protectionGroupName": "testString", "runInstanceId": 26, "sourceGroupId": "testString", "protectionRunId": "testString", "runType": "kRegular", "protectionRunStartTimeUsecs": 26, "protectionRunEndTimeUsecs": 26}]}], "metadata": {"uniqueProtectionGroupIdentifiers": [{"protectionGroupId": "testString", "protectionGroupName": "testString"}]}, "numResults": 26}`)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("with all flags", func() {
				// Put together mock arguments.
				args := []string{
					"protected-objects-search",
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--search-string=searchString`,
					`--environments=kPhysical,kSQL`,
					`--snapshot-actions=RecoverVMs,RecoverFiles,InstantVolumeMount,RecoverVmDisks,MountVolumes,RecoverVApps,RecoverRDS,RecoverAurora,RecoverS3Buckets,RecoverApps,RecoverNasVolume,RecoverPhysicalVolumes,RecoverSystem,RecoverSanVolumes,RecoverNamespaces,RecoverObjects,DownloadFilesAndFolders,RecoverPublicFolders,RecoverVAppTemplates,RecoverMailbox,RecoverOneDrive,RecoverMsTeam,RecoverMsGroup,RecoverSharePoint,ConvertToPst,RecoverSfdcRecords,RecoverAzureSQL,DownloadChats,RecoverRDSPostgres,RecoverMailboxCSM,RecoverOneDriveCSM,RecoverSharePointCSM`,
					`--object-action-key=kPhysical`,
					`--protection-group-ids=protectionGroupId1`,
					`--object-ids=26,27`,
					`--sub-result-size=38`,
					`--filter-snapshot-from-usecs=26`,
					`--filter-snapshot-to-usecs=26`,
					`--os-types=kLinux,kWindows`,
					`--source-ids=26,27`,
					`--run-instance-ids=26,27`,
					`--cdp-protected-only=true`,
					`--use-cached-data=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))
				Expect(string(session.Out.Contents())).ToNot(BeNil())
			})

			It("with all flags (JSON output)", func() {
				// Put together mock arguments.
				args := []string{
					"protected-objects-search",
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--search-string=searchString`,
					`--environments=kPhysical,kSQL`,
					`--snapshot-actions=RecoverVMs,RecoverFiles,InstantVolumeMount,RecoverVmDisks,MountVolumes,RecoverVApps,RecoverRDS,RecoverAurora,RecoverS3Buckets,RecoverApps,RecoverNasVolume,RecoverPhysicalVolumes,RecoverSystem,RecoverSanVolumes,RecoverNamespaces,RecoverObjects,DownloadFilesAndFolders,RecoverPublicFolders,RecoverVAppTemplates,RecoverMailbox,RecoverOneDrive,RecoverMsTeam,RecoverMsGroup,RecoverSharePoint,ConvertToPst,RecoverSfdcRecords,RecoverAzureSQL,DownloadChats,RecoverRDSPostgres,RecoverMailboxCSM,RecoverOneDriveCSM,RecoverSharePointCSM`,
					`--object-action-key=kPhysical`,
					`--protection-group-ids=protectionGroupId1`,
					`--object-ids=26,27`,
					`--sub-result-size=38`,
					`--filter-snapshot-from-usecs=26`,
					`--filter-snapshot-to-usecs=26`,
					`--os-types=kLinux,kWindows`,
					`--source-ids=26,27`,
					`--run-instance-ids=26,27`,
					`--cdp-protected-only=true`,
					`--use-cached-data=true`,
					`--output=json`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(0))

				out := session.Out.Contents()
				mockResponse := `{"objects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}, "protectionStats": [{"environment": "kPhysical", "protectedCount": 26, "unprotectedCount": 26, "deletedProtectedCount": 26, "protectedSizeBytes": 26, "unprotectedSizeBytes": 26}], "permissions": {"objectId": 26, "users": [{"name": "testString", "sid": "testString", "domain": "testString"}], "groups": [{"name": "testString", "sid": "testString", "domain": "testString"}], "tenant": {"createdAtTimeMsecs": 26, "deletedAtTimeMsecs": 26, "description": "testString", "externalVendorMetadata": {"ibmTenantMetadataParams": {"accountId": "testString", "crn": "testString", "customProperties": [{"key": "testString", "value": "testString"}], "livenessMode": "Active", "metricsConfig": {"cosResourceConfig": {"resourceURL": "testString"}, "iamMetricsConfig": {"IAMUrl": "testString", "billingApiKeySecretId": "testString"}, "meteringConfig": {"partIds": ["USAGETERABYTE"], "submissionIntervalInSecs": 38, "url": "testString"}}, "ownershipMode": "Primary", "planId": "testString", "resourceGroupId": "testString", "resourceInstanceId": "testString"}, "type": "IBM"}, "id": "testString", "isManagedOnHelios": true, "lastUpdatedAtTimeMsecs": 26, "name": "testString", "network": {"connectorEnabled": true, "clusterHostname": "testString", "clusterIps": ["testString"]}, "status": "Active"}}, "mssqlParams": {"aagInfo": {"name": "testString", "objectId": 26}, "hostInfo": {"id": "testString", "name": "testString", "environment": "kPhysical"}, "isEncrypted": true}, "physicalParams": {"enableSystemBackup": true}, "sourceInfo": {"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "childObjects": [{"id": 26, "name": "testString", "sourceId": 26, "sourceName": "testString", "environment": "kPhysical", "objectHash": "testString", "objectType": "kCluster", "logicalSizeBytes": 26, "uuid": "testString", "globalId": "testString", "protectionType": "kAgent", "sharepointSiteSummary": {"siteWebUrl": "testString"}, "osType": "kLinux", "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}], "vCenterSummary": {"isCloudEnv": true}, "windowsClusterSummary": {"clusterSourceType": "testString"}}, "latestSnapshotsInfo": [{"localSnapshotInfo": {"snapshotId": "testString", "logicalSizeBytes": 26}, "archivalSnapshotsInfo": [{"targetId": 26, "archivalTaskId": "testString", "targetName": "testString", "targetType": "Tape", "usageType": "Archival", "ownershipContext": "Local", "tierSettings": {"awsTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAmazonS3Standard"}]}, "azureTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kAzureTierHot"}]}, "cloudPlatform": "AWS", "googleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kGoogleStandard"}]}, "oracleTiering": {"tiers": [{"moveAfterUnit": "Days", "moveAfter": 26, "tierType": "kOracleTierStandard"}]}, "currentTierType": "kAmazonS3Standard"}, "snapshotId": "testString", "logicalSizeBytes": 26}], "indexingStatus": "InProgress", "protectionGroupId": "testString", "protectionGroupName": "testString", "runInstanceId": 26, "sourceGroupId": "testString", "protectionRunId": "testString", "runType": "kRegular", "protectionRunStartTimeUsecs": 26, "protectionRunEndTimeUsecs": 26}]}], "metadata": {"uniqueProtectionGroupIdentifiers": [{"protectionGroupId": "testString", "protectionGroupName": "testString"}]}, "numResults": 26}`
				Expect(string(out)).To(MatchJSON(mockResponse))
			})
		})

		Context("unsuccessfully", func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request.
					Expect(req.URL.EscapedPath()).To(Equal(operationPath))
					Expect(req.Method).To(Equal("GET"))
					// Set mock response
					res.WriteHeader(404)
				}))

				// Create the test environment.
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_URL="+testServer.URL)
				testEnvironment = append(testEnvironment, "BACKUP_RECOVERY_AUTH_TYPE=noAuth")
			})

			AfterEach(func() {
				testServer.Close()
				testEnvironment = []string{}
			})

			It("because authentication error", func() {
				// Put together mock arguments.
				args := []string{
					"protected-objects-search",
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--search-string=searchString`,
					`--environments=kPhysical,kSQL`,
					`--snapshot-actions=RecoverVMs,RecoverFiles,InstantVolumeMount,RecoverVmDisks,MountVolumes,RecoverVApps,RecoverRDS,RecoverAurora,RecoverS3Buckets,RecoverApps,RecoverNasVolume,RecoverPhysicalVolumes,RecoverSystem,RecoverSanVolumes,RecoverNamespaces,RecoverObjects,DownloadFilesAndFolders,RecoverPublicFolders,RecoverVAppTemplates,RecoverMailbox,RecoverOneDrive,RecoverMsTeam,RecoverMsGroup,RecoverSharePoint,ConvertToPst,RecoverSfdcRecords,RecoverAzureSQL,DownloadChats,RecoverRDSPostgres,RecoverMailboxCSM,RecoverOneDriveCSM,RecoverSharePointCSM`,
					`--object-action-key=kPhysical`,
					`--protection-group-ids=protectionGroupId1`,
					`--object-ids=26,27`,
					`--sub-result-size=38`,
					`--filter-snapshot-from-usecs=26`,
					`--filter-snapshot-to-usecs=26`,
					`--os-types=kLinux,kWindows`,
					`--source-ids=26,27`,
					`--run-instance-ids=26,27`,
					`--cdp-protected-only=true`,
					`--use-cached-data=true`,
				}

				// Use the default authentication method to trigger an error.
				testEnvironment = []string{"BACKUP_RECOVERY_URL="+testServer.URL}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring(credentialErrMsg))
			})

			It("because response error", func() {
				args := []string{
					"protected-objects-search",
					`--xibm-tenant-id=tenantId`,
					`--request-initiator-type=UIUser`,
					`--search-string=searchString`,
					`--environments=kPhysical,kSQL`,
					`--snapshot-actions=RecoverVMs,RecoverFiles,InstantVolumeMount,RecoverVmDisks,MountVolumes,RecoverVApps,RecoverRDS,RecoverAurora,RecoverS3Buckets,RecoverApps,RecoverNasVolume,RecoverPhysicalVolumes,RecoverSystem,RecoverSanVolumes,RecoverNamespaces,RecoverObjects,DownloadFilesAndFolders,RecoverPublicFolders,RecoverVAppTemplates,RecoverMailbox,RecoverOneDrive,RecoverMsTeam,RecoverMsGroup,RecoverSharePoint,ConvertToPst,RecoverSfdcRecords,RecoverAzureSQL,DownloadChats,RecoverRDSPostgres,RecoverMailboxCSM,RecoverOneDriveCSM,RecoverSharePointCSM`,
					`--object-action-key=kPhysical`,
					`--protection-group-ids=protectionGroupId1`,
					`--object-ids=26,27`,
					`--sub-result-size=38`,
					`--filter-snapshot-from-usecs=26`,
					`--filter-snapshot-to-usecs=26`,
					`--os-types=kLinux,kWindows`,
					`--source-ids=26,27`,
					`--run-instance-ids=26,27`,
					`--cdp-protected-only=true`,
					`--use-cached-data=true`,
				}

				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(MatchRegexp("^FAILED\n.+\nNot Found\n\n$"))
			})

			It("because missing required flag", func() {
				args := []string{
					"protected-objects-search",
				}
				session, err := runCmd(args, nil)

				Expect(err).To(BeNil())
				Expect(session).To(Exit(1))
				Expect(string(session.Err.Contents())).To(ContainSubstring("required flag(s)"))
				Expect(string(session.Err.Contents())).To(ContainSubstring("not set"))
			})
		})
	})
})
